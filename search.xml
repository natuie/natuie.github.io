<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Baidu不会用怎么办?</title>
    <url>/2022/07/10/Baidu%E4%B8%8D%E4%BC%9A%E7%94%A8%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<blockquote>
<p>相信很多人都遇到一种问题,就是对方不会用百度,总是让别人帮他查,所以,我写了这一篇文章,关于百度如何实现自动化教程</p>
</blockquote>
<p><img src="/img/post/baidu_home.png" alt="图片加载失败"></p>
<p>这种实现用Python实现是最简单的,所以我决定用Python来实现<br>实现很简单,调用selenium来完成自动化<br>首先我们只需要输入你要搜索的内容,Python会自动帮你搜索<br>这看起来是不是很方便?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;百度怎么用？&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure>

<p>倒数第二行就是要搜索的内容,改写即可<br>这脚本只支持Google游览器,如果要支持其他游览器改写第四行’Chrome’为你想要支持的游览器</p>
<blockquote>
<p>注意: 首字母大写</p>
</blockquote>
<p>要跑这个脚本肯定是要一些环境的<br><a href="https://blog.csdn.net/zhoukeguai/article/details/113247342">Google驱动安装教程</a><br><a href="https://blog.csdn.net/zhoukeguai/article/details/113247342">Python安装教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>
<p>跟着跑就是了,如果编译成二进制文件,具体咋编译用上面的方法去百度吧!</p>
<blockquote>
<p>要是看这个教程还是不会用,我这边提供链接<br><a href="https://jingyan.baidu.com/article/d3b74d64ed932d1f76e60969.html">百度使用方法</a><br><a href="https://www.jianshu.com/p/34419342976d/">高效使用百度方法</a><br>要是还是不会怎么办,废了吧</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>用Socket从零开始写一个Chat-cli</title>
    <url>/2022/07/23/%E7%94%A8Socket%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AAChat-cli/</url>
    <content><![CDATA[<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>一种独立于协议的网络编程接口，所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。</p>
<h2 id="Socket主要类型"><a href="#Socket主要类型" class="headerlink" title="Socket主要类型"></a>Socket主要类型</h2><ol>
<li>流套接字(SOCK_STREAM)<br>流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了传输控制协议，即TCP(The Transmission Control Protocol)协议。</li>
<li>数据报套接字(SOCK_DGRAM)<br>数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性,数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用UDP( User DatagramProtocol)协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理 。</li>
<li>原始套接字(SOCK_RAW)<br>原始套接字与标准套接字(标准套接字指的是前面介绍的流套接字和数据报套接字)的区别在于：原始套接字可以读写内核没有处理的IP数据包，而流套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接。</li>
</ol>
<h2 id="Socket主要流程"><a href="#Socket主要流程" class="headerlink" title="Socket主要流程"></a>Socket主要流程</h2><blockquote>
<p>要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket。</p>
</blockquote>
<p> 根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤：<br> (1)服务器监听。<br> (2)客户端请求。<br> (3)连接确认 。</p>
<h3 id="1-服务器监听"><a href="#1-服务器监听" class="headerlink" title="1.服务器监听"></a>1.服务器监听</h3><p> 所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。</p>
<h3 id="2-客户端请求"><a href="#2-客户端请求" class="headerlink" title="2.客户端请求"></a>2.客户端请求</h3><p> 所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求。</p>
<h3 id="3-连接确认"><a href="#3-连接确认" class="headerlink" title="3.连接确认"></a>3.连接确认</h3><p> 所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求。</p>
<h2 id="Socket主要特点"><a href="#Socket主要特点" class="headerlink" title="Socket主要特点"></a>Socket主要特点</h2><p> 根据套接字的不同类型，可以将套接字调用分为面向连接服务和无连接服务。</p>
<h3 id="面向连接服务的主要特点如下："><a href="#面向连接服务的主要特点如下：" class="headerlink" title="面向连接服务的主要特点如下："></a>面向连接服务的主要特点如下：</h3><p> (1)数据传输过程必须经过建立连接、维护连接和释放连接3个阶段 ；<br> (2)在传输过程中，各分组不需要携带目的主机的地址；<br> (3)可靠性好，但由于协议复杂，通信效率不高 。</p>
<h3 id="面向无连接服务的主要特点如下："><a href="#面向无连接服务的主要特点如下：" class="headerlink" title="面向无连接服务的主要特点如下："></a>面向无连接服务的主要特点如下：</h3><p> (1)不需要连接的各个阶段 ；<br> (2)每个分组都携带完整的目的主机地址，在系统中独立传送 ；<br> (3)由于没有顺序控制，所以接收方的分组可能出现乱序、重复和丢失现象 ；<br> (4)通信效率高，但可靠性不能确保。</p>
<h2 id="Socket的引入"><a href="#Socket的引入" class="headerlink" title="Socket的引入"></a>Socket的引入</h2><p> 为了更方便地开发网络应用程序，美国伯克利大学在UNIX上推出了一种应用程序访问通信协议的操作系统调用接字(Socket)。 Socket的出现，使得程序员可以很方便地访问 TCPIP，从而开发各种网络应用程序。后来套接字被引进到 Windows等操作系统，成为开发网络应用程序的有效工具。<br>套接字存在于通信区域，通信区域也被称为地址族，主要用于将通过套接字通信的进程的公有特性综合在一起。套接字通常只与同一区域的套接字交换数据。Windows Socket只支持一个通信区域——AF_INET国际网区域，使用网际协议族通信的进程使用该域。</p>
<h2 id="Http与Socket的区别"><a href="#Http与Socket的区别" class="headerlink" title="Http与Socket的区别"></a>Http与Socket的区别</h2><p>在以前我们实现数据交换已经有了HTTP协议,为什么还要学习Socket？<br>回顾当输出 <a href="http://www.baidu.com/">www.baidu.com</a> 的时候浏览器执行了那些操作？</p>
<h3 id="http通信的特点："><a href="#http通信的特点：" class="headerlink" title="http通信的特点："></a>http通信的特点：</h3><ol>
<li>连接属于非持久性连接:TCP的三次握手</li>
<li>客户端只能访问服务端，服务端无法访问客户端，属于单项通信</li>
</ol>
<h3 id="TCP三次握手："><a href="#TCP三次握手：" class="headerlink" title="TCP三次握手："></a>TCP三次握手：</h3><p>  TCP三次握手过程中不传递数据,只为同步连接双方的序列号和确认号传递数据，在握手后服务端和客户端才开始传输数据，在理想状态下，TCP连接一旦建立，在通信的双方中任何一方主动断开连接之前TCP连接会一直保持下去。</p>
<h3 id="Socket通信特点"><a href="#Socket通信特点" class="headerlink" title="Socket通信特点:"></a>Socket通信特点:</h3><p>  1、持久性连接<br>  2、双向通信，客户端能访问服务端，服务端也能访问客户端</p>
<p>Socket是对TCP/IP协议的封装，Socket只是一个接口而不是一个协议，通过Socket我们才能使用TCP/IP/UDP协议。</p>
<h2 id="Socket原理"><a href="#Socket原理" class="headerlink" title="Socket原理"></a>Socket原理</h2><p>socket连接需要由2个节点：<br>  （1）ClientSocket<br>  （2）ServerSocket</p>
<p><img src="/img/socket_principle.png" alt="Socket原理"></p>
<h2 id="开始写一个简单的Socket"><a href="#开始写一个简单的Socket" class="headerlink" title="开始写一个简单的Socket"></a>开始写一个简单的Socket</h2><p>server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载net模块</span></span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>)</span><br><span class="line"><span class="comment">// 创建net实例对象</span></span><br><span class="line"><span class="keyword">var</span> server = net.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>,<span class="keyword">function</span>(<span class="params">client</span>)&#123;</span><br><span class="line">     client.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;客户端发来：&quot;</span>+data)</span><br><span class="line">          <span class="comment">// 向客户端发送信息</span></span><br><span class="line">          client.<span class="title function_">write</span>(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Socket客户端关闭</span></span><br><span class="line">     client.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(client.<span class="property">remotePort</span> + <span class="string">&#x27;退出了聊天室&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Starting Socket server...&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器异常</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>client.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">var</span> net= <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> socket = net.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 一直读取输入</span></span><br><span class="line">    process.<span class="property">stdin</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">        socket.<span class="title function_">write</span>(msg.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收服务器端发来的数据</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器发来：&quot;</span>+data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是一个简单实例，也很好理解。</p>
<h2 id="编写Chat-cli"><a href="#编写Chat-cli" class="headerlink" title="编写Chat-cli"></a>编写Chat-cli</h2><p>Chat-cli就是在命令行上聊天都一种方式，为什么要在命令行上聊天呢？因为这样的程序占用较小，可以边敲命令边聊天，这看起来是不是很不错？接下来我们将深入的编写Chat-cli，我将我编写的命名为NChat-cli。<br>实现原理归根结底就是将所有加入的用户存在一个数组里面。<br>那放数组里面怎么知道那个是谁呢？我们可以用内置的一个函数Socket.remotePort获取对应的id，可以将名字加id结合起来找到对应用户，一个用户实质就是一个Socket，如果要实现私聊，可以将这些信息存储至数组里面，比如{username: username, id: id, socket: socket}，通过id查找用户(Socket)<br>如何实现多房间聊天呢？<br>这个实现也很简单，还是吧用户存储在数组里面，可以创建一个二维数组Array[HomeID][UserSocket],也可以存储用户信息，可以这样Array[HomeID]{username: username, id: id, socket: socket}，当用户向房间发送信息时，遍历这个房间所有用户，向遍历出来的用户逐一发送，除自己外。<br>上面提到的一些变量意思为： username：用户名，id：用户id，Socket和UserSocket：就是一个用户，HomeID：房间号。</p>
<p>现在开始编写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init <span class="comment"># 初始化一个项目</span></span><br><span class="line">npm install moment --save <span class="comment"># 安装时间工具</span></span><br></pre></td></tr></table></figure>

<p>server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载net模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);</span><br><span class="line"><span class="comment">// 加载时间模块</span></span><br><span class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建net实例对象</span></span><br><span class="line"><span class="keyword">var</span> server = net.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="comment">// 保存所有客户的socket对象</span></span><br><span class="line"><span class="keyword">var</span> users = [];</span><br><span class="line"><span class="comment">// 保存所有房间ID</span></span><br><span class="line"><span class="keyword">var</span> homeIDs = <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数组总数,不计空数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count_array_num</span>(<span class="params">array</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] != <span class="literal">undefined</span> || array[i] != <span class="literal">null</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Starting NChat server...&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> (<span class="params">socket</span>) &#123;</span><br><span class="line">    <span class="comment">// 客户端发送的数据</span></span><br><span class="line">    <span class="keyword">var</span> client_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将加入聊天室的用户加入至数组</span></span><br><span class="line">    users.<span class="title function_">push</span>(socket); </span><br><span class="line"></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">        client_data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 房间用户初始化</span></span><br><span class="line">        <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>] == <span class="literal">undefined</span>)&#123;</span><br><span class="line">            homeIDs[client_data.<span class="property">homeID</span>] = <span class="title class_">Array</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 昵称为空判断</span></span><br><span class="line">        <span class="keyword">if</span>(client_data.<span class="property">username</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//为空则初始化昵称</span></span><br><span class="line">            client_data.<span class="property">username</span> = <span class="string">&quot;User&quot;</span> + socket.<span class="property">remotePort</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入房间</span></span><br><span class="line">        <span class="keyword">var</span> isExist = <span class="number">0</span>; <span class="comment">// o: false , 1: true</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; homeIDs[client_data.<span class="property">homeID</span>].<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 用户加入判断</span></span><br><span class="line">            <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][i] != <span class="literal">undefined</span> &amp;&amp; homeIDs[client_data.<span class="property">homeID</span>][i].<span class="property">remotePort</span> == socket.<span class="property">remotePort</span>)&#123;</span><br><span class="line">                isExist = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户没有加入房间则加入</span></span><br><span class="line">        <span class="keyword">if</span> (isExist == <span class="number">0</span>) &#123;</span><br><span class="line">            homeIDs[client_data.<span class="property">homeID</span>].<span class="title function_">push</span>(socket);</span><br><span class="line">            <span class="keyword">var</span> time = <span class="title function_">moment</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(time + <span class="string">&#x27; &#x27;</span> + client_data.<span class="property">username</span> + <span class="string">&#x27;(&#x27;</span> + socket.<span class="property">remotePort</span> + <span class="string">&#x27;)&#x27;</span> + <span class="string">&#x27; Join &#x27;</span> + client_data.<span class="property">homeID</span> + <span class="string">&#x27; home(Online num: &#x27;</span> + <span class="title function_">count_array_num</span>(homeIDs[client_data.<span class="property">homeID</span>]) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; homeIDs[client_data.<span class="property">homeID</span>].<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][j] != <span class="literal">undefined</span> &amp;&amp; homeIDs[client_data.<span class="property">homeID</span>][j] != socket)&#123;</span><br><span class="line">                    homeIDs[client_data.<span class="property">homeID</span>][j].<span class="title function_">write</span>(time + <span class="string">&#x27; &#x27;</span> + client_data.<span class="property">username</span> + <span class="string">&#x27;(&#x27;</span> + socket.<span class="property">remotePort</span> + <span class="string">&#x27;)&#x27;</span> + <span class="string">&#x27;加入了 &#x27;</span> + client_data.<span class="property">homeID</span> + <span class="string">&#x27; 房间(在线人数: &#x27;</span> + <span class="title function_">count_array_num</span>(homeIDs[client_data.<span class="property">homeID</span>]) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][j] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                    socket.<span class="title function_">write</span>(<span class="string">&#x27;加入 &#x27;</span> + client_data.<span class="property">homeID</span> + <span class="string">&#x27; 房间成功! 在线人数: &#x27;</span> + <span class="title function_">count_array_num</span>(homeIDs[client_data.<span class="property">homeID</span>]) + <span class="string">&#x27;)\n&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; homeIDs[client_data.<span class="property">homeID</span>].<span class="property">length</span>; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][k] != <span class="literal">undefined</span> &amp;&amp; client_data.<span class="property">message</span> != <span class="literal">undefined</span> &amp;&amp; homeIDs[client_data.<span class="property">homeID</span>][k] != socket)&#123;</span><br><span class="line">                <span class="keyword">var</span> time = <span class="title function_">moment</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">                homeIDs[client_data.<span class="property">homeID</span>][k].<span class="title function_">write</span>(time + <span class="string">&#x27;\n&#x27;</span> + client_data.<span class="property">username</span> + <span class="string">&#x27;: &#x27;</span> + client_data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户退出调用</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> time = <span class="title function_">moment</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time + <span class="string">&#x27; &#x27;</span> + client_data.<span class="property">username</span> + <span class="string">&#x27;(&#x27;</span> + socket.<span class="property">remotePort</span> + <span class="string">&#x27;)&#x27;</span> + <span class="string">&#x27; Exit &#x27;</span> + client_data.<span class="property">homeID</span> + <span class="string">&#x27; home(Online num: &#x27;</span> + <span class="title function_">count_array_num</span>(homeIDs[client_data.<span class="property">homeID</span>]) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="comment">// 删除房间里面的退出去的用户</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; homeIDs[client_data.<span class="property">homeID</span>].<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][j] == socket)&#123;</span><br><span class="line">                <span class="keyword">delete</span> homeIDs[client_data.<span class="property">homeID</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(homeIDs[client_data.<span class="property">homeID</span>][j] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="comment">// 输出退出信息,不输出给退出的用户</span></span><br><span class="line">                homeIDs[client_data.<span class="property">homeID</span>][j].<span class="title function_">write</span>(time + <span class="string">&#x27; &#x27;</span> + client_data.<span class="property">username</span> + <span class="string">&#x27;(&#x27;</span> + socket.<span class="property">remotePort</span> + <span class="string">&#x27;)&#x27;</span> + <span class="string">&#x27; 退出了 &#x27;</span> + client_data.<span class="property">homeID</span> + <span class="string">&#x27; 房间(在线人数: &#x27;</span> + <span class="title function_">count_array_num</span>(homeIDs[client_data.<span class="property">homeID</span>]) + <span class="string">&#x27;)\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        users.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">uesr</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除退出去的总用户</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; users.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( users[k] == socket)&#123;</span><br><span class="line">                    <span class="keyword">delete</span> users[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器异常</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server error&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>client.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入net</span></span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据的实体</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">homeID</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理参数</span></span><br><span class="line"><span class="keyword">const</span> argv = process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; argv.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(argv[i])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-n&#x27;</span>:</span><br><span class="line">            data.<span class="property">username</span> = argv[i +<span class="number">1</span>];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-id&#x27;</span>:</span><br><span class="line">            data.<span class="property">homeID</span> = argv[i +<span class="number">1</span>];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-c&#x27;</span>:</span><br><span class="line">            content = argv[i +<span class="number">1</span>];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-v&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;NChat Version: 1.0 bate&#x27;</span>);</span><br><span class="line">            process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;--help&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Usage: nchat [options]&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Options:&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  -n      add username&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  -id      add homeid&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  -c      send content&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  -v      get version&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;  --help    help&#x27;</span>);</span><br><span class="line">            process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Unknown parameter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> socket = net.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入消息</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 待发送内容</span></span><br><span class="line">    <span class="keyword">var</span> content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提前告诉服务端个人信息</span></span><br><span class="line">    socket.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(content != <span class="literal">null</span>)&#123;</span><br><span class="line">        data.<span class="property">message</span> = content;</span><br><span class="line">        socket.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取要发送给用户的内容</span></span><br><span class="line">    process.<span class="property">stdin</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">        process.<span class="property">stdout</span>.<span class="title function_">write</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        data.<span class="property">message</span> = msg.<span class="title function_">toString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        socket.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收消息</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>() + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//服务器异常</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server error&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p>服务端运行效果<br>  <img src="/img/2022-07-23_12-04.png" alt="服务端运行"><br>用户1聊天效果<br>  <img src="/img/2022-07-23_12-18.png" alt="聊天"><br>用户2聊天效果<br>  <img src="/img/2022-07-23_12-18_1.png" alt="聊天"><br>服务端返回的信息<br>  <img src="/img/2022-07-23_12-19.png" alt="服务端显示"></p>
<blockquote>
<p>注意：聊天只能在相同房间嗷！<br>具体使用方法可以见下面开源链接嗷！</p>
</blockquote>
<p>最后编译运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br><span class="line">node client.js -n 昵称 -n 房间号</span><br></pre></td></tr></table></figure>
<p>然后就可以在命令行上面聊天啦！<br><a href="https://github.com/naucye/NChat">开源地址Github</a><br><a href="https://gitee.com/naucye/NChat">开源地址Gitee</a></p>
]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
</search>
