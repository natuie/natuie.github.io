[{"title":"Github Actions 超详细教程，看这一篇就够了！","path":"/posts/2025/02/06/055518/","content":"1 GitHub Actions 的基本概念 在 GitHub Actions 中，工作流（workflow）由多个任务（job）组成，每个任务包含一系列步骤（step）。核心概念如下： Workflow（工作流）：定义自动化流程的 YAML 配置文件，存放在 .githubworkflows 目录下。 Job（任务）：一个完整的执行单元，可以包含多个步骤。 Step（步骤）：任务中的具体执行操作，比如拉取代码、安装依赖、运行脚本等。 Runner（运行器）：执行 GitHub Actions 任务的服务器，分为 GitHub 提供的托管 runner 和自托管 runner。 Event（触发事件）：定义何时运行工作流，例如 push、pull_request、schedule（定时任务）等。 2 解释工作流文件件存在于你的仓库.githubworkflows目录下的*.yml 2.1 示例代码name: CI Workflow # 工作流名称on: push: # 触发条件：当代码被推送到仓库时触发 branches: - main # 仅当推送到 main 分支时触发 pull_request: # 触发条件：当有 PR 时触发jobs: test: # 定义一个名为 test 的任务 runs-on: ubuntu-latest # 运行环境，使用 GitHub 提供的 Ubuntu 最新版本 steps: - name: Checkout Code # 第一步：拉取代码 uses: actions/checkout@v4 - name: Setup Node.js # 第二步：设置 Node.js 环境 uses: actions/setup-node@v4 with: node-version: 18 - name: Install Dependencies # 第三步：安装项目依赖 run: npm install - name: Run Tests # 第四步：执行测试 run: npm test 3 触发条件 触发方式 说明 push 代码推送时触发 pull_request PR 相关操作时触发 workflow_dispatch 手动触发 schedule 定时运行 repository_dispatch 通过 Webhook 触发 workflow_call 允许其他工作流调用 3.1 push（推送触发） 示例 1：所有推送都会触发on: push 表示任何 git push 操作都会触发工作流。 示例 2：指定分支触发on: push: branches: - main - dev 只有当代码推送到 main 或 dev 分支时才会触发。 示例 3：指定路径触发on: push: paths: -src/** - !src/ignore-file.txt 只有 src 目录下的文件变更时才会触发，但 srcignore-file.txt 为例外。 3.2 pull_request（拉取请求触发） 示例 1：默认触发on: pull_request 表示在所有分支上的 PR 操作（opened、synchronize、reopened）都会触发。 示例 2：指定分支触发on: pull_request: branches: - main 仅当 PR 目标分支是 main 时触发。 示例 3：指定 PR 事件触发on: pull_request: types: - opened # PR 创建时触发 - synchronize # PR 更新时触发（新提交） - reopened # 重新打开 PR 时触发 可以选择特定 PR 事件来触发工作流。 3.3 workflow_dispatch（手动触发） 示例 1：支持手动触发on: workflow_dispatch: 添加此配置后，可以在 GitHub “Actions” 页面手动运行工作流。 示例 2：手动触发并传入参数on: workflow_dispatch: inputs: environment: description: 选择运行环境 required: true default: production type: choice options: - development - staging - production 触发时可以选择 development、staging 或 production 作为运行环境。 3.4 schedule（定时任务触发） cron语法┌───────── 分钟（0 - 59）│ ┌────────── 小时（0 - 23）│ │ ┌─────────── 日期（1 - 31）│ │ │ ┌──────────── 月份（1 - 12）│ │ │ │ ┌───────────── 星期（0 - 7，0 和 7 都代表星期天）│ │ │ │ │* * * * * 示例 1：每天凌晨 12 点运行on: schedule: - cron: 0 0 * * * GitHub Actions 服务器使用 UTC 时间，如果需要北京时间（UTC+8），需要调整为 cron: ‘0 16 * * *’。 示例 2：每 6 小时运行一次on: schedule: - cron: 0 */6 * * * 示例 3：每周一上午 8 点运行on: schedule: - cron: 0 8 * * 1 表示每周一（1 代表周一）北京时间 8:00 运行。 3.5 repository_dispatch（Webhook 事件触发） 示例：监听外部 Webhook 事件on: repository_dispatch: types: [custom-event] 然后使用 GitHub API 触发：curl -X POST -H Authorization: token YOUR_GITHUB_TOKEN \\ -H Accept: application/vnd.github.v3+json \\ https://api.github.com/repos/USERNAME/REPO/dispatches \\ -d event_type: custom-event 这样，你可以从外部应用（如 Jenkins、GitLab CI）触发 GitHub Actions。 3.6 workflow_call（被其他工作流调用） 示例：定义可复用的工作流在 reusable-workflow.yml 文件中：on: workflow_call: 在另一个工作流中调用：jobs: call-reusable-workflow: uses: user/repo/.github/workflows/reusable-workflow.yml@main 这样就可以实现工作流复用。 3.7 push 和 pull_request 组合触发on: push: branches: - main pull_request: branches: - main 这样，当推送到 main 分支或 PR 目标分支为 main 时，工作流都会执行。 3.8 多种触发方式结合on: push: branches: - main pull_request: branches: - main workflow_dispatch: schedule: - cron: 0 16 * * * 这表示： 当代码推送到 main 分支时触发 当 PR 目标分支为 main 时触发 可以手动触发 每天 UTC 时间 16:00 触发（对应北京时间 00:00） 4 Job的结构4.1 Job 的完整结构jobs: job_name: # 任务 ID（唯一标识） name: 任务名称 # 任务的可读名称（可选） runs-on: 运行环境 # 任务运行的环境 needs: 依赖任务 # 当前任务需要等待哪些任务完成（可选） if: 条件判断 # 任务是否执行的条件（可选） outputs: # 任务的输出变量（可选） key: value strategy: # 并行或矩阵策略（可选） matrix: ... steps: # 任务中的执行步骤 - name: 步骤名称 id: 步骤 ID uses: 使用 GitHub 组件 run: 执行 Shell 命令 with: 组件的参数 env: 设定环境变量 4.2 Job 各字段详细说明4.2.1 job_name（任务 ID）job_name是 GitHub Actions 内部唯一标识该任务的 ID，不能重复。 • 只能使用小写字母、数字、-或_。 • 不能有空格。 • 这个 ID 可用于依赖（needs）、输出变量（outputs）。 示例 jobs: build_project: # 任务 ID runs-on: ubuntu-latest steps: - run: echo 运行 build_project 4.2.2 name（任务名称）name是任务的可读名称，它会在 GitHub Actions 界面中显示。 • 可以包含空格、大小写、特殊字符。 • 不影响 ID，完全是为了可读性。 示例 jobs: build: name: 📦 构建项目 # 任务名称 runs-on: ubuntu-latest steps: - run: echo 运行 Build 任务 👉GitHub Actions 界面会显示📦构建项目，但 job ID 仍然是build。 4.2.3 runs-on（运行环境）指定 job 运行在哪个操作系统或环境上。可以选择： • GitHub 托管环境： • ubuntu-latest（默认） • windows-latest • macos-latest • 指定特定版本： • ubuntu-20.04 • windows-2022 • 自定义 Runner： • self-hosted 示例 jobs: test: runs-on: ubuntu-22.04 # 在 Ubuntu 22.04 运行 steps: - run: echo 运行测试 4.2.4 needs（依赖任务）用于让 job 依赖其他 job 的执行结果，必须等前置 job 成功后才运行。 示例 jobs: job1: runs-on: ubuntu-latest steps: - run: echo Job 1 完成 job2: needs: job1 # 只有 job1 成功后才会运行 runs-on: ubuntu-latest steps: - run: echo Job 2 开始 • job1先执行。 • job2依赖job1，等job1成功后才会运行。 4.2.5 if（条件判断）用于控制 job 是否执行，可以结合状态检查、分支、标签等条件。 示例 1：仅在 main 分支执行 jobs: deploy: if: github.ref == refs/heads/main runs-on: ubuntu-latest steps: - run: echo 仅在 main 分支执行 示例 2：只有 job1 成功时运行 jobs: job1: runs-on: ubuntu-latest steps: - run: exit 0 # 成功 job2: needs: job1 if: success() # 只有 job1 成功才执行 runs-on: ubuntu-latest steps: - run: echo Job 1 成功，继续执行 Job 2 👉其他if关键字： • success()：前置 job 成功时执行。 • failure()：前置 job 失败时执行。 • always()：无论前置 job 成功或失败都会执行。 4.2.6 outputs（任务输出）用于让当前 job 生成的值被其他 job 读取。 示例 jobs: job1: runs-on: ubuntu-latest outputs: message: $ steps.step1.outputs.result # 任务的输出 steps: - id: step1 run: echo result=hello world $GITHUB_ENV # 生成变量 job2: needs: job1 runs-on: ubuntu-latest steps: - run: echo Job 1 的输出是 $ needs.job1.outputs.message • job1生成message=hello world。 • job2读取job1的outputs并打印。 4.2.7 strategy（并行策略）strategy.matrix可以让 job 在多个环境下同时运行，适用于不同版本测试。 示例 jobs: test: runs-on: ubuntu-latest strategy: matrix: node-version: [14, 16, 18] # 在 3 个 Node.js 版本上运行 steps: - uses: actions/setup-node@v4 with: node-version: $ matrix.node-version - run: echo 测试 Node.js 版本 $ matrix.node-version 👉执行结果：GitHub Actions 会自动创建 3 个任务，分别在 Node.js 14、16 和 18 运行。 4.2.8 steps（任务的执行步骤）steps是 job 内部的执行单元，每个 step 运行一个命令或 GitHub 组件。 示例 jobs: my_job: runs-on: ubuntu-latest steps: - name: 拉取代码 uses: actions/checkout@v4 - name: 运行 Shell 命令 run: echo Hello World! - name: 设置环境变量 env: MY_VAR: test run: echo 环境变量是 $MY_VAR 👉steps关键字段： • name：步骤名称（可选）。 • uses：使用 GitHub 官方组件。 • run：执行 Shell 命令。 • env：设置环境变量。 • with：传递参数给uses。 5 Runs-on相关5.1 runs-on语法结构jobs: job_name: runs-on: 运行环境 steps: - run: echo Hello World! runs-on指定任务运行的操作系统。可选值包括：ubuntu-latest、windows-latest、macos-latest等。 5.2 GitHub 托管 RunnerGitHub 提供的虚拟机运行 job，无需配置服务器。支持三种操作系统： 操作系统 关键字 Ubuntu（默认） ubuntu-latest Windows windows-latest macOS macos-latest 5.2.1 UbuntuUbuntu 是默认 Runner，启动最快，支持最多工具。 runs-on: ubuntu-latest 可选版本： • ubuntu-22.04 • ubuntu-20.04（推荐） • ubuntu-18.04（即将废弃） 示例 jobs: test: runs-on: ubuntu-20.04 steps: - run: echo 运行 Ubuntu 20.04 5.2.2 Windows适用于 Windows 相关的构建和测试。 runs-on: windows-latest 可选版本： • windows-2022 • windows-2019（推荐） 示例 jobs: test: runs-on: windows-2019 steps: - run: echo Windows 任务 5.2.3 macOS适用于 macOSiOS 开发，如 Xcode、Swift。 runs-on: macos-latest 可选版本： • macos-14 • macos-13 • macos-12（推荐） 示例 jobs: test: runs-on: macos-12 steps: - run: echo Mac 任务 5.2.4 自托管 Runner如果官方 Runner 不满足需求（如 ARM 设备、私有服务器），可以自建 Runner。 runs-on: self-hosted 可以加标签： runs-on: [self-hosted, linux, arm64] 示例 jobs: my_job: runs-on: [self-hosted, ubuntu, gpu] steps: - run: echo 自托管 Runner 👉适用场景： • 运行 ARM 设备（如树莓派） • 需要访问私有网络资源 • 需要更强的硬件性能 5.3 组合多个runs-on5.3.1 标签实现多个runs-on可以同时指定多个标签，让 job 运行在符合所有条件的 Runner 上。 示例 runs-on: [self-hosted, ubuntu, docker] 仅在自托管且 Ubuntu 并支持 Docker 的 Runner 上执行。 5.3.2 runs-on动态选择（矩阵matrix）可以使用矩阵strategy.matrix在不同环境同时运行 job。 示例 jobs: test: strategy: matrix: os: [ubuntu-latest, windows-latest, macos-latest] runs-on: $ matrix.os steps: - run: echo 运行在 $ matrix.os 👉这个 job 会自动运行 3 次，分别在： ubuntu-latest windows-latest macos-latest 5.4 runs-on的完整示例jobs: job1: runs-on: ubuntu-latest steps: - run: echo 运行在 Ubuntu job2: runs-on: windows-2019 steps: - run: echo 运行在 Windows job3: runs-on: macos-12 steps: - run: echo 运行在 macOS job4: runs-on: [self-hosted, gpu] steps: - run: echo 运行在自托管 GPU 服务器 6 steps6.1 steps语法结构jobs: job_name: runs-on: ubuntu-latest steps: - name: 步骤名称（可选） id: 步骤 ID（可选） uses: GitHub 组件（可选） run: 执行 Shell 命令（可选） with: 传递参数（仅用于 `uses`） env: 设定环境变量（可选） if: 条件判断（可选） • name：步骤名称，在 GitHub Actions UI 显示。 • id：步骤唯一标识，用于引用该步骤的输出。 • uses：使用 GitHub 官方社区组件。 • run：执行 Shell 命令（如果不使用uses）。 • with：传递参数给uses。 • env：环境变量。 • if：设置步骤执行条件。 6.2 steps关键字段解析6.2.1 name（步骤名称）name是 GitHub Actions UI 中的步骤名称，用于标记当前步骤的作用。 示例 steps: - name: 🚀 运行 Shell 命令 run: echo Hello, GitHub Actions! 👉运行效果： 🚀 运行 Shell 命令Hello, GitHub Actions! ❗注意：name只是 UI 显示，不影响步骤执行。 6.2.2 id（步骤 ID）id用于在当前job内唯一标识某个步骤，可以让后续步骤读取它的输出。 示例 steps: - name: 计算时间 id: time_step run: echo time=$(date +%s) $GITHUB_ENV - name: 读取时间 run: echo 时间戳是 $ env.time 👉解析： • id: time_step标记该步骤。 • echo time=$(date +%s) $GITHUB_ENV保存输出变量。 • run: echo 时间戳是 $ env.time 读取前一个步骤的变量。 6.2.3 uses（使用 GitHub 组件）GitHub Actions 允许直接使用社区组件，避免重复造轮子。 组件来源： • GitHub 官方：actions/checkout@v4 • 第三方社区：actions/setup-node@v4 示例 1：使用checkout组件拉取代码 steps: - name: 拉取代码 uses: actions/checkout@v4 示例 2：使用setup-node组件安装 Node.js steps: - name: 安装 Node.js 16 uses: actions/setup-node@v4 with: node-version: 16 👉解析： • uses: actions/setup-node@v4使用官方setup-node组件。 • with.node-version: 16安装 Node.js 16。 6.2.4 run（运行 Shell 命令）run直接执行 Shell 命令，支持 Linux（Bash）、Windows（PowerShell）。 示例 1：单行命令 steps: - name: 运行 Bash 命令 run: echo Hello, GitHub Actions! 示例 2：多行命令 steps: - name: 多行 Shell 命令 run: | echo 第一行 echo 第二行 echo 第三行 示例 3：Windows 执行 PowerShell steps: - name: 运行 PowerShell run: Write-Output Hello, Windows! shell: pwsh 6.2.5 with（传递参数）用于给uses组件传递参数，不同的组件with参数不同。 示例 1：使用setup-node安装 Node.js steps: - name: 使用 `setup-node` 安装 Node.js uses: actions/setup-node@v4 with: node-version: 18 👉解析： • with.node-version: 18指定安装 Node.js 18。 示例 2：上传文件 steps: - name: 上传文件 uses: actions/upload-artifact@v3 with: name: my-artifact path: ./output • with.name指定上传的文件名称。 • with.path指定上传的文件夹路径。 6.2.6 env（环境变量）用于设置步骤的环境变量，可以让run读取。 示例 1：自定义环境变量 steps: - name: 设置环境变量 env: GREETING: Hello run: echo $GREETING, GitHub Actions! 👉解析： • env.GREETING: Hello定义变量。 • echo $GREETING, GitHub Actions!使用变量。 示例 2：使用 GitHub 内置环境变量 steps: - name: 显示 GitHub 仓库信息 run: echo 当前仓库：$ github.repository GitHub 提供了内置变量，如： • $ github.repository ：当前仓库名。 • $ github.ref ：当前分支。 • $ github.actor ：触发者。 6.2.7 if（条件执行）if用于控制步骤是否执行，支持： • 成功时执行：if: success() • 失败时执行：if: failure() • 始终执行：if: always() • 按分支执行：if: github.ref == refs/heads/main 示例 1：仅在 main 分支执行 steps: - name: 仅在 main 分支执行 if: github.ref == refs/heads/main run: echo 当前是 main 分支 示例 2：前面步骤失败时执行 steps: - name: 运行失败的命令 run: exit 1 - name: 失败时运行 if: failure() run: echo 上一步失败了！ 6.3 steps组合示例jobs: my_job: runs-on: ubuntu-latest steps: - name: 拉取代码 uses: actions/checkout@v4 - name: 设置环境变量 env: MY_VAR: Hello run: echo $MY_VAR, GitHub Actions! - name: 安装 Node.js uses: actions/setup-node@v4 with: node-version: 18 - name: 运行 npm 脚本 run: npm install npm test - name: 仅在 main 分支执行部署 if: github.ref == refs/heads/main run: echo 部署到生产环境 GitHub Actions 中的strategy详解 strategy用于控制job的执行方式，可以用于： • 并行执行多个任务（矩阵matrix） • 重试失败的任务（fail-fast和max-parallel） 7 strategy相关7.1 strategy语法结构jobs: job_name: runs-on: ubuntu-latest strategy: matrix: # 定义矩阵 变量名称: [值1, 值2, 值3] fail-fast: true # 其中一个失败，全部取消 max-parallel: 2 # 最多同时运行 2 个任务 steps: - run: echo Hello World 7.2 matrix（矩阵构建）matrix允许并行运行多个job，每个job使用不同的参数组合。 示例 1：在不同操作系统运行 jobs: test: strategy: matrix: os: [ubuntu-latest, windows-latest, macos-latest] runs-on: $ matrix.os steps: - run: echo 当前系统是 $ matrix.os 👉这个job会自动运行 3 次： ubuntu-latest windows-latest macos-latest 示例 2：在不同 Node.js 版本运行 jobs: test: strategy: matrix: node: [14, 16, 18] runs-on: ubuntu-latest steps: - name: 设置 Node.js uses: actions/setup-node@v4 with: node-version: $ matrix.node - run: node -v 👉这个job会运行 3 次： • 使用 Node.js 14 • 使用 Node.js 16 • 使用 Node.js 18 7.3 组合多个matrix变量可以组合多个变量，GitHub Actions 会自动生成所有可能的组合。 示例 jobs: test: strategy: matrix: os: [ubuntu-latest, windows-latest] node: [14, 16] runs-on: $ matrix.os steps: - run: echo 系统: $ matrix.os , Node.js 版本: $ matrix.node 👉自动生成 4 组job： os node ubuntu-latest 14 ubuntu-latest 16 windows-latest 14 windows-latest 16 7.4 exclude（排除某些组合）有时不需要所有组合，可以排除一些组合。 示例 jobs: test: strategy: matrix: os: [ubuntu-latest, windows-latest] node: [14, 16] exclude: - os: windows-latest node: 14 # 排除 Windows + Node 14 runs-on: $ matrix.os steps: - run: echo 系统: $ matrix.os , Node.js 版本: $ matrix.node 👉只运行 3 组job： os node ubuntu-latest 14 ubuntu-latest 16 windows-latest 16 7.5 include（添加额外组合）可以手动添加额外的matrix组合。 示例 jobs: test: strategy: matrix: os: [ubuntu-latest, windows-latest] node: [14, 16] include: - os: ubuntu-latest node: 18 # 额外增加 Ubuntu + Node 18 runs-on: $ matrix.os steps: - run: echo 系统: $ matrix.os , Node.js 版本: $ matrix.node 👉生成 5 组job： os node ubuntu-latest 14 ubuntu-latest 16 ubuntu-latest 18 windows-latest 14 windows-latest 16 7.6 fail-fast（任务失败时是否取消）fail-fast: true（默认）：如果有一个job失败，取消所有剩余任务 fail-fast: false：即使有任务失败，其他job仍然运行 示例 jobs: test: strategy: fail-fast: false # 允许所有任务运行完 matrix: os: [ubuntu-latest, windows-latest] runs-on: $ matrix.os steps: - run: exit 1 # 故意让任务失败 👉fail-fast: false时，失败的任务不影响其他任务。 7.7 max-parallel（最大并行任务数）默认：GitHub Actions 会并行执行所有matrix任务 可以限制最大并行任务数 示例 jobs: test: strategy: max-parallel: 2 # 同时最多运行 2 个任务 matrix: os: [ubuntu-latest, windows-latest, macos-latest] runs-on: $ matrix.os steps: - run: echo 当前系统: $ matrix.os 👉3 个任务会最多 2 个同时运行，1 个等待。 7.8 strategy组合示例jobs: build: runs-on: ubuntu-latest strategy: matrix: os: [ubuntu-latest, windows-latest] node: [14, 16, 18] exclude: - os: windows-latest node: 14 # 排除 Windows + Node 14 include: - os: ubuntu-latest node: 20 # 额外增加 Ubuntu + Node 20 fail-fast: false # 任务失败时继续执行 max-parallel: 2 # 最多同时运行 2 个任务 runs-on: $ matrix.os steps: - name: 安装 Node.js uses: actions/setup-node@v4 with: node-version: $ matrix.node - run: node -v 👉执行的任务： os node ubuntu-latest 14 ubuntu-latest 16 ubuntu-latest 18 ubuntu-latest 20 windows-latest 16 windows-latest 18 8 env 变量8.1 env变量的三种作用域env变量可以在以下三种层级定义： 工作流级别（workflow）：适用于整个.yml文件 任务级别（job）：适用于 job 内所有 steps 步骤级别（step）：仅适用于单个 step 8.2 env语法结构name: 示例工作流on: pushenv: # ✅ 工作流级变量（全局） GLOBAL_VAR: 全局变量jobs: my_job: runs-on: ubuntu-latest env: # ✅ `job` 级变量（适用于 `my_job`） JOB_VAR: 任务变量 steps: - name: 显示全局变量 run: echo $GLOBAL_VAR - name: 显示任务变量 run: echo $JOB_VAR - name: 设置步骤变量 env: # ✅ `step` 级变量（仅适用于本 `step`） STEP_VAR: 步骤变量 run: echo $STEP_VAR 执行结果： 全局变量任务变量步骤变量 8.3 env变量的作用范围 作用域 关键字 影响范围 工作流级 env: 适用于整个 .yml 文件 任务级 jobs.job_name.env: 适用于 job 内所有 steps 步骤级 jobs.job_name.steps[].env: 仅适用于该 step 8.4 使用env变量8.4.1 读取环境变量在run里使用不同的 Shell 读取env变量： 操作系统 Shell 读取方法 LinuxmacOS Bash $VAR_NAME Windows PowerShell $env:VAR_NAME Windows CMD %VAR_NAME% 示例： jobs: example: runs-on: ubuntu-latest env: MESSAGE: Hello from job steps: - name: 读取环境变量（Linux/macOS） run: echo $MESSAGE - name: 读取环境变量（Windows） run: Write-Output $env:MESSAGE shell: pwsh 输出： Hello from jobHello from job 8.4.2 组合多个变量示例： jobs: example: runs-on: ubuntu-latest env: USER_NAME: Alice GREETING: Hello steps: - name: 使用多个变量 run: echo $GREETING, $USER_NAME! 输出： Hello, Alice! 8.5 env变量的高级用法8.5.1 GITHUB_ENV（动态设置env变量）可以在run中动态创建env变量。 示例： jobs: example: runs-on: ubuntu-latest steps: - name: 设置环境变量 run: echo MY_VAR=动态变量 $GITHUB_ENV - name: 读取环境变量 run: echo $MY_VAR 输出： 动态变量 8.5.2 读取 GitHub 内置环境变量GitHub 提供了许多内置变量，可以直接在env里使用。 示例： jobs: example: runs-on: ubuntu-latest steps: - name: 显示 GitHub 内置变量 run: echo 当前仓库: $ github.repository 可能输出： 当前仓库: my-user/my-repo 常见 GitHub 内置变量： 变量 作用 $ github.repository 仓库名 (ownerrepo) $ github.ref 触发的分支标签 $ github.event_name 触发事件 (push, pull_request) $ github.actor 触发工作流的用户 $ github.run_id 运行 ID（唯一） 8.5.3 secrets（私密变量）secrets用于存储敏感数据（如 API 密钥），不会暴露在日志里。 示例： jobs: example: runs-on: ubuntu-latest steps: - name: 读取 GitHub 密钥 run: echo TOKEN = $ secrets.MY_SECRET 如何添加secrets： 进入 GitHub 仓库Settings 打开Secrets and variables→选择Actions 点击New repository secret 添加MY_SECRET，值为my_secret_value 8.5.4 env变量 vssecrets 类型 适用场景 是否加密 是否可在 UI 查看 env 普通环境变量 ❌ 否 ✅ 可以 secrets 敏感信息（API 密钥） ✅ 是 ❌ 不可 ####8.6 env变量的常见问题 ❓1.为什么env变量在run里无效？ 正确写法： steps: - name: 读取 `env` env: MESSAGE: Hello run: echo $MESSAGE 错误写法： steps: - name: 变量未定义 run: echo $MESSAGE # 变量未在 `env` 定义 修正： steps: - name: 先定义变量 run: echo MESSAGE=Hello $GITHUB_ENV - name: 读取变量 run: echo $MESSAGE ❓2.secrets变量为什么在日志里不显示？ GitHub 自动隐藏secrets变量，即使你echo也不会显示。 示例： jobs: example: runs-on: ubuntu-latest steps: - name: 读取密钥 run: echo TOKEN=$ secrets.MY_SECRET 错误输出： TOKEN=*** 正确输出： TOKEN=your_actual_secret_value （但不会显示在 GitHub UI） 9 uses语法uses语法过多自行访问GitHub Marketplace查找 官方文档更具体的请看官方文档吧！如果上面内容有有错误欢迎指出！ GitHub Actions 文档","tags":["Github","Actions"],"categories":["教程"]},{"title":"企业微信如何获取 Webhook 实现消息推送","path":"/posts/2025/02/03/170201/","content":"获取Webhook这边以Android的企业微信为例，打开企业微信登录 。点击底部消息 - 右上角+号 - 发起群聊 - 选择人创建并打开群聊 - 点击三个点 - 群机器人 - 创建就能看到了。其他平台的都一样的，就是只能是企业群聊才可以，外部群聊不行。 添加成功后，系统会生成一个 Webhook URL，格式如下： https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=your_key 复制并保存这个 URL，后续将用于发送消息 二、发送消息企业微信 Webhook 支持多种消息类型，包括文本、Markdown、图片、文件等。以下以发送文本消息为例。 1. 文本消息格式 请求方式：POST 请求头：Content-Type: application/json 请求体示例： msgtype: text, text: content: 这是一条测试消息 2. 使用 cURL 发送消息 在终端中运行以下命令：curl https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=your_key \\ -H Content-Type: application/json \\ -d msgtype: text, text: content: 这是一条测试消息 3. 使用 Python 发送消息 安装 requests 库（如果尚未安装）：pip install requests 编写 Python 脚本：import requestsimport jsonwebhook_url = https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=your_keyheaders = Content-Type: application/jsondata = msgtype: text, text: content: 这是一条测试消息 response = requests.post(webhook_url, headers=headers, data=json.dumps(data))print(response.status_code, response.text) 三、支持的消息类型除了文本消息，企业微信 Webhook 还支持以下消息类型： Markdown 消息 请求体示例： msgtype: markdown, markdown: content: **加粗文字** 引用内容 图片消息 请求头实例: msgtype: image, image: base64: DATA, md5: MD5 base64是图片内容的base64编码md5\t是图片内容（base64编码前）的md5值 注：图片（base64编码前）最大不能超过2M，支持JPG,PNG格式 文件消息 通过下文的上传文件接口获取 media_id，然后发送： msgtype: file, file: media_id: your_media_id 图文消息 请求体示例： msgtype: news, news: articles: [ title: 标题, description: 描述, url: https://example.com, picurl: https://example.com/image.png ] 只提供部分实例，具体请参考 群机器人配置说明 四、注意事项 消息频率限制 每个 Webhook URL 每分钟最多发送 20 条消息，超过限制会被暂时禁用。 安全性 Webhook URL 包含密钥，请勿泄露。如果泄露，可以在企业微信管理后台重新生成。 错误处理 如果发送失败，检查返回的状态码和错误信息： 400：请求参数错误。 404：Webhook URL 无效。 429：消息发送频率过高。 五、总结通过企业微信 Webhook，开发者可以轻松实现消息推送功能。无论是监控报警、任务通知，还是自动化流程，Webhook 都提供了简单高效的解决方案。 如果你有更多问题或需要进一步的帮助，请参考 企业微信官方文档 或留言讨论。","tags":["企业微信,Webhook"],"categories":["教程"]},{"title":"SpringBoot3 解决不支持双斜杠问题","path":"/posts/2025/02/03/124815/","content":"方法一：在application.yml写 spring: mvc: pathmatch: matching-strategy: ant_path_matcher 或者在application.properties写 spring.mvc.pathmatch.matching-strategy=ant_path_matcher 方法二：在启动类Application加上 @Bean HttpFirewall httpFirewall() StrictHttpFirewall firewall = new StrictHttpFirewall(); firewall.setAllowUrlEncodedDoubleSlash(true); return firewall; 原因很简单，Spring Boot干掉了双斜杠。","categories":["SpringBoot"]},{"title":"Termux 使用 curl 出现 CANNOT LINK EXECUTABLE curl 问题","path":"/posts/2025/02/03/124648/","content":"问题与解决刚开始使用Termux的时候可能会出现: $ curlCANNOT LINK EXECUTABLE curl: library libssl.so.1.1 not found: needed by /data/data/com.termux/files/usr/lib/libssh2.so in namespace (default) 解决方案就是: pkg update","tags":["curl","Termux"],"categories":["教程"]},{"title":"探索动态图片背后的秘密：提取视频","path":"/posts/2025/02/02/115658/","content":"探索动态图片近日，我在编辑一张动态图片时，意外发现了一段有趣的元数据。这段数据不仅揭示了图片拍摄时的信息，还隐藏了一个关于视频的秘密。 在深入探索这张图片的元数据时，我注意到了GCamera:MicroVideoOffset这一字段。经过研究，我了解到这个字段代表的是视频偏移量，意味着在这个地址之后，隐藏着视频数据。 具体来说，这张动态图片实际上包含了一个微视频。通过解析GCamera:MicroVideoOffset所指示的位置，我们可以直接截取到这段视频。 以下是部分元数据的展示（已省略部分内容以节省篇幅）： ...x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=Adobe XMP Core 5.1.0-jc003 rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdf:Description rdf:about= xmlns:GCamera=http://ns.google.com/photos/1.0/camera/ xmlns:MiCamera=http://ns.phone.com/photos/1.0/camera/ GCamera:MicroVideoVersion=1 GCamera:MicroVideo=1 GCamera:MicroVideoOffset=2013388 GCamera:MicroVideoPresentationTimestampUs=722627 MiCamera:XMPMeta=lt;?xml version=1.0 encoding=UTF-8 standalone=yes ?gt;/ /rdf:RDF/x:xmpmeta... 从上面的元数据可以看出，GCamera:MicroVideoOffset的值为“2013388”，这表示视频数据位于该偏移量之后。 验证猜想为了验证这一发现，我尝试使用tail命令来提取视频。虽然tail命令通常用于查看文件的末尾部分，但在这里，我们可以通过指定偏移量和字节数来截取包含视频数据的部分。 我们可以使用以下命令来提取视频： tail -c +2013388 动态图片文件 提取的视频文件 然而，需要注意的是，这里的“+2013388”表示从文件的第2013388个字节开始提取。 结果，提取的那个视频正好可以播放。","tags":["动态图片"],"categories":["教程"]},{"title":"使用 Fish 导致找不到库或文件的问题","path":"/posts/2025/02/01/203438/","content":"Fish 环境变量设置差异对程序运行的影响Fish（Friendly Interactive SHell）凭借其友好的用户界面和简洁的语法，也逐渐赢得了不少用户的青睐。然而，Fish在环境变量设置方式上的独特之处，可能会给一些程序带来运行上的困扰。 Fish环境变量设置的独特性与其他Shell相比，Fish在环境变量设置方面有着显著的不同。在Fish中，set命令被用于设置变量，但赋值时并不使用等号（），而是通过空格直接分隔变量名和值。例如，要设置一个名为MY_VAR的变量，并赋值为hello，在Fish中应使用以下命令： set MY_VAR hello 而在Bash等Shell中，相同的操作则使用等号进行赋值，如下所示： export MY_VAR=hello 正是这种差异导致了Fish环境变量设置方式与其他Shell有所不同，这可能导致一些程序在Fish中运行时找不到所需的路径或变量。 程序兼容性问题脚本兼容性问题：一些程序可能通过脚本（如Bash脚本）来执行特定的任务。如果这些脚本是为其他Shell编写的，并且包含了对特定Shell命令或特性的依赖，那么当它们在Fish中运行时，可能会因为不兼容而导致错误。 解决方案针对上述问题，以下是一些可能的解决方案： 修改脚本以适应Fish：如果程序是通过脚本运行的，并且脚本中存在对其他Shell的依赖，那么可以尝试修改脚本，使其兼容Fish。这通常涉及到替换特定的Shell命令或语法。 在Fish中设置正确的环境变量和路径：确保在Fish中正确设置了程序所需的所有环境变量和路径。这可以通过手动设置变量或使用Fish的配置文件（如config.fish）来实现。 使用其他Shell运行程序：如果修改脚本或设置环境变量不可行，或者程序对Shell的依赖过于复杂，那么可以考虑使用其他Shell（如Bash或Zsh）来运行程序。这可以通过在Fish中调用其他Shell的命令行界面来实现。","tags":["Fish"],"categories":["教程"]},{"title":"还在为 SSH 自动断连烦恼？试试 Tmux 吧！","path":"/posts/2025/02/01/190939/","content":"使用 SSH 自动断连问题在使用 SSH 远程连接服务器时，经常会遇到网络不稳定或长时间无操作导致连接中断的情况。这不仅会影响工作效率，还可能导致未保存的工作丢失。为了解决这个问题，我们可以使用 tmux，一个强大的终端复用工具。 1. 什么是 Tmux？tmux 是一个终端复用工具，允许用户在一个终端窗口中创建多个会话、窗口和面板。它的核心功能包括： 会话管理：可以在一个终端中创建多个会话，并在这些会话之间自由切换。 窗口和面板：每个会话可以包含多个窗口，每个窗口又可以分割成多个面板。 断线重连：即使 SSH 连接中断，tmux 会话仍然会保留在服务器上，重新连接后可以恢复工作状态。 正是这些特性，使得 tmux 成为解决 SSH 自动断连问题的利器。 2. 安装 Tmux在大多数 Linux 发行版中，tmux 可以通过包管理器直接安装。 DebianUbuntu: sudo apt install tmux CentOSRHEL: sudo yum install tmux macOS: brew install tmux 安装完成后，可以通过 tmux -V 检查是否安装成功。 3. 基本使用启动 Tmux 会话在终端中输入以下命令启动一个新的 tmux 会话： tmux 这会创建一个新的会话，并进入一个全新的终端环境。 命名会话为了方便管理，可以为会话命名后再启动： tmux new -s mysession 其中 mysession 是你为会话指定的名称。 分离会话在 tmux 会话中，按下 Ctrl + b，然后按 d，可以分离当前会话。此时会话会在后台继续运行，即使 SSH 断开也不会影响。 重新连接会话重新连接 SSH 后，可以通过以下命令重新连接到之前的会话： tmux attach -t mysession 其中 mysession 是你要恢复的会话名称。 查看所有会话如果想查看当前所有的 tmux 会话，可以使用： tmux ls 4. 解决 SSH 自动断连问题tmux 的核心优势在于它的会话持久化功能。以下是具体的使用场景： 启动 Tmux 会话在 SSH 连接到服务器后，立即启动一个 tmux 会话： tmux new -s work 在 Tmux 中工作在 tmux 会话中运行你的任务，例如编辑文件、运行脚本等。 网络中断或 SSH 断开如果网络不稳定或 SSH 连接中断，tmux 会话仍然会在服务器上运行。 重新连接并恢复工作重新 SSH 连接到服务器后，使用以下命令恢复之前的会话： tmux attach -t work 你会发现所有的工作状态都完好无损。 5. 常用 Tmux 快捷键以下是一些常用的 tmux 快捷键（默认前缀键为 Ctrl + b）： 创建新窗口：Ctrl + b, c 切换窗口：Ctrl + b, 窗口编号（例如 Ctrl + b, 0 切换到第一个窗口） 水平分割面板：Ctrl + b, 垂直分割面板：Ctrl + b, % 切换面板：Ctrl + b, 方向键（例如 Ctrl + b, → 切换到右侧面板） 关闭面板：Ctrl + b, x 列出所有会话：Ctrl + b, s 重命名当前会话：Ctrl + b, $ 6. 高级技巧自动启动 Tmux如果你希望每次 SSH 登录时自动启动或恢复 tmux 会话，可以将以下代码添加到 ~/.bashrc 或 ~/.zshrc 中： if [[ -z $TMUX ]] [[ -n $SSH_CONNECTION ]]; then tmux attach -t ssh || tmux new -s sshfi 这样，每次 SSH 登录时，tmux 会自动恢复名为 ssh 的会话，或者创建一个新的会话。 配置文件tmux 支持通过配置文件（~/.tmux.conf）自定义行为。例如，可以修改前缀键、启用鼠标支持等。以下是一个简单的配置示例： # 将前缀键改为 Ctrl + aunbind C-bset-option -g prefix C-abind C-a send-prefix# 启用鼠标支持set -g mouse on# 设置状态栏颜色set -g status-bg blueset -g status-fg white 7. 总结通过使用 tmux，你可以轻松解决 SSH 自动断连的问题，同时提高终端操作的效率。无论是长时间运行的任务，还是多任务并行处理，tmux 都能为你提供一个稳定、灵活的工作环境。 如果你还没有尝试过 tmux，不妨从今天开始使用它，体验它带来的便利吧！","tags":["SSH,Tmux"],"categories":["工具"]},{"title":"Windows Hexo 使用 Rsync 发布踩坑指南","path":"/posts/2025/02/01/102426/","content":"问题与解决方案在使用 Hexo 生成静态博客并发布到远程服务器时，rsync 是一个非常高效的工具。然而，在 Windows 环境下使用 rsync 可能会遇到一些问题。 错误：rsync �����ڲ����ⲿ���Ҳ���ǿ����еĳ���这个错误通常是因为系统找不到 rsync 可执行文件。解决方法如下： 检查环境变量确保 rsync 的路径已经添加到系统的 PATH 环境变量中。 使用绝对路径如果你使用的是 cwRsync，可以在 Hexo 的 _config.yml 中使用绝对路径来指定 rsync 的位置。例如： deploy: type: rsync rsync: C:/Program Files/cwRsync/bin/rsync.exe host: your.server.com user: your_username root: /path/to/your/blog port: 22 delete: true verbose: true 1. 安装 Rsync在 Windows 上，rsync 并不是原生支持的，因此我们需要借助第三方工具来实现。使用 cwRsync。 使用 cwRsync 下载 cwRsync访问 cwRsync 官网，下载并安装适合你系统的版本。 配置环境变量安装完成后，将 cwRsync 的安装路径（例如 C:\\Program Files\\cwRsync\\bin）添加到系统的环境变量 PATH 中。 验证安装打开命令提示符（CMD），输入 rsync --version，如果能看到版本信息，说明安装成功。 2. 配置 Hexo 使用 Rsync在 Hexo 的配置文件 _config.yml 中，找到 deploy 部分，添加或修改如下配置： deploy: type: rsync host: your.server.com user: your_username root: /path/to/your/blog port: 22 delete: true verbose: true host: 你的服务器地址。 user: 登录服务器的用户名。 root: 服务器上存放博客的路径。 port: SSH 端口，默认为 22。 delete: 是否删除服务器上多余的文件，建议设置为 true。 verbose: 是否显示详细日志，建议设置为 true 以便调试。 4. 测试发布完成配置后，运行以下命令来发布你的博客： hexo clean hexo deploy --generate 如果一切顺利，你应该能够看到 rsync 开始同步文件，并且博客成功发布到远程服务器。 如果你还有其他问题，欢迎在评论区留言讨论","tags":["Window","Hexo","Rsync"],"categories":["教程"]},{"title":"使用GPG生成密钥遇到gpg: agent_genkey failed: No pinentry与Key generation failed: No pinentry","path":"/posts/2025/01/26/225646/","content":"遇到的问题您在使用 GnuPG (GPG) 生成密钥时遇到了以下错误。 gpg: agent_genkey failed: No pinentryKey generation failed: No pinentry 这个错误通常是由于 pinentry 程序未正确安装或配置导致的。pinentry 是一个用于处理密码输入的辅助程序，GPG 需要它来安全地提示用户输入密码。 解决此问题：1. 安装 pinentry首先，确保您的系统中已安装 pinentry。根据您使用的操作系统，安装方法可能有所不同： DebianUbuntu: sudo apt-get updatesudo apt-get install pinentry Fedora: dnf install pinentry Arch Linux: pacman -S pinentry macOS (使用 Homebrew): brew install pinentry 2. 重新使用GPG生成如果还是没用，可以尝试重启一遍终端","tags":["问题","GunPG"],"categories":["工具"]},{"title":"2024年最新JetBrains全家桶激活","path":"/posts/2024/11/23/203036/","content":"下载破解脚本JetBrains 全家桶激活（2024最新）.zip | AList 开始激活 首先先退出你的IDE 进入到解压后的文件夹 /win2020-2024(一键激活) 中，双击 IDEA激活.vbs（按需选择） ，若提示 Success!!! Now you can enjoy IntelliJIdea to 2099 , 则表示你的 IDE 激活成功啦~ 启动启动你的IDE即可。 免责声明本教程IDE破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。若条件允许，希望大家购买正版 ！本工具不鼓励盗版，对于不正确的使用，请自行承担责任。如果你使用本工具，则表示你自动同意上述书面协议，因此，任何责任和后果请自负。 提示： 本内容转载自犬小哈，本工具非我编写，请自行辨认！","tags":["工具"],"categories":["Windows"]},{"title":"Windows系统激活最简单的方法详细教程","path":"/posts/2024/11/23/182703/","content":"方法一 ：使用Microsoft 激活脚本 （MAS）开源 Windows 和 Office 激活器，具有 HWID、Ohook、KMS38 和在线 KMS 激活方法，以及高级故障排除。 下载 如何使用它？方法 1 - PowerShell（Windows 8 及更高版本） ❤️ 打开 PowerShell（不是 CMD）。为此，请右键单击 Windows 开始菜单并选择 PowerShell 或终端。 复制并粘贴下面的代码，然后按 Enter 键 irm https://get.activated.win | iex 您将看到激活选项。 （1） HWID： 进行 Windows 激活。 （2） Ohook ：给 Office 激活。 …如图 就这样。 或者您可以使用以下内容（将来将弃用）。 irm https://massgrave.dev/get | iex 该 URL 可能被某些 DNS 服务阻止，因为它是一个新域。get.activated.win 方法 2 - 传统（Windows 7 及更高版本） 使用下面提供的链接下载文件。 https://github.com/massgravel/Microsoft-Activation-Scripts/archive/refs/heads/master.zip 或者 https://git.activated.win/massgrave/Microsoft-Activation-Scripts/archive/master.zip 右键单击下载的 zip 文件并解压缩在解压缩的文件夹中，找到名为All-In-One-Version运行名为MAS_AIO.cmd您将看到激活选项，请按照屏幕上的说明进行操作。就这样。 注意： PowerShell 中的 IRM 命令从指定的 URL 下载脚本，然后 IEX 命令执行该脚本。 在执行命令之前，请务必仔细检查 URL，如果手动下载文件，请验证来源。 请谨慎，因为有些应用程序通过在 IRM 命令中使用不同的 URL 来传播伪装成 MAS 的恶意软件。 方法二：使用传统桌面工具（容易报毒）HEU KMS Activator中文版是一款简洁高效的KMSOEM智能激活工具，适用所有Windows、Office版本，无需联网即可一键激活，支持UEFI的KMS激活工具。KMS服务是微软对Windows、Office等产品的批量许可服务，利用KMS可以激活局域网内的产品。该工具利用KMS机制在系统搭建KMS服务器，从而实现在线或离线激活。 下载点击下载安装 HEU_KMS_Activator 如何使用它？功能简介 1、智能激活：智能识别最佳的激活方式优先顺序依次为数字许可证KMS38OEMKMS自动识别并跳过已经永久激活的WindowsOffice 2、KMS激活安装卸载自动续期功能，两种模式可供选择[1]自动续订模式(默认 [2]任务计划模式清除KMS客户端信息：清除KMS服务器地址、端口、激活时间间隔、续订时间间隔等搭建KMS服务器[手动激活]：KMS服务器地址端口 3、数字激活（数字许可证激活、KMS38激活）添加解除KMS38保护，免受180天激活影响，除非解除保护，否则不能使用KMS38激活查看当前系统信息：网络状态激活状态，描述便于快速查看是否支持数字许可证KMS38 4、OEM激活（提供6种模式）卸载OEM激活信息：清除动态加载的SLIC等信息，OEM激活将失效生产$OEM$文件夹：可将该文件夹置于ISO镜像source文件夹下，以集成OEM激活功能 5、更改Windows 10版本、激活信息备份还原、Microsoft Office 零售版转换批量授权版 6、WindowsOffice密钥管理功能：安装密钥、卸载密钥、查看密钥、清除Office许可证 7、智能激活、激活成功率高、支持静默参数、几乎支持所有 WindowsOffice 所有版本 8、Windows 7上无需依赖.NET Framework、能够离线激活，也能连接网络服务器激活 静默参数 ? 查看静默参数smart 智能激活dig 数字许可证激活Win1011k38 激活Win1011至2038年lok 添加KMS38保护oem OEM激活Win Vista7Serverod1 OEM模式1(默认)od2 OEM模式2kwi 使用KMS激活Windowskof 使用KMS激活Officekd1 KMS模式1(默认)kd2 KMS模式2wxp 激活Windows XPr2v Office R2Vren 安装自动续期功能unr 卸载自动续期功能reb 重启计算机nologo 使用静默参数时不显示logo 无人值守静默方式以数字许可永久激活系统： HEU_KMS_Activator.exe /kwi /dig /nologo 注意：此激活工具Microsoft Defender会误报威胁，记得加排除! 免责声明本软件完全免费，仅供研究激活原理测试使用，任何个人和组织不得以任何形式进行出售，任何商业行为与我本人没有任何关系，并非我的本意。如果你想使用Windows或Office，请前往微软正规渠道购买正版授权。本程序不鼓励盗版，对于不正确的使用，请自行承担责任。如果你使用本程序，则表示你自动同意上述书面协议，因此，任何责任和后果请自负。","tags":["工具"],"categories":["Windows"]},{"title":"算法学习推荐网站或书籍 - Hello算法","path":"/posts/2024/08/11/162542/","content":"《Hello 算法》 动画图解、一键运行的数据结构与算法教程 代码仓库 https://github.com/krahets/hello-algo 在线阅读 https://www.hello-algo.com/ 下载 PDF https://github.com/krahets/hello-algo/releases 本项目旨在创建一本开源、免费、对新手友好的数据结构与算法入门教程。 全书采用动画图解，内容清晰易懂、学习曲线平滑，引导初学者探索数据结构与算法的知识地图。 源代码可一键运行，帮助读者在练习中提升编程技能，了解算法工作原理和数据结构底层实现。 提倡读者互助学习，欢迎大家在评论区提出问题与分享见解，在交流讨论中共同进步。 算法源代码皆可一键运行，支持 Python、C++、Java、C#、Go、Swift、JavaScript、TypeScript、Dart、Rust、C 和 Zig 等语言。 内容结构本书的主要内容如图所示。 复杂度分析：数据结构和算法的评价维度与方法。时间复杂度和空间复杂度的推算方法、常见类型、示例等。 数据结构：基本数据类型和数据结构的分类方法。数组、链表、栈、队列、哈希表、树、堆、图等数据结构的定义、优缺点、常用操作、常见类型、典型应用、实现方法等。 算法：搜索、排序、分治、回溯、动态规划、贪心等算法的定义、优缺点、效率、应用场景、解题步骤和示例问题等。 注意：这本书不是我写的哦！作者是@krahets。 本人觉得这本书写的是很不错的，欢迎去学习。","categories":["算法"]},{"title":"STM32-PWM实现呼吸灯","path":"/posts/2024/08/11/160033/","content":"STM32定时器PWM概述在嵌入式系统开发中，控制LED的亮度或电机的速度等模拟控制任务常常需要使用PWM（脉冲宽度调制）技术。STM32微控制器提供了强大的定时器功能，可以方便地生成PWM信号。本文将详细介绍如何在STM32上配置定时器的PWM输出。 定时器与引脚映射STM32的定时器具有多个通道，每个通道都可以输出PWM信号。但是，并非所有的GPIO引脚都可以用于所有定时器的通道。每个定时器通道通常只能映射到一组特定的引脚上，这些引脚被称为复用功能（Alternate Function，AF）引脚。 如何确定引脚与定时器通道的映射关系？ 查看数据手册：STM32的数据手册会详细列出每个定时器通道可以映射到哪些引脚。通常，这些信息会在引脚定义和复用功能章节中给出。 使用STM32CubeMX工具：STM32CubeMX是一个图形化配置工具，可以用来配置STM32的外设。通过这个工具，你可以直观地选择定时器和对应的通道， 配置TIM通道的PWM输出假设我们使用STM32F103RCT6微控制器，并希望配置TIM3的通道2输出PWM信号，因为我的LED是这个TIM通道，按自己的来更改。以下是配置过程的详细步骤： 1. 使能时钟首先，需要使能定时器和GPIO端口的时钟。 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); // 使能TIM3时钟RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); // 使能GPIOB时钟 2. GPIO配置接下来，配置GPIO端口的引脚为复用推挽输出模式。在这个例子中，我们使用TIM3的通道2，对应的GPIO引脚是PB5。 GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; // PB5GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // 复用推挽输出GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // IO口速度为50MHzGPIO_Init(GPIOB, GPIO_InitStructure); // 初始化GPIOB.5 3. 定时器基本配置在配置PWM之前，需要对定时器进行基本的配置，包括预分频器、计数模式、自动重装载值等。 TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;TIM_TimeBaseStructure.TIM_Prescaler = 71; // 预分频器值TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; // 向上计数模式TIM_TimeBaseStructure.TIM_Period = 499; // 自动重装载值TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; // 时钟分频TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;TIM_TimeBaseInit(TIM3, TIM_TimeBaseStructure); 4. PWM模式配置现在，我们可以配置定时器的PWM模式。这包括设置PWM模式、输出状态、占空比、输出极性等。 TIM_OCInitTypeDef TIM_OCInitStructure;TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; // PWM模式1TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; // 使能输出TIM_OCInitStructure.TIM_Pulse = 0; // 初始占空比TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; // 输出极性高TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset; // 空闲状态TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset; // 互补空闲状态TIM_OC2Init(TIM3, TIM_OCInitStructure); // 配置TIM3通道2为PWM模式TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable); // 使能TIM3通道2的预装载寄存器 5. 启动PWM最后，启动定时器，PWM信号就会出现在配置好的引脚上。 TIM_Cmd(TIM3, ENABLE); // 使能TIM3 注意：需要写对对应的TIM和对应的通道，不然可能无效，如果不行，可以使用STM32CubeMX工具来找。 完整代码#include stm32f10x.h#include stm32f10x_tim.h#include delay.hvoid PWM_Init(void) /*开启时钟*/ RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //开启TIM3的时钟 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); //开启GPIOB的时钟 /*GPIO初始化*/ GPIO_InitTypeDef GPIO_InitStructure; GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; // PB5对应TIM3的通道2 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; GPIO_Init(GPIOB, GPIO_InitStructure); //将PB5引脚初始化为复用推挽输出 // 定时器初始化 TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; TIM_TimeBaseStructure.TIM_Prescaler = 71; // 预分频器 TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; // 向上计数模式 TIM_TimeBaseStructure.TIM_Period = 499; // 自动重装载值 TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; // 时钟分频 TIM_TimeBaseStructure.TIM_RepetitionCounter = 0; TIM_TimeBaseInit(TIM3, TIM_TimeBaseStructure); // 使能定时器3 TIM_Cmd(TIM3, ENABLE); // PWM模式配置 TIM_OCInitTypeDef TIM_OCInitStructure; TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; // PWM模式1 TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; // 使能输出 TIM_OCInitStructure.TIM_Pulse = 0; // 初始占空比 TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; // 输出极性高 TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High; // 互补输出极性高 TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset; // 空闲状态 TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset; // 互补空闲状态 // 配置TIM3通道2 TIM_OC2Init(TIM3, TIM_OCInitStructure); // 使能TIM3通道2的预装载寄存器 TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);void PWM_SetCompare(uint16_t Compare) TIM_SetCompare2(TIM3, Compare); //设置CCR3的值int main(void) PWM_Init();\tuint16_t value = 0;\twhile(1) while(value 500) value++; PWM_SetCompare(value); delay_ms(2); while(value) value--; PWM_SetCompare(value); delay_ms(2); delay_ms(200); 通过以上步骤，您已经成功配置了STM32的定时器TIM3的通道2，使其输出PWM信号到PB5引脚。通过调整TIM_OCInitStructure.TIM_Pulse的值，您可以改变PWM的占空比，从而控制连接到该引脚的LED的亮度。","tags":["PWM","TIM"],"categories":["STM32"]},{"title":"STM32F103RCT6-ST7789-1.3寸屏幕驱动","path":"/posts/2024/08/11/144001/","content":"ST7789屏幕驱动在嵌入式系统开发中，显示屏幕是与用户交互的重要组成部分。ST7789是一款常用的TFT LCD驱动IC，广泛应用于各种小型显示屏幕中。本文将介绍如何为STM32F103RCT6微控制器编写ST7789 1.3寸屏幕驱动程序，并提供基本的初始化和显示功能。 引脚功能在开始编写代码之前，我们需要了解STM32F103RCT6与ST7789屏幕之间的连接方式。ST7789通常通过SPI接口与微控制器通信，同时还需要一些控制线，如复位（RST）、数据命令（DC）、片选（CS）等。 了解各个引脚功能之后就可以开始进行驱动屏幕显示 引脚名称 引脚功能 VCC 电源正，3.3 - 5V（看你屏幕），需要与通信电平一致 GND 电源负，接地 CS 片选，低电平使能（本文章不接） RST 复位，低电平使能 DC 数据命令选择，低电平命令，高电平数据 SDA SPI数据输入端口 SCL SPI时钟信号输入端口 BLK 背光，悬空使能接地关闭，默认上拉至3.3V（可选择不接） 引脚接线 STM32F03RCT6 ST7789 3V3 VCC GND GND CS（不接） PC0 RST PA6 DC PC6 SDA PA7 SCL PA5 BLK（可不接） PC7 注意：按照自己的板子引脚来接，可能板子引脚会不一样！电源不要接反了小小烧屏幕！ 我使用的开发板 驱动移植lcd-init.h：初始化LCD头文件#ifndef __LCD_INIT_H#define __LCD_INIT_H#include sys.h#define USE_HORIZONTAL 0 //设置横屏或者竖屏显示 0或1为竖屏 2或3为横屏,（没啥用）#define LCD_W 240#define LCD_H 240//-----------------LCD端口定义---------------- #define LCD_SCLK_Clr() GPIO_ResetBits(GPIOA,GPIO_Pin_5)//SCL=SCLK=SCK#define LCD_SCLK_Set() GPIO_SetBits(GPIOA,GPIO_Pin_5)#define LCD_MOSI_Clr() GPIO_ResetBits(GPIOA,GPIO_Pin_7)//SDA=MOSI =SDI#define LCD_MOSI_Set() GPIO_SetBits(GPIOA,GPIO_Pin_7)#define LCD_RES_Clr() GPIO_ResetBits(GPIOA,GPIO_Pin_6)//RES=RST=SDO#define LCD_RES_Set() GPIO_SetBits(GPIOA,GPIO_Pin_6)#define LCD_DC_Clr() GPIO_ResetBits(GPIOC,GPIO_Pin_6)//DC=RS#define LCD_DC_Set() GPIO_SetBits(GPIOC,GPIO_Pin_6) #define LCD_CS_Clr() GPIO_ResetBits(GPIOC,GPIO_Pin_0)//CS#define LCD_CS_Set() GPIO_SetBits(GPIOC,GPIO_Pin_0)#define LCD_BLK_Clr() GPIO_ResetBits(GPIOC,GPIO_Pin_7)//BLK#define LCD_BLK_Set() GPIO_SetBits(GPIOC,GPIO_Pin_7)void LCD_GPIO_Init(void);//初始化GPIOvoid LCD_Writ_Bus(u8 dat);//模拟SPI时序void LCD_WR_DATA8(u8 dat);//写入一个字节void LCD_WR_DATA(u16 dat);//写入两个字节void LCD_WR_REG(u8 dat);//写入一个指令void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2);//设置坐标函数void LCD_Init(void);//LCD初始化#endif lcd-init.c：LCD初始化文件#include lcd_init.h#include delay.hvoid LCD_GPIO_Init(void)\tGPIO_InitTypeDef GPIO_InitStructure; RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE); //使能A端口时钟\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_6|GPIO_Pin_7; GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//速度50MHz GPIO_Init(GPIOC, GPIO_InitStructure); //初始化GPIOA GPIO_SetBits(GPIOC,GPIO_Pin_0|GPIO_Pin_6|GPIO_Pin_7); GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7; GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//速度50MHz GPIO_Init(GPIOA, GPIO_InitStructure); //初始化GPIOA GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);/****************************************************************************** 函数说明：LCD串行数据写入函数 入口数据：dat 要写入的串行数据 返回值： 无******************************************************************************/void LCD_Writ_Bus(u8 dat) u8 i;\tLCD_CS_Clr();\tfor(i=0;i8;i++) LCD_SCLK_Clr(); if(dat0x80) LCD_MOSI_Set(); else LCD_MOSI_Clr(); LCD_SCLK_Set(); dat=1; LCD_CS_Set();\t/****************************************************************************** 函数说明：LCD写入数据 入口数据：dat 写入的数据 返回值： 无******************************************************************************/void LCD_WR_DATA8(u8 dat)\tLCD_Writ_Bus(dat);/****************************************************************************** 函数说明：LCD写入数据 入口数据：dat 写入的数据 返回值： 无******************************************************************************/void LCD_WR_DATA(u16 dat)\tLCD_Writ_Bus(dat8);\tLCD_Writ_Bus(dat);/****************************************************************************** 函数说明：LCD写入命令 入口数据：dat 写入的命令 返回值： 无******************************************************************************/void LCD_WR_REG(u8 dat)\tLCD_DC_Clr();//写命令\tLCD_Writ_Bus(dat);\tLCD_DC_Set();//写数据/****************************************************************************** 函数说明：设置起始和结束地址 入口数据：x1,x2 设置列的起始和结束地址 y1,y2 设置行的起始和结束地址 返回值： 无******************************************************************************/void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)\tLCD_WR_REG(0x2a); LCD_WR_DATA8(x18); LCD_WR_DATA8(x1); LCD_WR_DATA8(x28); LCD_WR_DATA8(x2); LCD_WR_REG(0x2b); LCD_WR_DATA8(y18); LCD_WR_DATA8(y1); LCD_WR_DATA8(y28); LCD_WR_DATA8(y2); LCD_WR_REG(0x2C);\tvoid LCD_Init(void)\tLCD_GPIO_Init();//初始化GPIO LCD_RES_Clr();//复位\tdelay_ms(20);\tLCD_RES_Set();\tdelay_ms(20); LCD_BLK_Set();//打开背光\tLCD_WR_REG(0x36); LCD_WR_DATA8(0x00);\tLCD_WR_REG(0x3A); LCD_WR_DATA8(0x05);\tLCD_WR_REG(0xB2);\tLCD_WR_DATA8(0x0C);\tLCD_WR_DATA8(0x0C);\tLCD_WR_DATA8(0x00);\tLCD_WR_DATA8(0x33);\tLCD_WR_DATA8(0x33);\tLCD_WR_REG(0xB7); LCD_WR_DATA8(0x35); LCD_WR_REG(0xBB);\tLCD_WR_DATA8(0x19);\tLCD_WR_REG(0xC0);\tLCD_WR_DATA8(0x2C);\tLCD_WR_REG(0xC2);\tLCD_WR_DATA8(0x01);\tLCD_WR_REG(0xC3);\tLCD_WR_DATA8(0x12); LCD_WR_REG(0xC4);\tLCD_WR_DATA8(0x20); LCD_WR_REG(0xC6); LCD_WR_DATA8(0x0F); LCD_WR_REG(0xD0); LCD_WR_DATA8(0xA4);\tLCD_WR_DATA8(0xA1);\tLCD_WR_REG(0xE0);\tLCD_WR_DATA8(0xD0);\tLCD_WR_DATA8(0x04);\tLCD_WR_DATA8(0x0D);\tLCD_WR_DATA8(0x11);\tLCD_WR_DATA8(0x13);\tLCD_WR_DATA8(0x2B);\tLCD_WR_DATA8(0x3F);\tLCD_WR_DATA8(0x54);\tLCD_WR_DATA8(0x4C);\tLCD_WR_DATA8(0x18);\tLCD_WR_DATA8(0x0D);\tLCD_WR_DATA8(0x0B);\tLCD_WR_DATA8(0x1F);\tLCD_WR_DATA8(0x23);\tLCD_WR_REG(0xE1);\tLCD_WR_DATA8(0xD0);\tLCD_WR_DATA8(0x04);\tLCD_WR_DATA8(0x0C);\tLCD_WR_DATA8(0x11);\tLCD_WR_DATA8(0x13);\tLCD_WR_DATA8(0x2C);\tLCD_WR_DATA8(0x3F);\tLCD_WR_DATA8(0x44);\tLCD_WR_DATA8(0x51);\tLCD_WR_DATA8(0x2F);\tLCD_WR_DATA8(0x1F);\tLCD_WR_DATA8(0x1F);\tLCD_WR_DATA8(0x20);\tLCD_WR_DATA8(0x23);\tLCD_WR_REG(0x21); LCD_WR_REG(0x11); //Delay (120); LCD_WR_REG(0x29); lcd.h：LCD显示实现头文件#ifndef __LCD_H#define __LCD_H #include sys.hvoid LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color);//指定区域填充颜色void LCD_DrawPoint(u16 x,u16 y,u16 color);//在指定位置画一个点void LCD_DrawLine(u16 x1,u16 y1,u16 x2,u16 y2,u16 color);//在指定位置画一条线void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2,u16 color);//在指定位置画一个矩形void LCD_Draw_Circle(u16 x0,u16 y0,u8 r,u16 color);//在指定位置画一个圆void LCD_ShowChinese(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode);//显示汉字串void LCD_ShowChinese12x12(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode);//显示单个12x12汉字void LCD_ShowChinese16x16(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode);//显示单个16x16汉字void LCD_ShowChinese24x24(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode);//显示单个24x24汉字void LCD_ShowChinese32x32(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode);//显示单个32x32汉字void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode);//显示一个字符void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode);//显示字符串u32 mypow(u8 m,u8 n);//求幂void LCD_ShowIntNum(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey);//显示整数变量void LCD_ShowFloatNum1(u16 x,u16 y,float num,u8 len,u16 fc,u16 bc,u8 sizey);//显示两位小数变量void LCD_ShowPicture(u16 x,u16 y,u16 length,u16 width,const u8 pic[]);//显示图片//画笔颜色#define ST7789_BLACK 0x0000#define ST7789_WHITE 0xFFFF#define ST7789_RED 0xF800#define ST7789_GBLUE 0X07FF#define ST7789_GREEN 0x07E0#define ST7789_BLUE 0x001F#define ST7789_CYAN 0x07FF#define ST7789_MAGENTA 0xF81F#define ST7789_YELLOW 0xFFE0#define ST7789_ORANGE 0xFD20#define ST7789_BROWN 0xBC40#define ST7789_GRAY 0x8410#define ST7789_DARK_GRAY 0x4208#define ST7789_BRRED 0XFC07 //棕红色#define ST7789_DARKBLUE 0X01CF\t//深蓝色#define ST7789_LIGHTBLUE 0X7D7C\t//浅蓝色 #define ST7789_GRAYBLUE 0X5458 //灰蓝色#define ST7789_LIGHTGREEN 0X841F //浅绿色#define ST7789_LGRAY 0XC618 //浅灰色(PANNEL),窗体背景色#define ST7789_LGRAYBLUE 0XA651 //浅灰蓝色(中间层颜色)#define ST7789_LBBLUE 0X2B12 //浅棕蓝色(选择条目的反色)#endif lcd.c：LCD显示实现文件#include lcd.h#include lcd_init.h#include lcdfont.h#include delay.h/****************************************************************************** 函数说明：在指定区域填充颜色 入口数据：xsta,ysta 起始坐标 xend,yend 终止坐标 color 要填充的颜色 返回值： 无******************************************************************************/void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color) u16 i,j; LCD_Address_Set(xsta,ysta,xend,yend);//设置显示范围\tfor(i=ysta;iyend;i++) for(j=xsta;jxend;j++) LCD_WR_DATA(color); /****************************************************************************** 函数说明：在指定位置画点 入口数据：x,y 画点坐标 color 点的颜色 返回值： 无******************************************************************************/void LCD_DrawPoint(u16 x,u16 y,u16 color)\tLCD_Address_Set(x,y,x,y);//设置光标位置 LCD_WR_DATA(color); /****************************************************************************** 函数说明：画线 入口数据：x1,y1 起始坐标 x2,y2 终止坐标 color 线的颜色 返回值： 无******************************************************************************/void LCD_DrawLine(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)\tu16 t; int xerr=0,yerr=0,delta_x,delta_y,distance;\tint incx,incy,uRow,uCol;\tdelta_x=x2-x1; //计算坐标增量 delta_y=y2-y1;\tuRow=x1;//画线起点坐标\tuCol=y1;\tif(delta_x0)incx=1; //设置单步方向 else if (delta_x==0)incx=0;//垂直线 else incx=-1;delta_x=-delta_x;\tif(delta_y0)incy=1;\telse if (delta_y==0)incy=0;//水平线 else incy=-1;delta_y=-delta_y;\tif(delta_xdelta_y)distance=delta_x; //选取基本增量坐标轴 else distance=delta_y;\tfor(t=0;tdistance+1;t++) LCD_DrawPoint(uRow,uCol,color);//画点 xerr+=delta_x; yerr+=delta_y; if(xerrdistance) xerr-=distance; uRow+=incx; if(yerrdistance) yerr-=distance; uCol+=incy; /****************************************************************************** 函数说明：画矩形 入口数据：x1,y1 起始坐标 x2,y2 终止坐标 color 矩形的颜色 返回值： 无******************************************************************************/void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)\tLCD_DrawLine(x1,y1,x2,y1,color);\tLCD_DrawLine(x1,y1,x1,y2,color);\tLCD_DrawLine(x1,y2,x2,y2,color);\tLCD_DrawLine(x2,y1,x2,y2,color);/****************************************************************************** 函数说明：画圆 入口数据：x0,y0 圆心坐标 r 半径 color 圆的颜色 返回值： 无******************************************************************************/void LCD_Draw_Circle(u16 x0,u16 y0,u8 r,u16 color)\tint a,b;\ta=0;b=r; while(a=b) LCD_DrawPoint(x0-b,y0-a,color); //3 LCD_DrawPoint(x0+b,y0-a,color); //0 LCD_DrawPoint(x0-a,y0+b,color); //1 LCD_DrawPoint(x0-a,y0-b,color); //2 LCD_DrawPoint(x0+b,y0+a,color); //4 LCD_DrawPoint(x0+a,y0-b,color); //5 LCD_DrawPoint(x0+a,y0+b,color); //6 LCD_DrawPoint(x0-b,y0+a,color); //7 a++; if((a*a+b*b)(r*r))//判断要画的点是否过远 b--; /****************************************************************************** 函数说明：显示汉字串 入口数据：x,y显示坐标 *s 要显示的汉字串 fc 字的颜色 bc 字的背景色 sizey 字号 可选 16 24 32 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChinese(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)\twhile(*s!=0) if(sizey==12) LCD_ShowChinese12x12(x,y,s,fc,bc,sizey,mode); else if(sizey==16) LCD_ShowChinese16x16(x,y,s,fc,bc,sizey,mode); else if(sizey==24) LCD_ShowChinese24x24(x,y,s,fc,bc,sizey,mode); else if(sizey==32) LCD_ShowChinese32x32(x,y,s,fc,bc,sizey,mode); else return; s+=2; x+=sizey;\t/****************************************************************************** 函数说明：显示单个12x12汉字 入口数据：x,y显示坐标 *s 要显示的汉字 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChinese12x12(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)\tu8 i,j,m=0;\tu16 k;\tu16 HZnum;//汉字数目\tu16 TypefaceNum;//一个字符所占字节大小\tu16 x0=x;\tTypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey; HZnum=sizeof(tfont12)/sizeof(typFNT_GB12);\t//统计汉字数目\tfor(k=0;kHZnum;k++) if((tfont12[k].Index[0]==*(s))(tfont12[k].Index[1]==*(s+1))) LCD_Address_Set(x,y,x+sizey-1,y+sizey-1); for(i=0;iTypefaceNum;i++) for(j=0;j8;j++) if(!mode)//非叠加方式 if(tfont12[k].Msk[i](0x01j))LCD_WR_DATA(fc); else LCD_WR_DATA(bc); m++; if(m%sizey==0) m=0; break; else//叠加方式 if(tfont12[k].Msk[i](0x01j))\tLCD_DrawPoint(x,y,fc);//画一个点 x++; if((x-x0)==sizey) x=x0; y++; break; continue; //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响 /****************************************************************************** 函数说明：显示单个16x16汉字 入口数据：x,y显示坐标 *s 要显示的汉字 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChinese16x16(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)\tu8 i,j,m=0;\tu16 k;\tu16 HZnum;//汉字数目\tu16 TypefaceNum;//一个字符所占字节大小\tu16 x0=x; TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;\tHZnum=sizeof(tfont16)/sizeof(typFNT_GB16);\t//统计汉字数目\tfor(k=0;kHZnum;k++) if ((tfont16[k].Index[0]==*(s))(tfont16[k].Index[1]==*(s+1))) LCD_Address_Set(x,y,x+sizey-1,y+sizey-1); for(i=0;iTypefaceNum;i++) for(j=0;j8;j++) if(!mode)//非叠加方式 if(tfont16[k].Msk[i](0x01j))LCD_WR_DATA(fc); else LCD_WR_DATA(bc); m++; if(m%sizey==0) m=0; break; else//叠加方式 if(tfont16[k].Msk[i](0x01j))\tLCD_DrawPoint(x,y,fc);//画一个点 x++; if((x-x0)==sizey) x=x0; y++; break; continue; //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响 /****************************************************************************** 函数说明：显示单个24x24汉字 入口数据：x,y显示坐标 *s 要显示的汉字 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChinese24x24(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)\tu8 i,j,m=0;\tu16 k;\tu16 HZnum;//汉字数目\tu16 TypefaceNum;//一个字符所占字节大小\tu16 x0=x;\tTypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;\tHZnum=sizeof(tfont24)/sizeof(typFNT_GB24);\t//统计汉字数目\tfor(k=0;kHZnum;k++) if ((tfont24[k].Index[0]==*(s))(tfont24[k].Index[1]==*(s+1))) LCD_Address_Set(x,y,x+sizey-1,y+sizey-1); for(i=0;iTypefaceNum;i++) for(j=0;j8;j++) if(!mode)//非叠加方式 if(tfont24[k].Msk[i](0x01j))LCD_WR_DATA(fc); else LCD_WR_DATA(bc); m++; if(m%sizey==0) m=0; break; else//叠加方式 if(tfont24[k].Msk[i](0x01j))\tLCD_DrawPoint(x,y,fc);//画一个点 x++; if((x-x0)==sizey) x=x0; y++; break; continue; //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响 /****************************************************************************** 函数说明：显示单个32x32汉字 入口数据：x,y显示坐标 *s 要显示的汉字 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChinese32x32(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)\tu8 i,j,m=0;\tu16 k;\tu16 HZnum;//汉字数目\tu16 TypefaceNum;//一个字符所占字节大小\tu16 x0=x;\tTypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;\tHZnum=sizeof(tfont32)/sizeof(typFNT_GB32);\t//统计汉字数目\tfor(k=0;kHZnum;k++) if ((tfont32[k].Index[0]==*(s))(tfont32[k].Index[1]==*(s+1))) LCD_Address_Set(x,y,x+sizey-1,y+sizey-1); for(i=0;iTypefaceNum;i++) for(j=0;j8;j++) if(!mode)//非叠加方式 if(tfont32[k].Msk[i](0x01j))LCD_WR_DATA(fc); else LCD_WR_DATA(bc); m++; if(m%sizey==0) m=0; break; else//叠加方式 if(tfont32[k].Msk[i](0x01j))\tLCD_DrawPoint(x,y,fc);//画一个点 x++; if((x-x0)==sizey) x=x0; y++; break; continue; //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响\t/****************************************************************************** 函数说明：显示单个字符 入口数据：x,y显示坐标 num 要显示的字符 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)\tu8 temp,sizex,t,m=0;\tu16 i,TypefaceNum;//一个字符所占字节大小\tu16 x0=x;\tsizex=sizey/2;\tTypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;\tnum=num- ; //得到偏移后的值\tLCD_Address_Set(x,y,x+sizex-1,y+sizey-1); //设置光标位置 for(i=0;iTypefaceNum;i++) if(sizey==12)temp=ascii_1206[num][i]; //调用6x12字体 else if(sizey==16)temp=ascii_1608[num][i]; //调用8x16字体 else if(sizey==24)temp=ascii_2412[num][i]; //调用12x24字体 else if(sizey==32)temp=ascii_3216[num][i]; //调用16x32字体 else return; for(t=0;t8;t++) if(!mode)//非叠加模式 if(temp(0x01t))LCD_WR_DATA(fc); else LCD_WR_DATA(bc); m++; if(m%sizex==0) m=0; break; else//叠加模式 if(temp(0x01t))LCD_DrawPoint(x,y,fc);//画一个点 x++; if((x-x0)==sizex) x=x0; y++; break; /****************************************************************************** 函数说明：显示字符串 入口数据：x,y显示坐标 *p 要显示的字符串 fc 字的颜色 bc 字的背景色 sizey 字号 mode: 0非叠加模式 1叠加模式 返回值： 无******************************************************************************/void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode) while(*p!=\\0) LCD_ShowChar(x,y,*p,fc,bc,sizey,mode); x+=sizey/2; p++; /****************************************************************************** 函数说明：显示数字 入口数据：m底数，n指数 返回值： 无******************************************************************************/u32 mypow(u8 m,u8 n)\tu32 result=1; while(n--)result*=m;\treturn result;/****************************************************************************** 函数说明：显示整数变量 入口数据：x,y显示坐标 num 要显示整数变量 len 要显示的位数 fc 字的颜色 bc 字的背景色 sizey 字号 返回值： 无******************************************************************************/void LCD_ShowIntNum(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey) u8 t,temp;\tu8 enshow=0;\tu8 sizex=sizey/2;\tfor(t=0;tlen;t++) temp=(num/mypow(10,len-t-1))%10; if(enshow==0t(len-1)) if(temp==0) LCD_ShowChar(x+t*sizex,y, ,fc,bc,sizey,0); continue; else enshow=1; LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0); /****************************************************************************** 函数说明：显示两位小数变量 入口数据：x,y显示坐标 num 要显示小数变量 len 要显示的位数 fc 字的颜色 bc 字的背景色 sizey 字号 返回值： 无******************************************************************************/void LCD_ShowFloatNum1(u16 x,u16 y,float num,u8 len,u16 fc,u16 bc,u8 sizey) u8 t,temp,sizex;\tu16 num1;\tsizex=sizey/2;\tnum1=num*100;\tfor(t=0;tlen;t++) temp=(num1/mypow(10,len-t-1))%10; if(t==(len-2)) LCD_ShowChar(x+(len-2)*sizex,y,.,fc,bc,sizey,0); t++; len+=1; LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);\t/****************************************************************************** 函数说明：显示图片 入口数据：x,y起点坐标 length 图片长度 width 图片宽度 pic[] 图片数组 返回值： 无******************************************************************************/void LCD_ShowPicture(u16 x,u16 y,u16 length,u16 width,const u8 pic[])\tu16 i,j;\tu32 k=0;\tLCD_Address_Set(x,y,x+length-1,y+width-1);\tfor(i=0;ilength;i++) for(j=0;jwidth;j++) LCD_WR_DATA8(pic[k*2]); LCD_WR_DATA8(pic[k*2+1]); k++; lcdfont.h：LCD字库头文件#ifndef __LCDFONT_H#define __LCDFONT_H const unsigned char ascii_1206[][12]=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* ,0*/0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x04,0x00,0x00,/*!,1*/0x14,0x14,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,2*/0x00,0x00,0x0A,0x0A,0x1F,0x0A,0x0A,0x1F,0x0A,0x0A,0x00,0x00,/*#,3*/0x00,0x04,0x0E,0x15,0x05,0x06,0x0C,0x14,0x15,0x0E,0x04,0x00,/*$,4*/0x00,0x00,0x12,0x15,0x0D,0x15,0x2E,0x2C,0x2A,0x12,0x00,0x00,/*%,5*/0x00,0x00,0x04,0x0A,0x0A,0x36,0x15,0x15,0x29,0x16,0x00,0x00,/*,6*/0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,7*/0x10,0x08,0x08,0x04,0x04,0x04,0x04,0x04,0x08,0x08,0x10,0x00,/*(,8*/0x02,0x04,0x04,0x08,0x08,0x08,0x08,0x08,0x04,0x04,0x02,0x00,/*),9*/0x00,0x00,0x00,0x04,0x15,0x0E,0x0E,0x15,0x04,0x00,0x00,0x00,/**,10*/0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00,0x00,0x00,/*+,11*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x01,0x00,/*,,12*/0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,/*-,13*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,/*.,14*/0x00,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x01,0x00,/*/,15*/0x00,0x00,0x0E,0x11,0x11,0x11,0x11,0x11,0x11,0x0E,0x00,0x00,/*0,16*/0x00,0x00,0x04,0x06,0x04,0x04,0x04,0x04,0x04,0x0E,0x00,0x00,/*1,17*/0x00,0x00,0x0E,0x11,0x11,0x08,0x04,0x02,0x01,0x1F,0x00,0x00,/*2,18*/0x00,0x00,0x0E,0x11,0x10,0x0C,0x10,0x10,0x11,0x0E,0x00,0x00,/*3,19*/0x00,0x00,0x08,0x0C,0x0C,0x0A,0x09,0x1F,0x08,0x1C,0x00,0x00,/*4,20*/0x00,0x00,0x1F,0x01,0x01,0x0F,0x11,0x10,0x11,0x0E,0x00,0x00,/*5,21*/0x00,0x00,0x0C,0x12,0x01,0x0D,0x13,0x11,0x11,0x0E,0x00,0x00,/*6,22*/0x00,0x00,0x1E,0x10,0x08,0x08,0x04,0x04,0x04,0x04,0x00,0x00,/*7,23*/0x00,0x00,0x0E,0x11,0x11,0x0E,0x11,0x11,0x11,0x0E,0x00,0x00,/*8,24*/0x00,0x00,0x0E,0x11,0x11,0x19,0x16,0x10,0x09,0x06,0x00,0x00,/*9,25*/0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x00,0x00,/*:,26*/0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x04,0x00,/*;,27*/0x00,0x00,0x10,0x08,0x04,0x02,0x02,0x04,0x08,0x10,0x00,0x00,/*,28*/0x00,0x00,0x00,0x00,0x3F,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,/*=,29*/0x00,0x00,0x02,0x04,0x08,0x10,0x10,0x08,0x04,0x02,0x00,0x00,/*,30*/0x00,0x00,0x0E,0x11,0x11,0x08,0x04,0x04,0x00,0x04,0x00,0x00,/*?,31*/0x00,0x00,0x1C,0x22,0x29,0x2D,0x2D,0x1D,0x22,0x1C,0x00,0x00,/*@,32*/0x00,0x00,0x04,0x04,0x0C,0x0A,0x0A,0x1E,0x12,0x33,0x00,0x00,/*A,33*/0x00,0x00,0x0F,0x12,0x12,0x0E,0x12,0x12,0x12,0x0F,0x00,0x00,/*B,34*/0x00,0x00,0x1E,0x11,0x01,0x01,0x01,0x01,0x11,0x0E,0x00,0x00,/*C,35*/0x00,0x00,0x0F,0x12,0x12,0x12,0x12,0x12,0x12,0x0F,0x00,0x00,/*D,36*/0x00,0x00,0x1F,0x12,0x0A,0x0E,0x0A,0x02,0x12,0x1F,0x00,0x00,/*E,37*/0x00,0x00,0x1F,0x12,0x0A,0x0E,0x0A,0x02,0x02,0x07,0x00,0x00,/*F,38*/0x00,0x00,0x1C,0x12,0x01,0x01,0x39,0x11,0x12,0x0C,0x00,0x00,/*G,39*/0x00,0x00,0x33,0x12,0x12,0x1E,0x12,0x12,0x12,0x33,0x00,0x00,/*H,40*/0x00,0x00,0x1F,0x04,0x04,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,/*I,41*/0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x09,0x07,/*J,42*/0x00,0x00,0x37,0x12,0x0A,0x06,0x0A,0x12,0x12,0x37,0x00,0x00,/*K,43*/0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x22,0x3F,0x00,0x00,/*L,44*/0x00,0x00,0x3B,0x1B,0x1B,0x1B,0x15,0x15,0x15,0x35,0x00,0x00,/*M,45*/0x00,0x00,0x3B,0x12,0x16,0x16,0x1A,0x1A,0x12,0x17,0x00,0x00,/*N,46*/0x00,0x00,0x0E,0x11,0x11,0x11,0x11,0x11,0x11,0x0E,0x00,0x00,/*O,47*/0x00,0x00,0x0F,0x12,0x12,0x0E,0x02,0x02,0x02,0x07,0x00,0x00,/*P,48*/0x00,0x00,0x0E,0x11,0x11,0x11,0x11,0x17,0x19,0x0E,0x18,0x00,/*Q,49*/0x00,0x00,0x0F,0x12,0x12,0x0E,0x0A,0x12,0x12,0x37,0x00,0x00,/*R,50*/0x00,0x00,0x1E,0x11,0x01,0x06,0x08,0x10,0x11,0x0F,0x00,0x00,/*S,51*/0x00,0x00,0x1F,0x15,0x04,0x04,0x04,0x04,0x04,0x0E,0x00,0x00,/*T,52*/0x00,0x00,0x33,0x12,0x12,0x12,0x12,0x12,0x12,0x0C,0x00,0x00,/*U,53*/0x00,0x00,0x33,0x12,0x12,0x0A,0x0A,0x0C,0x04,0x04,0x00,0x00,/*V,54*/0x00,0x00,0x15,0x15,0x15,0x15,0x0E,0x0A,0x0A,0x0A,0x00,0x00,/*W,55*/0x00,0x00,0x1B,0x0A,0x0A,0x04,0x04,0x0A,0x0A,0x1B,0x00,0x00,/*X,56*/0x00,0x00,0x1B,0x0A,0x0A,0x0A,0x04,0x04,0x04,0x0E,0x00,0x00,/*Y,57*/0x00,0x00,0x1F,0x09,0x08,0x04,0x04,0x02,0x12,0x1F,0x00,0x00,/*Z,58*/0x1C,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x1C,0x00,/*[,59*/0x00,0x02,0x02,0x04,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x00,/*\\,60*/0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0E,0x00,/*],61*/0x04,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*^,62*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,/*_,63*/0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*`,64*/0x00,0x00,0x00,0x00,0x00,0x0C,0x12,0x1C,0x12,0x3C,0x00,0x00,/*a,65*/0x00,0x03,0x02,0x02,0x02,0x0E,0x12,0x12,0x12,0x0E,0x00,0x00,/*b,66*/0x00,0x00,0x00,0x00,0x00,0x1C,0x12,0x02,0x12,0x0C,0x00,0x00,/*c,67*/0x00,0x18,0x10,0x10,0x10,0x1C,0x12,0x12,0x12,0x3C,0x00,0x00,/*d,68*/0x00,0x00,0x00,0x00,0x00,0x0C,0x12,0x1E,0x02,0x1C,0x00,0x00,/*e,69*/0x00,0x18,0x24,0x04,0x04,0x1E,0x04,0x04,0x04,0x1E,0x00,0x00,/*f,70*/0x00,0x00,0x00,0x00,0x00,0x3C,0x12,0x0C,0x02,0x1C,0x22,0x1C,/*g,71*/0x00,0x03,0x02,0x02,0x02,0x0E,0x12,0x12,0x12,0x37,0x00,0x00,/*h,72*/0x00,0x04,0x04,0x00,0x00,0x06,0x04,0x04,0x04,0x0E,0x00,0x00,/*i,73*/0x00,0x08,0x08,0x00,0x00,0x0C,0x08,0x08,0x08,0x08,0x08,0x07,/*j,74*/0x00,0x03,0x02,0x02,0x02,0x1A,0x0A,0x06,0x0A,0x13,0x00,0x00,/*k,75*/0x00,0x07,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,/*l,76*/0x00,0x00,0x00,0x00,0x00,0x0F,0x15,0x15,0x15,0x15,0x00,0x00,/*m,77*/0x00,0x00,0x00,0x00,0x00,0x0F,0x12,0x12,0x12,0x37,0x00,0x00,/*n,78*/0x00,0x00,0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0C,0x00,0x00,/*o,79*/0x00,0x00,0x00,0x00,0x00,0x0F,0x12,0x12,0x12,0x0E,0x02,0x07,/*p,80*/0x00,0x00,0x00,0x00,0x00,0x1C,0x12,0x12,0x12,0x1C,0x10,0x38,/*q,81*/0x00,0x00,0x00,0x00,0x00,0x1B,0x06,0x02,0x02,0x07,0x00,0x00,/*r,82*/0x00,0x00,0x00,0x00,0x00,0x1E,0x02,0x0C,0x10,0x1E,0x00,0x00,/*s,83*/0x00,0x00,0x00,0x04,0x04,0x1E,0x04,0x04,0x04,0x1C,0x00,0x00,/*t,84*/0x00,0x00,0x00,0x00,0x00,0x1B,0x12,0x12,0x12,0x3C,0x00,0x00,/*u,85*/0x00,0x00,0x00,0x00,0x00,0x1B,0x0A,0x0A,0x04,0x04,0x00,0x00,/*v,86*/0x00,0x00,0x00,0x00,0x00,0x15,0x15,0x0E,0x0A,0x0A,0x00,0x00,/*w,87*/0x00,0x00,0x00,0x00,0x00,0x1B,0x0A,0x04,0x0A,0x1B,0x00,0x00,/*x,88*/0x00,0x00,0x00,0x00,0x00,0x33,0x12,0x12,0x0C,0x08,0x04,0x03,/*y,89*/0x00,0x00,0x00,0x00,0x00,0x1E,0x08,0x04,0x04,0x1E,0x00,0x00,/*z,90*/0x18,0x08,0x08,0x08,0x08,0x0C,0x08,0x08,0x08,0x08,0x18,0x00,/*,91*/0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,/*|,92*/0x06,0x04,0x04,0x04,0x04,0x08,0x04,0x04,0x04,0x04,0x06,0x00,/*,93*/0x16,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*~,94*/;const unsigned char ascii_1608[][16]=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* ,0*/0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00,/*!,1*/0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,2*/0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00,/*#,3*/0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08,/*$,4*/0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00,/*%,5*/0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00,/*,6*/0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,7*/0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00,/*(,8*/0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00,/*),9*/0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00,/**,10*/0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00,/*+,11*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03,/*,,12*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*-,13*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00,/*.,14*/0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,/*/,15*/0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,/*0,16*/0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*1,17*/0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00,/*2,18*/0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,/*3,19*/0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00,/*4,20*/0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,/*5,21*/0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00,/*6,22*/0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,/*7,23*/0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00,/*8,24*/0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00,/*9,25*/0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,/*:,26*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04,/*;,27*/0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00,/*,28*/0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,/*=,29*/0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,/*,30*/0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00,/*?,31*/0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00,/*@,32*/0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00,/*A,33*/0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,/*B,34*/0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00,/*C,35*/0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,/*D,36*/0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00,/*E,37*/0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00,/*F,38*/0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00,/*G,39*/0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*H,40*/0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*I,41*/0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F,/*J,42*/0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00,/*K,43*/0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00,/*L,44*/0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00,/*M,45*/0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00,/*N,46*/0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00,/*O,47*/0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00,/*P,48*/0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00,/*Q,49*/0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00,/*R,50*/0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00,/*S,51*/0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,/*T,52*/0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,/*U,53*/0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00,/*V,54*/0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00,/*W,55*/0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00,/*X,56*/0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,/*Y,57*/0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00,/*Z,58*/0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,/*[,59*/0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40,/*\\,60*/0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,/*],61*/0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*^,62*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,/*_,63*/0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*`,64*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00,/*a,65*/0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00,/*b,66*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00,/*c,67*/0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00,/*d,68*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00,/*e,69*/0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*f,70*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C,/*g,71*/0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*h,72*/0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*i,73*/0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E,/*j,74*/0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00,/*k,75*/0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*l,76*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00,/*m,77*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*n,78*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,/*o,79*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07,/*p,80*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0,/*q,81*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,/*r,82*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00,/*s,83*/0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00,/*t,84*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00,/*u,85*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00,/*v,86*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00,/*w,87*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00,/*x,88*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07,/*y,89*/0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00,/*z,90*/0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,/*,91*/0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,/*|,92*/0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00,/*,93*/0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*~,94*/; //节省空间 注释掉了不常用的大字字库const unsigned char ascii_2412[][48]=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* ,0*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*!,1*///0x00,0x00,0x00,0x00,0x60,0x06,0x60,0x06,0x30,0x03,0x98,0x01,0x88,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,2*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x02,0x10,0x02,0x10,0x02,0x10,0x02,0xFE,0x07,0xFE,0x07,0x08,0x02,0x08,0x01,0x08,0x01,0x08,0x01,0x08,0x01,0xFE,0x07,0xFE,0x07,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*#,3*///0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0xF0,0x01,0x58,0x03,0x4C,0x03,0xCC,0x03,0x4C,0x00,0x58,0x00,0x70,0x00,0xE0,0x00,0xC0,0x01,0xC0,0x01,0x40,0x03,0x4C,0x03,0x5C,0x03,0x4C,0x03,0x48,0x01,0xF0,0x00,0x40,0x00,0x40,0x00,0x00,0x00,/*$,4*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x01,0x0A,0x01,0x91,0x00,0x91,0x00,0x91,0x00,0x51,0x00,0x51,0x00,0x3A,0x00,0xAE,0x03,0xA0,0x02,0x50,0x04,0x50,0x04,0x48,0x04,0x48,0x04,0x48,0x04,0x84,0x02,0x84,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*%,5*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x2C,0x00,0x98,0x07,0x1C,0x01,0x1A,0x01,0x33,0x01,0x33,0x01,0x63,0x01,0xE3,0x00,0xC3,0x08,0xC6,0x09,0x3C,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*,6*///0x00,0x00,0x00,0x00,0x0C,0x00,0x1C,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,7*///0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x00,/*(,8*///0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00,0x00,/*),9*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xC0,0x00,0x40,0x00,0x46,0x0C,0x4E,0x0F,0xD0,0x01,0xF0,0x01,0x5E,0x0F,0x46,0x0C,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/**,10*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0xFE,0x0F,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*+,11*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x1C,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,/*,,12*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*-,13*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*.,14*///0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x00,0x00,/*/,15*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0x0C,0x03,0x98,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*0,16*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*1,17*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x84,0x01,0x02,0x03,0x06,0x03,0x06,0x03,0x00,0x03,0x00,0x01,0x80,0x01,0xC0,0x00,0x60,0x00,0x20,0x00,0x10,0x00,0x08,0x02,0x04,0x02,0x06,0x02,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*2,18*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xC6,0x00,0x86,0x01,0x86,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,0x70,0x00,0x80,0x01,0x00,0x01,0x00,0x03,0x00,0x03,0x06,0x03,0x06,0x03,0x86,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*3,19*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0xC0,0x01,0xA0,0x01,0xA0,0x01,0x90,0x01,0x88,0x01,0x88,0x01,0x84,0x01,0x82,0x01,0xFE,0x0F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*4,20*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0xF4,0x00,0x8C,0x01,0x04,0x03,0x00,0x03,0x00,0x03,0x06,0x03,0x06,0x03,0x82,0x01,0x84,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*5,21*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x18,0x03,0x0C,0x03,0x0C,0x00,0x04,0x00,0x06,0x00,0xE6,0x01,0x16,0x03,0x0E,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x04,0x06,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*6,22*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x07,0x0C,0x06,0x04,0x02,0x04,0x01,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*7,23*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x02,0x1C,0x03,0xF0,0x00,0xC8,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*8,24*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x0C,0x01,0x0C,0x03,0x06,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x8C,0x06,0x78,0x06,0x00,0x06,0x00,0x03,0x00,0x03,0x0C,0x01,0x8C,0x01,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*9,25*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*:,26*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0x20,0x00,0x20,0x00,/*;,27*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,/*,28*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*=,29*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,30*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x06,0x04,0x0C,0x04,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x07,0x80,0x01,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*?,31*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x18,0x03,0x0C,0x02,0xCC,0x05,0x64,0x05,0x66,0x05,0xA6,0x05,0xB6,0x04,0xB6,0x04,0xB6,0x04,0xB6,0x04,0xB6,0x02,0xE4,0x01,0x0C,0x04,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*@,32*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x50,0x00,0xD0,0x00,0x90,0x00,0x90,0x00,0x88,0x00,0x88,0x01,0x08,0x01,0xF8,0x01,0x04,0x03,0x04,0x03,0x04,0x02,0x02,0x02,0x02,0x06,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*A,33*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x8C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x8C,0x01,0xFC,0x00,0x0C,0x03,0x0C,0x02,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0xFE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*B,34*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x03,0x0C,0x06,0x0C,0x04,0x04,0x04,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x04,0x0C,0x04,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*C,35*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x8C,0x01,0x0C,0x03,0x0C,0x03,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0x0C,0x03,0x8C,0x01,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*D,36*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x03,0x06,0x03,0x06,0x04,0x06,0x04,0x06,0x00,0x86,0x00,0x86,0x00,0xFE,0x00,0x86,0x00,0x86,0x00,0x86,0x00,0x06,0x00,0x06,0x04,0x06,0x04,0x06,0x02,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*E,37*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x03,0x06,0x03,0x06,0x04,0x06,0x04,0x06,0x00,0x86,0x00,0x86,0x00,0xFE,0x00,0x86,0x00,0x86,0x00,0x86,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*F,38*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x18,0x01,0x0C,0x02,0x0C,0x02,0x04,0x02,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0xC6,0x0F,0x06,0x03,0x06,0x03,0x0C,0x03,0x0C,0x03,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*G,39*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFE,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*H,40*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*I,41*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x07,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC6,0x00,0x66,0x00,0x3C,0x00,/*J,42*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x03,0x86,0x01,0xC6,0x00,0x46,0x00,0x26,0x00,0x16,0x00,0x36,0x00,0x2E,0x00,0x6E,0x00,0x46,0x00,0xC6,0x00,0x86,0x00,0x86,0x01,0x06,0x01,0x06,0x03,0x8F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*K,43*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x04,0x06,0x04,0x06,0x02,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*L,44*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x86,0x03,0x86,0x03,0x8E,0x03,0x8E,0x03,0x4E,0x03,0x4E,0x03,0x4A,0x03,0x5A,0x03,0x5A,0x03,0x3A,0x03,0x32,0x03,0x32,0x03,0x32,0x03,0x12,0x03,0x87,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*M,45*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8E,0x0F,0x0C,0x02,0x1C,0x02,0x1C,0x02,0x34,0x02,0x34,0x02,0x64,0x02,0x64,0x02,0x44,0x02,0xC4,0x02,0x84,0x02,0x84,0x03,0x84,0x03,0x04,0x03,0x04,0x03,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,/*N,46*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x02,0x0C,0x03,0x98,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*O,47*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x06,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x86,0x03,0xFE,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*P,48*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x76,0x06,0x4C,0x02,0xCC,0x03,0x98,0x01,0xF0,0x00,0x80,0x07,0x00,0x03,0x00,0x00,/*Q,49*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x01,0x06,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x03,0xFE,0x00,0x46,0x00,0xC6,0x00,0x86,0x00,0x86,0x01,0x06,0x03,0x06,0x03,0x06,0x06,0x0F,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*R,50*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x02,0x0C,0x03,0x06,0x02,0x06,0x02,0x06,0x00,0x0E,0x00,0x3C,0x00,0xF8,0x00,0xE0,0x03,0x80,0x03,0x00,0x07,0x02,0x06,0x02,0x06,0x06,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*S,51*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x62,0x04,0x61,0x08,0x61,0x08,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*T,52*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x18,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*U,53*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x07,0x06,0x02,0x04,0x01,0x04,0x01,0x0C,0x01,0x0C,0x01,0x88,0x00,0x88,0x00,0x98,0x00,0x98,0x00,0x50,0x00,0x50,0x00,0x70,0x00,0x30,0x00,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*V,54*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF7,0x0E,0x62,0x04,0x42,0x04,0x46,0x04,0x46,0x04,0x64,0x02,0x64,0x02,0xE4,0x02,0xE4,0x02,0x9C,0x02,0x9C,0x01,0x98,0x01,0x98,0x01,0x88,0x01,0x88,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*W,55*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x0C,0x01,0x08,0x01,0x18,0x01,0x90,0x00,0xB0,0x00,0x60,0x00,0x20,0x00,0x60,0x00,0x60,0x00,0xD0,0x00,0x90,0x00,0x88,0x01,0x08,0x01,0x04,0x03,0x8E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*X,56*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x06,0x04,0x04,0x02,0x0C,0x02,0x08,0x01,0x18,0x01,0xB8,0x00,0xB0,0x00,0x70,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*Y,57*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x07,0x0C,0x02,0x06,0x03,0x02,0x01,0x80,0x01,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x18,0x00,0x08,0x04,0x0C,0x04,0x04,0x02,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*Z,58*///0x00,0x00,0x00,0x00,0xE0,0x03,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xE0,0x03,0x00,0x00,/*[,59*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,/*\\,60*///0x00,0x00,0x00,0x00,0x7C,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x7C,0x00,0x00,0x00,/*],61*///0x00,0x00,0x60,0x00,0x90,0x00,0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*^,62*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F,/*_,63*///0x00,0x00,0x00,0x00,0x18,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*`,64*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x01,0x0C,0x03,0x0C,0x03,0x00,0x03,0xE0,0x03,0x1C,0x03,0x0E,0x03,0x06,0x03,0x06,0x03,0x8E,0x0B,0x7C,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*a,65*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0xCC,0x01,0x3C,0x03,0x1C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x02,0x1C,0x03,0xE4,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*b,66*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x8C,0x01,0x8C,0x01,0x86,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x02,0x0C,0x02,0x0C,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*c,67*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xC0,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x78,0x03,0x8C,0x03,0x0C,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x04,0x03,0x8C,0x07,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*d,68*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x18,0x03,0x08,0x02,0x0C,0x06,0x0C,0x06,0xFC,0x07,0x0C,0x00,0x0C,0x00,0x18,0x04,0x18,0x02,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*e,69*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x60,0x06,0x30,0x06,0x30,0x00,0x30,0x00,0xFE,0x01,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*f,70*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x07,0xD8,0x06,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x98,0x01,0xF8,0x00,0x0C,0x00,0xFC,0x00,0xCC,0x03,0x06,0x03,0x06,0x03,0x8E,0x03,0xF8,0x00,/*g,71*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0xEC,0x01,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*h,72*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*i,73*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0xF0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xCC,0x00,0x7C,0x00,/*j,74*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x8C,0x03,0x8C,0x00,0x8C,0x00,0x4C,0x00,0x6C,0x00,0x5C,0x00,0x8C,0x00,0x8C,0x01,0x0C,0x01,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*k,75*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*l,76*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0x07,0xEE,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*m,77*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x01,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*n,78*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0x0C,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*o,79*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x01,0x1C,0x03,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0x1C,0x03,0xEC,0x01,0x0C,0x00,0x0C,0x00,0x3E,0x00,/*p,80*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x02,0x8C,0x03,0x0C,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x04,0x03,0x8C,0x03,0x78,0x03,0x00,0x03,0x00,0x03,0xC0,0x07,/*q,81*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9F,0x03,0x58,0x06,0x38,0x06,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*r,82*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x03,0x1C,0x03,0x0C,0x02,0x0C,0x02,0x38,0x00,0xF0,0x00,0xC0,0x03,0x04,0x03,0x04,0x03,0x8C,0x03,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*s,83*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x30,0x00,0x30,0x00,0xFE,0x01,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x02,0x30,0x02,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*t,84*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x8E,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9C,0x07,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*u,85*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x0C,0x02,0x08,0x01,0x08,0x01,0x18,0x01,0x90,0x00,0xB0,0x00,0xB0,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*v,86*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF7,0x0E,0x62,0x04,0x46,0x04,0x64,0x02,0x64,0x02,0xEC,0x02,0x9C,0x01,0x98,0x01,0x98,0x01,0x98,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*w,87*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x07,0x18,0x01,0x10,0x01,0xB0,0x00,0x60,0x00,0x60,0x00,0xE0,0x00,0x90,0x00,0x08,0x01,0x08,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*x,88*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x08,0x01,0x08,0x01,0x08,0x01,0x90,0x00,0x90,0x00,0xB0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x24,0x00,0x1C,0x00,/*y,89*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x01,0x84,0x01,0xC4,0x00,0x44,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x18,0x02,0x08,0x02,0x0C,0x03,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*z,90*///0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x03,0x00,0x00,/*,91*///0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,/*|,92*///0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x0C,0x00,0x00,0x00,/*,93*///0x00,0x00,0x1C,0x00,0x22,0x04,0xC2,0x04,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*~,94*/;//节省空间 注释掉了不常用的大字字库const unsigned char ascii_3216[][64]=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/* ,0*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*!,1*///0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x1C,0xE0,0x1C,0xF0,0x1E,0x70,0x0E,0x38,0x07,0x18,0x03,0x08,0x01,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,2*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0xFE,0x7F,0xFE,0x7F,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0xFE,0x7F,0xFE,0x7F,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*#,3*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0xC0,0x07,0x60,0x19,0x10,0x31,0x18,0x31,0x18,0x39,0x18,0x39,0x38,0x01,0x70,0x01,0xE0,0x01,0xC0,0x03,0x80,0x07,0x00,0x0F,0x00,0x1D,0x00,0x39,0x00,0x31,0x1C,0x31,0x1C,0x31,0x0C,0x31,0x0C,0x11,0x18,0x0D,0xE0,0x07,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,/*$,4*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x10,0x36,0x18,0x63,0x08,0x63,0x0C,0x63,0x04,0x63,0x04,0x63,0x02,0x63,0x02,0x63,0x01,0x36,0x1D,0x9C,0x37,0x80,0x22,0x80,0x63,0x40,0x63,0x40,0x63,0x20,0x63,0x20,0x63,0x30,0x63,0x10,0x22,0x18,0x36,0x08,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*%,5*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x00,0xCC,0x00,0x78,0x00,0x18,0x3E,0x1C,0x08,0x36,0x08,0x32,0x08,0x63,0x04,0x63,0x04,0xC3,0x04,0xC3,0x03,0x83,0x43,0x06,0x43,0x8E,0x26,0x78,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,6*///0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x10,0x00,0x0C,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,7*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x03,0x00,0x03,0x00,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,/*(,8*///0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00,0x00,/*),9*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0x80,0x03,0x00,0x01,0x1C,0x71,0x3C,0x79,0x78,0x3D,0xC0,0x07,0x00,0x01,0xC0,0x07,0x78,0x3D,0x3C,0x79,0x1C,0x71,0x00,0x01,0x80,0x03,0x80,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/**,10*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0xFC,0x7F,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*+,11*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x10,0x00,0x0C,0x00,0x06,0x00,/*,,12*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*-,13*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x3C,0x00,0x3C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*.,14*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x10,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x80,0x01,0x80,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x10,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x00,0x00,0x00,0x00,/*/,15*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x60,0x0C,0x30,0x18,0x18,0x30,0x18,0x30,0x18,0x20,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x20,0x18,0x30,0x18,0x30,0x30,0x18,0x60,0x0C,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*0,16*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x03,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*1,17*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x10,0x1C,0x08,0x18,0x04,0x30,0x04,0x30,0x0C,0x30,0x0C,0x30,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x20,0x10,0x20,0x08,0x20,0x04,0x30,0xFC,0x1F,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*2,18*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x0E,0x0C,0x0C,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x00,0x18,0x00,0x0C,0x00,0x06,0xC0,0x03,0x00,0x0E,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x10,0x0C,0x18,0x18,0x0C,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*3,19*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0E,0x00,0x0E,0x00,0x0F,0x80,0x0E,0x80,0x0E,0x40,0x0E,0x60,0x0E,0x20,0x0E,0x10,0x0E,0x10,0x0E,0x08,0x0E,0x04,0x0E,0x04,0x0E,0xFE,0x7F,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0xC0,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*4,20*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x3F,0xF0,0x3F,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0xC8,0x07,0x28,0x0C,0x18,0x18,0x08,0x10,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x0C,0x30,0x0C,0x30,0x04,0x18,0x04,0x18,0x08,0x0C,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*5,21*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0xC0,0x10,0x20,0x30,0x10,0x30,0x18,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x8C,0x0F,0x6C,0x18,0x3C,0x30,0x1C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x60,0x18,0x20,0x30,0x30,0x60,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*6,22*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x3F,0xF8,0x3F,0x1C,0x10,0x0C,0x08,0x04,0x08,0x04,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*7,23*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x30,0x0C,0x18,0x18,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x1C,0x30,0x38,0x18,0x70,0x08,0xE0,0x07,0xB0,0x07,0x18,0x0E,0x0C,0x1C,0x06,0x38,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x30,0x0C,0x18,0x18,0x0C,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*8,24*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x04,0x0C,0x08,0x0C,0x18,0x06,0x10,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x38,0x0C,0x3C,0x18,0x36,0xF0,0x31,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x18,0x0C,0x0C,0x0C,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*9,25*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*:,26*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x00,0x00,/*;,27*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x06,0x00,0x03,0x80,0x01,0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x00,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,28*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*=,29*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x60,0x00,0xC0,0x00,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x06,0x00,0x03,0x80,0x01,0xC0,0x00,0x60,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*,30*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x30,0x18,0x08,0x30,0x08,0x60,0x0C,0x60,0x1C,0x60,0x1C,0x60,0x1C,0x60,0x00,0x30,0x00,0x1C,0x00,0x06,0x00,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*?,31*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x60,0x18,0x10,0x30,0x18,0x20,0x0C,0x2F,0x8C,0x4D,0x86,0x4C,0xC6,0x4C,0xC6,0x4C,0x66,0x4C,0x66,0x44,0x66,0x44,0x66,0x26,0x66,0x26,0x66,0x15,0xCC,0x1C,0x0C,0x40,0x08,0x20,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*@,32*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0x40,0x01,0x60,0x03,0x20,0x03,0x20,0x03,0x20,0x03,0x30,0x06,0x10,0x06,0x10,0x06,0x10,0x06,0xF8,0x0F,0x08,0x0C,0x08,0x0C,0x08,0x0C,0x0C,0x0C,0x04,0x18,0x04,0x18,0x06,0x18,0x1F,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*A,33*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x18,0x1C,0x18,0x38,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x0C,0xF8,0x07,0x18,0x18,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x18,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*B,34*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x27,0x60,0x38,0x10,0x30,0x18,0x20,0x0C,0x40,0x0C,0x40,0x04,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x0C,0x40,0x0C,0x40,0x0C,0x20,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*C,35*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x18,0x0E,0x18,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x18,0x0E,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*D,36*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x3F,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x40,0x18,0x00,0x18,0x08,0x18,0x08,0x18,0x0C,0xF8,0x0F,0x18,0x0C,0x18,0x08,0x18,0x08,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x40,0x18,0x40,0x18,0x20,0x18,0x30,0xFE,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*E,37*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x18,0x70,0x18,0x40,0x18,0xC0,0x18,0x80,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x18,0xF8,0x1F,0x18,0x18,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*F,38*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x13,0x70,0x1C,0x10,0x10,0x18,0x10,0x0C,0x20,0x0C,0x20,0x04,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0xFC,0x06,0x30,0x06,0x30,0x0C,0x30,0x0C,0x30,0x18,0x30,0x18,0x30,0x30,0x08,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*G,39*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x7E,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0xFC,0x1F,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x3F,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*H,40*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*I,41*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x7F,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x0E,0x06,0x0E,0x03,0x8E,0x01,0xFC,0x00,/*J,42*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x18,0x18,0x08,0x18,0x04,0x18,0x06,0x18,0x02,0x18,0x01,0x98,0x01,0x98,0x01,0xD8,0x01,0xB8,0x03,0x38,0x03,0x18,0x07,0x18,0x06,0x18,0x0E,0x18,0x0C,0x18,0x1C,0x18,0x18,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*K,43*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x40,0x18,0x40,0x18,0x20,0x18,0x30,0xFE,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*L,44*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x3C,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x36,0x74,0x32,0x64,0x32,0x64,0x32,0x64,0x32,0x64,0x31,0xC4,0x31,0xC4,0x31,0xC4,0x31,0xC4,0x30,0xC4,0x30,0x84,0x30,0x9F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*M,45*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x7C,0x1C,0x10,0x3C,0x10,0x34,0x10,0x34,0x10,0x74,0x10,0x64,0x10,0xE4,0x10,0xC4,0x10,0xC4,0x11,0x84,0x11,0x84,0x13,0x04,0x13,0x04,0x17,0x04,0x16,0x04,0x1E,0x04,0x1C,0x04,0x1C,0x04,0x1C,0x04,0x18,0x1F,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*N,46*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x30,0x0C,0x18,0x18,0x08,0x10,0x0C,0x30,0x0C,0x30,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x0C,0x20,0x0C,0x30,0x08,0x10,0x18,0x18,0x30,0x0C,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*O,47*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0x18,0x18,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x18,0xF8,0x0F,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*P,48*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x30,0x0C,0x18,0x18,0x0C,0x10,0x0C,0x30,0x0C,0x20,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0xE4,0x61,0x2C,0x33,0x1C,0x32,0x18,0x16,0x30,0x0E,0xC0,0x07,0x00,0x4C,0x00,0x7C,0x00,0x38,0x00,0x00,0x00,0x00,/*Q,49*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x18,0x1C,0x18,0x38,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x0C,0xF8,0x07,0x98,0x03,0x18,0x03,0x18,0x07,0x18,0x06,0x18,0x06,0x18,0x0E,0x18,0x0C,0x18,0x0C,0x18,0x1C,0x18,0x18,0x7E,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*R,50*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x27,0x30,0x38,0x18,0x30,0x0C,0x20,0x0C,0x20,0x0C,0x00,0x0C,0x00,0x18,0x00,0x78,0x00,0xE0,0x03,0x80,0x0F,0x00,0x1E,0x00,0x38,0x00,0x70,0x00,0x60,0x04,0x60,0x04,0x60,0x08,0x60,0x18,0x30,0x38,0x18,0xC8,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*S,51*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3F,0x8C,0x21,0x84,0x61,0x82,0x41,0x82,0x41,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*T,52*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x7C,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x08,0x08,0x38,0x04,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*U,53*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0xF8,0x18,0x20,0x18,0x20,0x18,0x20,0x30,0x10,0x30,0x10,0x30,0x10,0x30,0x10,0x60,0x08,0x60,0x08,0x60,0x08,0xE0,0x0C,0xC0,0x04,0xC0,0x04,0xC0,0x04,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*V,54*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0xF3,0x86,0x61,0x86,0x21,0x86,0x21,0x8C,0x21,0x0C,0x21,0x8C,0x23,0x8C,0x13,0x8C,0x13,0x8C,0x13,0x4C,0x13,0x58,0x12,0x58,0x16,0x58,0x0E,0x38,0x0E,0x38,0x0E,0x38,0x0E,0x30,0x0C,0x10,0x04,0x10,0x04,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*W,55*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3E,0x18,0x08,0x38,0x08,0x30,0x04,0x30,0x04,0x70,0x02,0x60,0x02,0xE0,0x01,0xC0,0x01,0xC0,0x01,0x80,0x01,0x80,0x03,0x40,0x03,0x40,0x07,0x20,0x06,0x20,0x06,0x10,0x0C,0x10,0x0C,0x08,0x18,0x08,0x18,0x3E,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*X,56*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x1C,0x10,0x18,0x10,0x18,0x08,0x30,0x08,0x30,0x0C,0x70,0x04,0x60,0x04,0x60,0x02,0xC0,0x02,0xC0,0x02,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*Y,57*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x3F,0x18,0x18,0x08,0x18,0x04,0x0C,0x04,0x0E,0x00,0x06,0x00,0x07,0x00,0x03,0x80,0x03,0x80,0x01,0xC0,0x01,0xC0,0x00,0xE0,0x00,0x60,0x00,0x70,0x00,0x30,0x00,0x38,0x20,0x18,0x20,0x1C,0x10,0x0C,0x18,0xFE,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*Z,58*///0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x3F,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0xC0,0x3F,0x00,0x00,0x00,0x00,/*[,59*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x18,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x00,/*\\,60*///0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0xFC,0x03,0x00,0x00,0x00,0x00,/*],61*///0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x07,0xC0,0x06,0x20,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*^,62*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,/*_,63*///0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xC0,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*`,64*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x03,0x18,0x06,0x0C,0x0C,0x0C,0x0C,0x00,0x0C,0x80,0x0F,0x70,0x0C,0x1C,0x0C,0x0C,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x4C,0x0C,0x4F,0xF8,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*a,65*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x0F,0xD8,0x18,0x38,0x30,0x38,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x20,0x38,0x30,0x78,0x18,0xC8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*b,66*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x70,0x0C,0x18,0x18,0x18,0x18,0x0C,0x18,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x20,0x18,0x20,0x18,0x10,0x30,0x08,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*c,67*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0xE0,0x1B,0x30,0x1C,0x18,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x08,0x18,0x18,0x1C,0x30,0x7A,0xE0,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*d,68*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x30,0x0C,0x18,0x18,0x08,0x10,0x0C,0x30,0x0C,0x30,0xFC,0x3F,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x18,0x20,0x18,0x10,0x70,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*e,69*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x80,0xC3,0x80,0xC0,0xC0,0xC0,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xFC,0x1F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xF8,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*f,70*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x77,0x30,0x6C,0x10,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x10,0x18,0x30,0x0C,0xF0,0x07,0x18,0x00,0x18,0x00,0xF0,0x0F,0xF0,0x3F,0x08,0x70,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x38,0x38,0xE0,0x0F,/*g,71*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x98,0x0F,0xD8,0x18,0x38,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*h,72*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x80,0x03,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*i,73*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x80,0x1F,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x18,0x0C,0x18,0x06,0xF0,0x03,/*j,74*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x3E,0x18,0x0C,0x18,0x06,0x18,0x03,0x18,0x01,0x98,0x01,0xD8,0x01,0x38,0x03,0x18,0x07,0x18,0x06,0x18,0x0C,0x18,0x1C,0x18,0x18,0x7E,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*k,75*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*l,76*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0xEE,0x1C,0x9C,0x33,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0xDE,0x7B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*m,77*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x0F,0xD8,0x18,0x38,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*n,78*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x70,0x1C,0x10,0x30,0x18,0x30,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x30,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*o,79*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x9E,0x0F,0x58,0x18,0x38,0x30,0x18,0x20,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x38,0x30,0x78,0x18,0x98,0x07,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,/*p,80*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x23,0x30,0x3C,0x18,0x38,0x18,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x08,0x30,0x18,0x38,0x30,0x3C,0xE0,0x33,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFC,/*q,81*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x7E,0x3C,0x60,0x66,0x60,0x61,0xE0,0x00,0xE0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*r,82*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x27,0x30,0x38,0x18,0x30,0x18,0x20,0x18,0x00,0x70,0x00,0xE0,0x03,0x80,0x0F,0x00,0x1C,0x04,0x30,0x04,0x30,0x0C,0x30,0x1C,0x18,0xEC,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*s,83*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xC0,0x00,0xE0,0x00,0xFC,0x1F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x20,0xC0,0x20,0x80,0x11,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*t,84*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x1E,0x3C,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x38,0x30,0xF4,0xE0,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*u,85*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3C,0x18,0x18,0x18,0x08,0x38,0x08,0x30,0x04,0x30,0x04,0x70,0x02,0x60,0x02,0x60,0x02,0xE0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*v,86*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0xF7,0x8E,0x63,0x0C,0x23,0x8C,0x23,0x8C,0x23,0x98,0x13,0x98,0x13,0x58,0x16,0x58,0x16,0x70,0x0E,0x70,0x0E,0x70,0x0E,0x20,0x04,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*w,87*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3E,0x70,0x08,0x70,0x04,0xE0,0x04,0xC0,0x02,0xC0,0x01,0x80,0x03,0x80,0x03,0x40,0x07,0x60,0x06,0x20,0x0C,0x10,0x0C,0x18,0x18,0x3E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*x,88*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x18,0x18,0x08,0x30,0x08,0x30,0x08,0x30,0x04,0x60,0x04,0x60,0x04,0xC0,0x02,0xC0,0x02,0xC0,0x02,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x4C,0x00,0x3C,0x00,/*y,89*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x1F,0x0C,0x0C,0x04,0x0E,0x04,0x06,0x00,0x03,0x80,0x03,0x80,0x01,0xC0,0x00,0xE0,0x00,0x70,0x20,0x30,0x20,0x38,0x30,0x1C,0x18,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*z,90*///0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x02,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x30,0x00,0x00,/*,91*///0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,/*|,92*///0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x0C,0x00,0x00,0x00,/*,93*///0x00,0x00,0x38,0x00,0xC4,0x00,0x86,0x40,0x02,0x61,0x00,0x22,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*~,94*/;typedef struct unsigned char Index[2]; unsigned char Msk[24];typFNT_GB12; const typFNT_GB12 tfont12[]=电,0x10,0x00,0x10,0x00,0xFF,0x01,0x11,0x01,0x11,0x01,0xFF,0x01,0x11,0x01,0x11,0x01,0xFF,0x01,0x11,0x04,0x10,0x04,0xE0,0x07,/*电,3*/子,0x00,0x00,0xFC,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0xFF,0x07,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x38,0x00,/*子,4*/;typedef struct unsigned char Index[2]; unsigned char Msk[32];typFNT_GB16; const typFNT_GB16 tfont16[]=电,0x80,0x00,0x80,0x00,0x80,0x00,0xFC,0x1F,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x1F,0x84,0x50,0x80,0x40,0x80,0x40,0x00,0x7F,/*电,3*/子,0x00,0x00,0xFE,0x1F,0x00,0x08,0x00,0x04,0x00,0x02,0x80,0x01,0x80,0x00,0xFF,0x7F,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00,/*子,4*/; typedef struct unsigned char Index[2]; unsigned char Msk[72];typFNT_GB24; const typFNT_GB24 tfont24[]=电,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0xF0,0xFF,0x0F,0x10,0x08,0x04,0x10,0x08,0x04,0x10,0x08,0x04,0x10,0x08,0x04,0xF0,0xFF,0x07,0x10,0x08,0x04,0x10,0x08,0x04,0x10,0x08,0x04,0x10,0x08,0x04,0xF0,0xFF,0x07,0x10,0x08,0x00,0x00,0x08,0x10,0x00,0x08,0x10,0x00,0x08,0x20,0x00,0x18,0x30,0x00,0xF0,0x1F,0x00,0x00,0x00,/*电,3*/子,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xF0,0xFF,0x0F,0x00,0x00,0x06,0x00,0x00,0x01,0x00,0xC0,0x00,0x00,0x28,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x30,0xFE,0xFF,0x7F,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x1F,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,/*子,4*/;typedef struct unsigned char Index[2]; unsigned char Msk[128];typFNT_GB32; const typFNT_GB32 tfont32[]=电,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0xE0,0xFF,0xFF,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0xE0,0xFF,0xFF,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0x60,0xC0,0x00,0x03,0xE0,0xFF,0xFF,0x03,0x60,0xC0,0x00,0x01,0x60,0xC0,0x00,0x00,0x00,0xC0,0x00,0x08,0x00,0xC0,0x00,0x10,0x00,0xC0,0x00,0x10,0x00,0xC0,0x00,0x18,0x00,0xC0,0x01,0x38,0x00,0x80,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*电,3*/子,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0xFF,0xFF,0x07,0x00,0x00,0x80,0x07,0x00,0x00,0xC0,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x80,0x03,0x00,0x00,0x80,0x03,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x08,0x00,0x80,0x01,0x1C,0xFC,0xFF,0xFF,0x3F,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0xFC,0x01,0x00,0x00,0xE0,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,/*子,4*/;#endif pic.h：图片头文件#ifndef __PIC_H#define __PIC_Hconst unsigned char gImage_1[3200] = /* 0X10,0X10,0X00,0X28,0X00,0X28,0X01,0X1B, */0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBE,0XFF,0XFF,0XFF,0XDE,0XC6,0X38,0X8C,0X92,0X6B,0X8E,0X6B,0X6E,0X7C,0X10,0XAD,0X96,0XE7,0X3C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X5D,0X9D,0X15,0X63,0X4F,0X42,0X6C,0X32,0X0A,0X29,0X88,0X19,0X46,0X19,0X25,0X21,0X45,0X31,0XE8,0X6B,0X8E,0XC6,0X38,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA5,0X36,0X53,0X10,0X4B,0X10,0X53,0X51,0X4B,0X0F,0X3A,0X6C,0X31,0XE9,0X21,0X67,0X19,0X25,0X10,0XE4,0X08,0XA3,0X00,0X62,0X08,0X83,0X52,0XCB,0XD6,0X9A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0X3C,0X63,0X70,0X63,0XB3,0X7C,0XB8,0X63,0XF5,0X43,0X11,0X32,0X4D,0X29,0XEA,0X21,0X88,0X19,0X26,0X19,0X05,0X19,0X05,0X11,0X04,0X11,0X04,0X10,0XE4,0X00,0X83,0X08,0XA3,0X8C,0X72,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0XDB,0X3A,0X4B,0X42,0XF0,0X6C,0X35,0X4B,0X54,0X32,0XB1,0X2A,0X2E,0X21,0XEB,0X21,0XA9,0X19,0X67,0X19,0X05,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X19,0X05,0X10,0XE4,0X00,0X42,0X73,0XAF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X5D,0X32,0X09,0X32,0X4C,0X4B,0X10,0X32,0X8F,0X2A,0X4F,0X2A,0X2E,0X19,0XCC,0X19,0X89,0X21,0X89,0X19,0X47,0X19,0X05,0X11,0X04,0X11,0X04,0X10,0XC4,0X10,0XC4,0X11,0X04,0X11,0X04,0X11,0X04,0X10,0XE4,0X00,0X42,0X84,0X31,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X52,0XEC,0X19,0X47,0X32,0X4C,0X2A,0X0B,0X21,0XEC,0X21,0XEC,0X22,0X0C,0X5B,0X91,0X4A,0XEE,0X11,0X06,0X19,0X26,0X19,0X04,0X10,0XE4,0X10,0XE4,0X29,0XA7,0X21,0X66,0X08,0XA3,0X19,0X05,0X11,0X04,0X11,0X04,0X10,0XE4,0X00,0X82,0XBD,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA5,0X35,0X08,0X83,0X21,0X88,0X21,0X88,0X21,0X89,0X21,0XAA,0X21,0X8A,0X42,0X6B,0X8C,0X71,0XFF,0XFF,0X8C,0X72,0X08,0X83,0X11,0X04,0X08,0XC4,0X42,0X29,0XDE,0XFB,0XEF,0X5D,0X5A,0XEC,0X08,0X83,0X11,0X04,0X11,0X04,0X11,0X04,0X08,0X83,0X31,0XE8,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBE,0X31,0XC7,0X10,0XC4,0X19,0X25,0X19,0X26,0X19,0X47,0X19,0X47,0X29,0XA8,0X52,0X8A,0X4A,0X28,0XAD,0X55,0XFF,0XFF,0X31,0XE8,0X08,0XA3,0X19,0X05,0X6B,0X4D,0X6B,0X4D,0XFF,0XFF,0XEF,0X7D,0X21,0X45,0X10,0XC4,0X11,0X04,0X11,0X04,0X11,0X04,0X00,0X62,0XAD,0X76,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB5,0X96,0X00,0X62,0X11,0X04,0X19,0X04,0X11,0X05,0X19,0X05,0X08,0XC4,0X4A,0X8B,0XB5,0XB6,0XEF,0X5D,0XBD,0XF7,0XFF,0XFF,0X6B,0X8E,0X00,0X62,0X42,0X29,0X5A,0XAA,0X42,0X08,0XFF,0XFF,0XFF,0XFF,0X52,0XCC,0X08,0X83,0X11,0X04,0X11,0X04,0X11,0X04,0X08,0XA3,0X52,0XAD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0X1C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X63,0X4E,0X00,0X62,0X11,0X04,0X11,0X04,0X11,0X04,0X10,0XE4,0X00,0X62,0X63,0X8E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X73,0XCF,0X00,0X01,0X9C,0XF3,0X63,0X2C,0XB5,0X96,0XFF,0XFF,0XFF,0XFF,0X5B,0X2D,0X00,0X83,0X11,0X04,0X11,0X04,0X11,0X04,0X10,0XE4,0X21,0X67,0XEF,0X3D,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBD,0XF8,0XB5,0XB7,0XEF,0X9E,0X52,0XCB,0X94,0XB3,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0X31,0XE8,0X08,0XA3,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X08,0XA3,0X42,0X49,0XF7,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0X4A,0X6A,0X00,0X01,0X84,0X72,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XEF,0XDF,0X3A,0X09,0X08,0XA3,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X05,0XBE,0X18,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0XF0,0X00,0X62,0X31,0XE8,0X31,0XC7,0X00,0X41,0XA5,0X35,0XFF,0XFF,0XEF,0X5D,0X21,0X46,0X10,0XC4,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X10,0XE4,0X08,0XA3,0X9D,0X76,0XF7,0XFF,0XFF,0XFF,0XAD,0XB7,0X08,0XA3,0X08,0XA3,0X31,0XC7,0XE7,0X9E,0XF7,0XFF,0XF7,0XFF,0XA5,0X76,0X08,0XA3,0X10,0XE4,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X05,0X11,0X05,0XA5,0X35,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0XDB,0X29,0XA7,0X00,0X83,0X10,0XC4,0X10,0XC4,0X10,0XC4,0XE7,0X1C,0XEF,0X9E,0X11,0X05,0X10,0XE4,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X19,0X04,0X08,0XC4,0X10,0XE5,0X6B,0XD1,0X6B,0XD1,0X08,0XC5,0X00,0X64,0X08,0XA5,0X00,0X43,0X32,0X2B,0X9D,0X77,0X84,0XB3,0X19,0X25,0X10,0XC4,0X11,0X04,0X11,0X04,0X11,0X04,0X11,0X04,0X19,0X25,0X09,0X26,0X9D,0X35,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X73,0XAF,0X00,0X62,0X19,0X04,0X19,0X05,0X00,0X82,0X5B,0X0D,0X9B,0X8E,0X10,0X62,0X11,0X05,0X11,0X04,0X11,0X04,0X19,0X04,0X10,0XE4,0X00,0X85,0X11,0X05,0X39,0XC4,0X5A,0X81,0X7B,0X40,0X9C,0X22,0XAC,0X43,0XA4,0X03,0X9B,0X83,0X72,0X82,0X49,0X82,0X18,0XC2,0X00,0XA4,0X00,0XC5,0X10,0XE4,0X19,0X04,0X11,0X04,0X19,0X05,0X19,0X47,0X11,0X67,0X5A,0XEC,0XFF,0XBE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XDE,0XDB,0X10,0XC4,0X10,0XE4,0X11,0X04,0X11,0X05,0X18,0XA4,0XC0,0X01,0X88,0X83,0X00,0XE4,0X19,0X05,0X19,0X04,0X08,0XC5,0X21,0X44,0X83,0X43,0XD5,0X23,0XFE,0X42,0XFE,0XE4,0XFF,0X27,0XFF,0X07,0XFE,0XA4,0XFE,0X64,0XFE,0X03,0XFD,0XA3,0XFC,0XE2,0XEC,0X42,0XB3,0X83,0X62,0X24,0X10,0XE5,0X08,0XC4,0X19,0X04,0X19,0X26,0X19,0XA8,0X21,0X87,0X90,0X00,0XBC,0XD3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XFF,0X7C,0X10,0X00,0X42,0X19,0X05,0X11,0X05,0X28,0X83,0XD0,0X01,0XF8,0X44,0X48,0XA3,0X00,0XE4,0X08,0XC5,0X5A,0X44,0XED,0X02,0XFD,0XE2,0XFE,0X02,0XFE,0X66,0XFF,0X74,0XFF,0XB8,0XFF,0X73,0XF6,0XE7,0XF6,0XA6,0XF6,0X45,0XF5,0XA4,0XFC,0XC3,0XFC,0X62,0XFC,0XC2,0XFC,0XC2,0XCB,0XE3,0X49,0XC4,0X11,0X06,0X19,0X88,0X01,0X87,0X90,0XA4,0XF8,0X01,0X9A,0XEC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBE,0X31,0XE8,0X00,0X83,0X09,0X05,0X40,0X82,0XC0,0X01,0XF8,0X23,0XF0,0X85,0X48,0XA3,0X00,0XA4,0X5A,0X44,0XFD,0X02,0XCC,0X23,0XDC,0XC2,0XFE,0X04,0XFE,0X28,0XF6,0X48,0XF6,0X46,0XF6,0X24,0XF5,0XE4,0XFD,0X64,0XFC,0XE3,0XFC,0X62,0XFC,0XC2,0XE4,0X02,0XDC,0X02,0XFC,0XE2,0X7A,0XA4,0X01,0X48,0X01,0X67,0X78,0XC4,0XF8,0X24,0XF8,0X02,0XB0,0X84,0XE7,0X7D,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0XDB,0X19,0X25,0X00,0XA3,0X38,0XC4,0XE0,0X02,0XD8,0X22,0XF8,0X44,0XF8,0XA6,0X78,0XA4,0X00,0X63,0X21,0X43,0X72,0X83,0X39,0X83,0X9B,0X82,0XF5,0X21,0XFD,0X61,0XFD,0X22,0XFC,0XE2,0XFC,0XA2,0XFC,0X42,0XFC,0X42,0XFC,0X42,0XAB,0X22,0X41,0X83,0X92,0XC3,0X52,0X04,0X01,0X26,0X19,0X25,0X98,0XA4,0XF8,0X44,0XF8,0X23,0XF8,0X02,0XD0,0XA4,0XEF,0X9E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XD6,0X9A,0X29,0X87,0X00,0XA5,0XB8,0X43,0XF8,0X22,0XE0,0X23,0XF8,0X65,0XF8,0XE8,0XC9,0X07,0X48,0X83,0X00,0X42,0X00,0XA3,0X00,0X84,0X29,0X63,0X7A,0XA2,0XB3,0X62,0XCB,0XA2,0XD3,0X62,0XBB,0X02,0X8A,0X82,0X39,0X83,0X00,0XA4,0X00,0XE5,0X00,0XE5,0X08,0XE5,0X60,0XC4,0XD8,0X64,0XF8,0X44,0XF8,0X24,0XF8,0X23,0XF8,0X02,0X88,0X83,0XC6,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0X3D,0X5B,0X50,0X31,0X08,0XE8,0X23,0XF8,0X43,0XF0,0X44,0XF8,0X65,0XF9,0X09,0XF9,0XAB,0XD1,0X89,0X89,0X06,0X48,0XA3,0X18,0X42,0X00,0X02,0X00,0X42,0X00,0X61,0X00,0X82,0X00,0X62,0X00,0X62,0X00,0X83,0X20,0XA3,0X50,0XC4,0X88,0XA5,0XD8,0X85,0XF8,0X65,0XF8,0X44,0XF8,0X44,0XF8,0X23,0XF8,0X23,0XD0,0X03,0X10,0X82,0X29,0XC7,0XEF,0X5D,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X32,0X6C,0X38,0XA5,0XD8,0X02,0XF8,0X23,0XF8,0X65,0XF8,0X66,0XF8,0XA7,0XF9,0X4A,0XFA,0X0C,0XFA,0X4D,0XEA,0X4C,0XD2,0X0B,0XB9,0XA9,0XB1,0X68,0XA9,0X47,0XB1,0X27,0XB9,0X07,0XD1,0X07,0XE8,0XE7,0XF8,0XC7,0XF8,0XA7,0XF8,0X65,0XF8,0X65,0XF8,0X44,0XF8,0X23,0XF8,0X03,0XD0,0X02,0X28,0XA3,0X09,0X05,0X08,0XC4,0X5A,0XEC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0XFB,0X19,0X05,0X00,0XC4,0X41,0XA7,0XC0,0XE6,0XF8,0X03,0XF8,0X86,0XF8,0XA7,0XF8,0X87,0XF8,0X86,0XF8,0XC7,0XF9,0X29,0XF9,0X8A,0XF9,0XAB,0XF9,0XAB,0XF9,0X8B,0XF9,0X6A,0XF9,0X29,0XF9,0X08,0XF8,0XC7,0XF8,0XA6,0XF8,0X86,0XF8,0X65,0XF8,0X64,0XF8,0X23,0XF0,0X02,0XB1,0X06,0X29,0X25,0X00,0XE4,0X10,0XE4,0X19,0X25,0X19,0X25,0X9D,0X14,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAD,0X96,0X00,0X62,0X08,0X82,0X95,0X35,0XCE,0XBA,0XA2,0X8B,0XD0,0X44,0XF8,0X25,0XF8,0X87,0XF8,0XA7,0XF8,0XC7,0XF8,0XA7,0XF8,0X87,0XF8,0X86,0XF8,0X86,0XF8,0X86,0XF8,0X87,0XF8,0XA7,0XF8,0XA7,0XF8,0XA6,0XF8,0X85,0XF8,0X65,0XF8,0X64,0XF0,0X24,0XB8,0X64,0X93,0X0D,0XB6,0XBB,0X63,0XCF,0X08,0X83,0X11,0X04,0X10,0XE4,0X21,0X66,0X3A,0X49,0XEF,0X5D,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X94,0XD3,0X00,0X42,0X10,0XE4,0XCE,0XBB,0XFF,0XFF,0XE7,0XBE,0XB5,0X76,0XAA,0XCC,0XC1,0X07,0XE0,0X45,0XF8,0X45,0XF8,0X46,0XF8,0X66,0XF8,0X86,0XF8,0X86,0XF8,0X86,0XF8,0X86,0XF8,0X65,0XF8,0X45,0XF8,0X65,0XE8,0X65,0XD0,0X44,0XA8,0X43,0X88,0X01,0X90,0X82,0XD7,0X3C,0XEF,0XFF,0X95,0X55,0X08,0X83,0X11,0X04,0X11,0X04,0X19,0X05,0X19,0X46,0X94,0XB3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X94,0XB3,0X00,0X41,0X21,0X86,0XDF,0X5D,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XDF,0XC6,0X7A,0XB4,0XD3,0XB3,0X4E,0XC2,0X2A,0XD1,0X68,0XE0,0XE6,0XE8,0XA6,0XE8,0XA5,0XE8,0XA5,0XD8,0XE6,0XC9,0X88,0XA9,0X06,0XA8,0X22,0XA8,0X02,0XA0,0X00,0XC8,0X00,0XD8,0X00,0XE5,0XF7,0XE7,0XFF,0XAD,0XF8,0X10,0XC4,0X10,0XE4,0X11,0X04,0X10,0XE4,0X11,0X05,0X4A,0X8B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA5,0X55,0X00,0X41,0X29,0XA7,0XDF,0X5D,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,0XDF,0X7D,0XCE,0XDB,0XCE,0X59,0XCD,0XF8,0XCD,0XD7,0XC5,0XF7,0XCE,0X79,0XBE,0XFB,0XA2,0XAB,0XF0,0X03,0XF8,0X45,0XD0,0X42,0XE8,0X43,0XF0,0X00,0XD4,0X72,0XDF,0XFF,0XAE,0X39,0X10,0XE4,0X10,0XE4,0X11,0X04,0X10,0XE4,0X11,0X05,0X29,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCE,0X59,0X08,0X83,0X21,0X46,0XD7,0X1C,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,0XBA,0X8B,0XF8,0X04,0XF8,0X45,0XE0,0X62,0XF0,0X44,0XF8,0X00,0XDB,0X8E,0XDF,0XFF,0XA5,0XF8,0X10,0XC4,0X10,0XE4,0X10,0XE4,0X11,0X04,0X10,0XE4,0X19,0X25,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBE,0X29,0X87,0X08,0X83,0XB6,0X39,0XF7,0XFF,0XF7,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XBE,0XBA,0X4A,0XF8,0X03,0XF8,0X45,0XF8,0X64,0XF8,0X44,0XF8,0X00,0XE3,0X6E,0XD7,0XFF,0X8C,0XF4,0X08,0X83,0X11,0X04,0X10,0XE4,0X10,0XE4,0X10,0XE4,0X19,0X05,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X73,0XEF,0X00,0X00,0X84,0X72,0XEF,0XFF,0XEF,0XBE,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XDF,0XBA,0X8B,0XF8,0X03,0XF8,0X45,0XF8,0X45,0XF8,0X23,0XF8,0X00,0XD4,0XD3,0XD7,0XFF,0X5B,0X4E,0X00,0X21,0X3A,0X29,0XA5,0X55,0X08,0X83,0X10,0XC4,0X19,0X25,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0XFB,0X08,0XA3,0X31,0XE8,0XDF,0X9E,0XE7,0X9E,0XEF,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XBC,0X51,0XE0,0X02,0XF8,0X03,0XF0,0X03,0XE0,0X43,0XC2,0XEC,0XCF,0X7E,0XBE,0XFC,0X21,0X46,0X00,0X21,0X94,0XD3,0XFF,0XFF,0X84,0X51,0X00,0X00,0X29,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X84,0X51,0X00,0X00,0X8C,0XF4,0XEF,0XFF,0XE7,0X9E,0XEF,0XBF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0X3D,0XBD,0X55,0XBC,0X52,0XBC,0X72,0XB5,0XB7,0XC7,0X5D,0XDF,0XFF,0X6B,0XF0,0X00,0X00,0X3A,0X09,0XF7,0XBF,0XFF,0XFF,0XFF,0XFF,0X9D,0X14,0XA5,0X55,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X4A,0XAC,0X08,0XA4,0XBE,0XBB,0XE7,0XDF,0XE7,0X7E,0XEF,0XBE,0XF7,0XDF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XF7,0XDF,0XEF,0XFF,0XDF,0XDF,0XD7,0XBF,0XD7,0X9E,0XDF,0XDF,0XA5,0XD8,0X08,0X83,0X11,0X26,0XD6,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0X79,0XDC,0X8B,0X31,0X21,0X21,0XA9,0XCF,0X3D,0XDF,0XBF,0XDF,0X7E,0XE7,0X9E,0XEF,0XBE,0XEF,0XBF,0XF7,0XDF,0XF7,0XDF,0XF7,0XDF,0XF7,0XDF,0XF7,0XDF,0XEF,0XBF,0XEF,0XBE,0XE7,0X9E,0XDF,0X7E,0XD7,0X5E,0XD7,0X5E,0XDF,0XDF,0XB6,0X9A,0X19,0X26,0X08,0X42,0XA3,0XED,0XFF,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDD,0X74,0XDB,0XC0,0XFE,0X00,0XEE,0X42,0X42,0X02,0X21,0X89,0XB6,0X7B,0XDF,0XDF,0XD7,0X7E,0XDF,0X7E,0XDF,0X7E,0XE7,0X9E,0XE7,0X9E,0XE7,0X9E,0XE7,0X9E,0XE7,0X9E,0XDF,0X7E,0XDF,0X7E,0XD7,0X5D,0XD7,0X5D,0XDF,0X9E,0XE7,0XFF,0XA5,0XF8,0X11,0X07,0X18,0XE3,0XC5,0X02,0XFD,0X60,0XD3,0XE6,0XEE,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0X9E,0XBA,0X84,0XFC,0XC1,0XFE,0X42,0XFE,0X82,0XFE,0XA2,0X83,0X81,0X21,0X45,0X74,0X74,0XC7,0X5E,0XDF,0XDF,0XD7,0X7E,0XD7,0X5E,0XD7,0X5D,0XD7,0X5E,0XD7,0X5E,0XD7,0X5D,0XD7,0X5D,0XD7,0X5E,0XDF,0X9E,0XE7,0XFF,0XC7,0X3D,0X63,0XF1,0X08,0X84,0X52,0X42,0XE6,0X26,0XFF,0X29,0XFE,0X86,0XF3,0XE0,0XC3,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0X18,0XD2,0XC1,0XFD,0XA2,0XFE,0X22,0XFE,0X42,0XFE,0X42,0XFE,0X62,0XD4,0XE2,0X6A,0X41,0X42,0X49,0X74,0X53,0XA6,0X3B,0XC7,0X3E,0XD7,0XBF,0XD7,0XBF,0XD7,0XBF,0XDF,0XBF,0XD7,0XBF,0XC7,0X3E,0XA6,0X1A,0X63,0XF2,0X29,0XA7,0X41,0X82,0XB4,0X22,0XFE,0X62,0XFE,0X83,0XFE,0XAA,0XFF,0X0F,0XFD,0X67,0XBA,0X63,0XEF,0X3C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE6,0X9A,0XD2,0X80,0XFD,0X21,0XFD,0XC2,0XF5,0XE2,0XF5,0XC2,0XF5,0X82,0XFD,0X82,0XFD,0X62,0XDC,0X61,0X9B,0X21,0X6A,0X84,0X6A,0XE9,0X63,0X2C,0X63,0XAF,0X74,0X11,0X63,0X6E,0X63,0X2C,0X5A,0X89,0X52,0X04,0X7A,0X81,0XCB,0XC2,0XFC,0XE2,0XFD,0X62,0XFD,0X82,0XFD,0XC2,0XFD,0XC2,0XFD,0XE4,0XFD,0X24,0XCA,0X62,0XE7,0X1C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCC,0XB1,0XD2,0X81,0XF3,0XC0,0XFC,0XC1,0XFD,0X02,0XFD,0X02,0XFC,0XE2,0XFC,0XC2,0XFC,0XC2,0XFC,0X81,0XFB,0X80,0XC9,0XC0,0X81,0XA4,0XAD,0X35,0XCE,0X59,0X9C,0X71,0X81,0X21,0XDA,0X00,0XFB,0XA1,0XFC,0X82,0XFC,0XA2,0XFC,0X82,0XFC,0XA2,0XFD,0X02,0XFD,0X22,0XFC,0XE2,0XFC,0X00,0XDA,0X60,0XCC,0X90,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDE,0X59,0XC4,0X0D,0XCB,0X06,0XD2,0XE4,0XDB,0X03,0XDB,0X03,0XDA,0XE3,0XD2,0XC3,0XC2,0XA4,0XB3,0X09,0XBC,0XD2,0XF7,0X9E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE6,0XFB,0XB4,0X0E,0XBA,0XA6,0XD2,0X83,0XE2,0XE3,0XEB,0X02,0XEB,0X22,0XE3,0X22,0XDB,0X03,0XD2,0XE4,0XC3,0X6A,0XD5,0XB6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,;#endif 实例显示字符串LCD_ShowString(20, 100, Hello World!, ST7789_BLACK,ST7789_WHITE,16,0); //字符串 显示整型LCD_ShowIntNum(20,80,666666,4,ST7789_RED,ST7789_WHITE,16); //整数 显示浮点LCD_ShowFloatNum1(20, 80, 1314.520, 4, ST7789_RED, ST7789_WHITE, 16); //浮点 显示中文LCD_ShowChinese(8,60,电子,ST7789_RED,ST7789_WHITE,16,0); //汉字 显示整图片LCD_ShowPicture(65,80,40,40,gImage_1); //图片 显示圆LCD_Draw_Circle(45, 175, 35, ST7789_GREEN); //圆 显示线LCD_DrawLine(0, 125,240, 125, ST7789_BLACK); //线 完整实例#include delay.h#include sys.h#include lcd_init.h#include lcd.h#include pic.hint main(void)\tfloat t=0;\tdelay_init();\tLCD_Init();//LCD初始化\tLCD_Fill(0,0,LCD_W,LCD_H,ST7789_WHITE); //整屏清除\twhile(1) LCD_ShowChinese(8,60,科技,ST7789_RED,ST7789_WHITE,16,0);//汉字 LCD_ShowFloatNum1(20,80,t,4,ST7789_RED,ST7789_WHITE,16);//浮点数字 LCD_ShowIntNum(20,80,t,4,ST7789_RED,ST7789_WHITE,16);//浮点数字 LCD_ShowString(20, 100, Hello, ST7789_GRAY,ST7789_WHITE,16,0); t+=0.11; //数值改变 循环 LCD_ShowPicture(65,80,40,40,gImage_1); //图片 LCD_DrawLine(0, 125,240, 125, ST7789_BLACK);//线 LCD_Draw_Circle(45, 175, 35, ST7789_GREEN);//圆 delay_ms(200); 展示 声明本文章移植的是ST7735S模块和STM32F103C8T6的ST7789的移植。","tags":["驱动"],"categories":["STM32"]},{"title":"Idea调试跳过源代码","path":"/posts/2024/08/11/002618/","content":"常用调试方法 Step Over (F8): **步过(单步走过-路过方法而不入)**，一行一行地往下走，如果这一行上有方法不会进入方法。 Step Into (F7): **步入(即单步执行,路过方法进去瞅一瞅)**。如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。 Step Out (Shift + F8): 步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。 Drop Frame (Alt + Shift + F8): 这个操作允许你回到调用栈中的上一个方法，重新执行当前方法。这在你想要重新执行当前方法而不影响其他方法的执行时非常有用。 Force Step Over (Alt + Shift + F9): 这个操作类似于Step Over，但它会强制执行当前行的代码，即使它是一个方法调用。这在你想要跳过某些特定方法的调试时非常有用。 调试不进入源代码在使用IntelliJ IDEA进行调试时，如果你希望跳过某些源代码的调试，可以使用“Step Over”功能来实现。这个功能允许你在当前方法的执行过程中跳过对其他方法的单步调试。以下是详细步骤： 进入 Settings - Build, Execution, Deployment - Debugger - Stepping 设置界面，将 Do not step into the classes 勾选，然后将下面列表按需求勾选，然后添加一些不需要进入源代码的包名： org.springframework.* org.hibernate.* org.apache.* jakarta.* org.slf4j.* lombok.* org.junit.* com.google.* 可以选择性勾选，也可以全选，这里只列举了一部分，按需自己找包名复制进去","tags":["调试"],"categories":["Idea"]},{"title":"SpringBoot3 整合 Security6.3-JWT-JPA-Redis 实现注册登陆","path":"/posts/2024/08/10/225307/","content":"1、概述在现代Web应用开发中，安全是一个至关重要的方面。本文将介绍如何将Spring Boot 3、PostgreSQL数据库、JPA、Spring Security 6.3、Redis和JWT整合在一起，实现一个安全的用户认证和授权系统。 2、项目主要环境 Spring Boot: 3.3.1 PostgreSQL: 16.1 Spring Security: 6.3 Redis: 5.0.14.1 JWT: 0.12.3 3、Spring Security 6与JWT的介绍Spring Security 6是Spring框架中用于安全性的核心库，它提供了全面的安全服务，包括认证、授权、防止常见攻击等。JWT（JSON Web Tokens）是一种开放标准（RFC 7519），用于在网络应用环境间安全地传输声明（claims）。 Spring Security 6Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它主要专注于为Java应用程序提供身份验证和授权。Spring Security 6是该框架的最新版本，它提供了许多改进和新特性，比如对现代安全威胁的增强防护、更灵活的配置选项、更好的性能等。 Spring Security 6的核心概念包括： 认证（Authentication）：验证用户身份的过程。这是确定用户是否是他们所声称的那个人的过程。 授权（Authorization）：在用户被认证之后，授权过程决定用户是否有权限执行特定的操作。 保护（Protection）：保护应用免受攻击，例如CSRF（跨站请求伪造）、XSS（跨站脚本攻击）等。 JWTJWT是一种紧凑的、自包含的方式，用于在各方之间以JSON对象的形式安全传输信息。JWT可以使用HMAC算法或使用RSA的公钥私钥对进行签名。 JWT通常用于身份验证和信息交换，特别是在Web应用中，作为客户端和服务器之间传递安全信息的手段。一个JWT实际上是一个被编码的字符串，包含三个部分： Header（头部）：通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。 Payload（有效载荷）：包含所要传递的数据，这些数据是关于实体（通常是用户）的声明（claims）。声明可以是注册的（registered）声明，也可以是公开的（public）声明，或者是私有的（private）声明。 Signature（签名）：为了创建签名部分，你必须有编码后的header、编码后的payload、一个密钥、header中指定的算法进行签名。签名用于验证消息在此过程中未被篡改。 Spring Security 6与JWT整合在Spring Security 6中整合JWT，通常涉及以下步骤： 配置Spring Security：设置安全规则，允许对登录端点的匿名访问，而其他所有请求都需要认证。 用户详情服务：实现UserDetailsService接口，用于从数据库加载用户信息，并提供密码的加密和解密。 JWT工具类：创建一个工具类来生成和验证JWT。这个类将包含生成JWT的逻辑，以及一个方法来从JWT中提取用户名。 登录控制器：创建一个控制器来处理用户的登录请求。登录控制器将验证用户凭证，然后生成JWT作为响应。 认证拦截器：创建一个拦截器，拦截进入的请求，并检查JWT的有效性。 整合JWT和Spring Security 6可以提供一个安全、高效且易于扩展的身份验证机制。通过这种方式，你可以保护你的Web应用，确保只有经过授权的用户才能访问敏感资源。 4、认证过程在Web应用中，认证过程是验证用户身份并授权用户访问受保护资源的关键步骤。以下是使用Spring Security和JWT进行认证的一般步骤： 1. 用户提交认证信息用户通过登录表单或API端点提交他们的认证信息，通常包括用户名和密码。 2. 认证请求到达过滤器在Spring Security中，所有的HTTP请求都会被过滤器链拦截。对于登录请求，通常会有一个专门的过滤器（例如UsernamePasswordAuthenticationFilter）来处理用户名和密码。 3. 过滤器验证凭证过滤器会调用AuthenticationManager来验证用户提交的凭证。AuthenticationManager是一个接口，它定义了一个方法authenticate，用于执行实际的认证逻辑。 4. 用户详情服务检索用户信息AuthenticationManager通常会委托给一个AuthenticationProvider，后者会调用UserDetailsService来根据用户名检索用户信息。UserDetailsService会返回一个UserDetails对象，其中包含了用户信息和权限。 5. 凭证验证AuthenticationProvider会比较从数据库中检索到的用户密码（通常需要解密或验证）和用户提交的密码。如果密码匹配，AuthenticationProvider会创建一个Authentication对象，该对象包含了用户认证成功后的详细信息，如用户的角色和权限。 6. 生成JWT一旦用户通过认证，系统会生成一个JWT。这个JWT通常包含用户的身份信息（如用户ID）和一些元数据（如过期时间）。然后，使用一个密钥对JWT进行签名，以确保其完整性和真实性。 7. 返回JWT给客户端认证成功后，服务器会将生成的JWT作为响应的一部分返回给客户端。客户端（如浏览器或移动应用）需要将这个JWT存储起来，通常是在HTTP请求的Authorization头部中以Bearer模式发送。 8. 客户端发送JWT进行后续请求对于需要认证的后续请求，客户端需要在HTTP请求的Authorization头部中包含JWT。例如： Authorization: Bearer your-jwt-token 9. 服务器端验证JWT服务器端的一个拦截器（如JwtInterceptor）会拦截请求，并从Authorization头部中提取JWT。然后，拦截器会验证JWT的有效性，包括签名、过期时间等。 5、实战1、准备工作搭建一个SpringBoot工程 1.1、项目结构src/|-- main/| |-- java/| | |-- com.yourcompany.project/| | | |-- controller/| | | | |-- UserController.java| | | |-- entity/| | | | |-- User.java| | | | |-- Result.java| | | | |-- MyUserDetails.java| | | |-- repository/| | | | |-- UserRepository.java| | | |-- service/| | | | |-- impl/| | | | | |-- UserServiceImpl.java| | | | |-- UserService.java| | | |-- config/| | | | |-- WebSecurityConfig.java| | | | |-- WebConfig.java| | | | |-- RedisConfig.java| | | |-- util/| | | | |-- JwtUtil.java| | | | |-- RedisUtil.java| | | |-- interceptor/| | | | |-- JwtInterceptor.java 2、添加依赖!-- SpringSecurity依赖 --dependency groupIdorg.springframework.boot/groupId artifactIdspring-boot-starter-security/artifactId/dependency!-- JPA依赖 --dependency groupIdorg.springframework.boot/groupId artifactIdspring-boot-starter-data-jpa/artifactId/dependency!-- Redis依赖 --dependency groupIdorg.springframework.boot/groupId artifactIdspring-boot-starter-data-redis/artifactId/dependency!-- JWT依赖 --dependency groupIdio.jsonwebtoken/groupId artifactIdjjwt/artifactId version0.12.3/version/dependency!-- Lombok依赖 --dependency groupIdorg.projectlombok/groupId artifactIdlombok/artifactId optionaltrue/optional/dependency 3、配置文件application.ymlspring: # PostgresSQL配置 datasource: url: jdbc:postgresql://127.0.0.1:5432/test # 配置数据库 username: natuie password: xxxxxx driver-class-name: org.postgresql.Driver jpa: show-sql: true # 在控制台打印执行的SQL语句 hibernate: ddl-auto: update # 指定为update，每次启动项目因表结构变化就会更新/新增字段，表不存在时会新建，如果指定create，则每次启动项目都会清空数据并删除表，再新建 # Redis配置 data: redis: host: 127.0.0.1 # Redis服务器连接端口 port: 6379 # Redis服务器连接密码（默认为空） # password: # 连接池最大连接数（使用负值表示没有限制） pool: max-active: 8 # 连接池最大阻塞等待时间（使用负值表示没有限制） max-wait: -1 # 连接池中的最大空闲连接 max-idle: 8 # 连接池中的最小空闲连接 min-idle: 0 # 连接超时时间（毫秒） timeout: 30000 jackson: #日期类型格式化 date-format: yyyy-MM-dd HH:mm:ssjwt: secret: rlFgiCr2rRMch/bTWYbz=p8IY/Rj8oQdcu2zpj1/SQzrE= # 密钥，一定要=256bit，不是256长度，=32位长度就行，不然报错 expiration: 259200000 # 3天过期时间 4、创建Controller：处理HTTP请求，如用户注册和登录@RestController@RequestMapping(/auth)public class UserController private final UserService userService; @Autowired public UserController(UserService userService) this.userService = userService; @PostMapping(/login) public ResultObject login(User user) return userService.login(user); @PostMapping(/register) public ResultObject register(User user) return userService.register(user); 5、创建User实体类：定义用户实体，包含用户信息如用户名、密码等@NoArgsConstructor@Entity@Table(name = userdata)@Datapublic class User @Id @GeneratedValue(strategy = GenerationType.IDENTITY) // ID 是自增的 private Long id; // 主键 @Column(length = 18, nullable = false, unique = true) private String account; // 账号 @Column(length = 64, nullable = false) private String password; // 密码 @Column(length = 13, unique = true) private String mobileNumber; // 手机号 @Column(length = 128, nullable = false,unique = true) private String email; // 邮箱 @Column(length = 36, nullable = false) private String username; // 用户名 @Temporal(TemporalType.TIMESTAMP) @DateTimeFormat(pattern = yyyy-MM-dd HH:mm:ss) private Date registerTime; // 注册时间 private String identity; // 身份信息，会员等 private String state; // 状态，正常、冻结等 private Short sex; // 性别，0：中，1：男，2：女 @Temporal(TemporalType.DATE) private Date birthDate; // 生日 private String address; // 地址 private BigDecimal money; // 余额 @Column(length = 255) private String registerInfo; // 注册信息 6、创建Result实体类：用于数据返回@JsonInclude(JsonInclude.Include.NON_NULL) // Ignore null values when serializing to JSON@Data@Setter@Getter@ToStringpublic class ResultT private int code; private String message; private T data; public Result(int code, String message, T data) this.code = code; this.message = message; this.data = data; public static E ResultE success(String message) return new Result(200, message, null); public static E ResultE success(int code, String message) return new Result(code, message, null); public static E ResultE success(E data) return new Result(200, null, data); public static E ResultE success(String message, E data) return new Result(200, message, data); public static E ResultE error(String message) return new Result(201, message, null); public static E ResultE error(int code, String message) return new Result(code, message, null); 7、创建JpaRepository接口：用于访问数据库中的用户数据public interface UserRepository extends JpaRepositoryUser, Integer User findByAccount(String account); 8、自定义UserDetailsService@Servicepublic class MyUserDetailsService implements UserDetailsService private final UserRepository userRepository; public MyUserDetailsService(UserRepository userRepository) this.userRepository = userRepository; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException System.out.println(loadUserByUsername: + username); User user = userRepository.findByAccount(username); if (user == null) throw new UsernameNotFoundException(User not found with username: + username); return new MyUserDetails(user); 9、创建用户业务UserService接口：定义用户服务接口public interface UserService ResultObject login(User user); ResultObject register(User user); 10、创建用户业务实现UserServiceImpl接口：实现用户服务接口，处理用户注册和登录逻辑@SuppressWarnings(value = unchecked, rawtypes )@Servicepublic class UserServiceImpl implements UserService private final AuthenticationManager authenticationManager; private final RedisUtil redisUtil; private final JwtUtil jwtUtil; private final UserRepository userRepository; @Autowired public UserServiceImpl(AuthenticationManager authenticationManager, RedisUtil redisUtil, JwtUtil jwtUtil, UserRepository userRepository) this.authenticationManager = authenticationManager; this.redisUtil = redisUtil; this.jwtUtil = jwtUtil; this.userRepository = userRepository; @Override public ResultObject login(@RequestBody User user) UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.getAccount(),user.getPassword()); try // 认证 Authentication authenticate = authenticationManager.authenticate(authenticationToken); // 生成JWT MyUserDetails loginUser = (MyUserDetails) authenticate.getPrincipal(); String jwt = jwtUtil.generateToken(loginUser.getUser()); // 保存到Redis MapString,String map = Map.ofEntries(Map.entry(token, jwt)); redisUtil.hmset(TOKEN_ + jwt, map, jwtUtil.getExpirationTime()); return Result.success(登陆成功！, jwt); catch (BadCredentialsException e) // 凭证无效，返回错误信息 return Result.error(凭据无效！); catch (AuthenticationException e) // 其他认证错误，返回错误信息 return Result.error(认证失败！); @Override public ResultObject register(@RequestBody User user) // 可以写一些检测逻辑，比如账号是否已存在，密码是否符合要求等等 User newUser = new User(); newUser.setAccount(user.getAccount()); newUser.setPassword(user.getPassword()); newUser.setEmail(user.getEmail()); newUser.setRegisterTime(new Date()); userRepository.save(newUser); return Result.success(注册成功！); 11、创建WebSecurityConfig配置文件：配置Spring Security，定义安全规则@EnableWebSecurity@Configurationpublic class WebSecurityConfig @Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception http .authorizeHttpRequests((authorize) - authorize // 放行登录,注册页面 .requestMatchers(/auth/login, /auth/register).permitAll() // 拦截其他所有请求 .anyRequest().authenticated() ) .httpBasic(Customizer.withDefaults()) .formLogin(Customizer.withDefaults()) .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable); return http.build(); @Bean public PasswordEncoder passwordEncoder() return new BCryptPasswordEncoder(); @Bean public AuthenticationManager authenticationManager(MyUserDetailsService userService, PasswordEncoder passwordEncoder) throws Exception DaoAuthenticationProvider provider = new DaoAuthenticationProvider(); provider.setUserDetailsService(userService); provider.setPasswordEncoder(passwordEncoder); return new ProviderManager(provider); 12、创建WebConfig配置文件：配置拦截器@Configurationpublic class WebConfig implements WebMvcConfigurer private final JwtInterceptor jwtInterceptor; @Autowired public WebConfig(JwtInterceptor jwtInterceptor) this.jwtInterceptor = jwtInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) registry.addInterceptor(jwtInterceptor) .addPathPatterns(/**) // 拦截的请求 .excludePathPatterns(/auth/login, /auth/register); // 不拦截的请求 13、创建JwtInterceptor过滤器:：拦截请求并验证JWT@Componentpublic class JwtInterceptor implements HandlerInterceptor private final JwtUtil jwtUtil; public JwtInterceptor(JwtUtil jwtUtil) this.jwtUtil = jwtUtil; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception if (!request.getMethod().equalsIgnoreCase(OPTIONS)) String token = request.getHeader(Authorization); // 获取请求头中的token try jwtUtil.parseJWT(token); catch (SignatureException e) return unauthorized(request, response, Result.error(无效签名)); catch (UnsupportedJwtException e) return unauthorized(request, response, Result.error(不支持的签名)); catch (ExpiredJwtException e) return unauthorized(request, response, Result.error(token过期)); catch (MalformedJwtException e) // IllegalArgumentException return unauthorized(request, response, Result.error(不支持的签名格式)); catch (Exception e) return unauthorized(request, response, Result.error(token无效)); return true; // 通过所有OPTION请求 private boolean unauthorized(HttpServletRequest request, HttpServletResponse response, ResultString result) throws Exception String json = new ObjectMapper().writeValueAsString(result); response.setStatus(401); response.setContentType(application/json;charset=UTF-8); response.getWriter().println(json); return false; 14、创建RedisConfig配置文件：添加Bean用于RedisTemplate序列化配置，避免直接使用出现乱码@Configurationpublic class RedisConfig @Bean(redisTemplate) public RedisTemplateString, Object redisTemplate(RedisConnectionFactory factory) RedisTemplateString, Object template = new RedisTemplate(); template.setConnectionFactory(factory); //Json序列化配置 Jackson2JsonRedisSerializerObject Jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper mp = new ObjectMapper(); mp.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); mp.activateDefaultTyping(mp.getPolymorphicTypeValidator()); Jackson2JsonRedisSerializer.serialize(mp); //Spring的序列化 StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); //key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); //hash的key也采用string的序列化方式 template.setHashKeySerializer(stringRedisSerializer); //value的序列化方式采用的是jackson template.setValueSerializer(Jackson2JsonRedisSerializer); //hash的value序列化方式采用jackson template.setHashValueSerializer(Jackson2JsonRedisSerializer); // 设置其他的k-v的默认的序列化 template.setDefaultSerializer(Jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; 15、创建Redis工具类@SuppressWarnings(value = unchecked, rawtypes )@Componentpublic final class RedisUtilK, V private final RedisTemplate redisTemplate; @Autowired public RedisUtil(RedisTemplate redisTemplate) this.redisTemplate = redisTemplate; /** * 指定缓存失效时间 * * @param key 键 * @param time 时间(秒) */ public boolean expire(String key, long time) try if (time 0) redisTemplate.expire(key, time, TimeUnit.SECONDS); return true; catch (Exception e) e.printStackTrace(); return false; /** * 根据key 获取过期时间 * * @param key 键 不能为null * @return 时间(秒) 返回0代表为永久有效 */ public long getExpire(String key) return redisTemplate.getExpire(key, TimeUnit.SECONDS); /** * 判断key是否存在 * * @param key 键 * @return true 存在 false不存在 */ public boolean hasKey(String key) try return redisTemplate.hasKey(key); catch (Exception e) e.printStackTrace(); return false; /** * 删除缓存 * * @param key 可以传一个值 或多个 */ @SuppressWarnings(unchecked) public void del(String... key) if (key != null key.length 0) if (key.length == 1) redisTemplate.delete(key[0]); else redisTemplate.delete((CollectionString) CollectionUtils.arrayToList(key)); // ============================String============================= /** * 普通缓存获取 * * @param key 键 * @return 值 */ public Object get(String key) return key == null ? null : redisTemplate.opsForValue().get(key); /** * 普通缓存放入 * * @param key 键 * @param value 值 * @return true成功 false失败 */ public boolean set(String key, Object value) try redisTemplate.opsForValue().set(key, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 普通缓存放入并设置时间 * * @param key 键 * @param value 值 * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期 * @return true成功 false 失败 */ public boolean set(String key, Object value, long time) try if (time 0) redisTemplate.opsForValue().set(key, value, time, TimeUnit.MINUTES); else set(key, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 递增 * * @param key 键 * @param delta 要增加几(大于0) */ public long incr(String key, long delta) if (delta 0) throw new RuntimeException(递增因子必须大于0); return redisTemplate.opsForValue().increment(key, delta); /** * 递减 * * @param key 键 * @param delta 要减少几(小于0) */ public long decr(String key, long delta) if (delta 0) throw new RuntimeException(递减因子必须大于0); return redisTemplate.opsForValue().increment(key, -delta); // ================================Map================================= /** * HashGet * * @param key 键 不能为null * @param item 项 不能为null */ public Object hget(String key, String item) return redisTemplate.opsForHash().get(key, item); /** * 获取hashKey对应的所有键值 * * @param key 键 * @return 对应的多个键值 */ public MapK, V hmget(String key) return redisTemplate.opsForHash().entries(key); /** * HashSet * * @param key 键 * @param map 对应多个键值 */ public boolean hmset(String key, Map?, ? map) try redisTemplate.opsForHash().putAll(key, map); return true; catch (Exception e) e.printStackTrace(); return false; /** * HashSet 并设置时间 * * @param key 键 * @param map 对应多个键值 * @param time 时间(秒) * @return true成功 false失败 */ public boolean hmset(String key, Map?, ? map, long time) try redisTemplate.opsForHash().putAll(key, map); if (time 0) expire(key, time); return true; catch (Exception e) e.printStackTrace(); return false; /** * 向一张hash表中放入数据,如果不存在将创建 * * @param key 键 * @param item 项 * @param value 值 * @return true 成功 false失败 */ public boolean hset(String key, String item, Object value) try redisTemplate.opsForHash().put(key, item, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 向一张hash表中放入数据,如果不存在将创建 * * @param key 键 * @param item 项 * @param value 值 * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间 * @return true 成功 false失败 */ public boolean hset(String key, String item, Object value, long time) try redisTemplate.opsForHash().put(key, item, value); if (time 0) expire(key, time); return true; catch (Exception e) e.printStackTrace(); return false; /** * 删除hash表中的值 * * @param key 键 不能为null * @param item 项 可以使多个 不能为null */ public void hdel(String key, Object... item) redisTemplate.opsForHash().delete(key, item); /** * 判断hash表中是否有该项的值 * * @param key 键 不能为null * @param item 项 不能为null * @return true 存在 false不存在 */ public boolean hHasKey(String key, String item) return redisTemplate.opsForHash().hasKey(key, item); /** * hash递增 如果不存在,就会创建一个 并把新增后的值返回 * * @param key 键 * @param item 项 * @param by 要增加几(大于0) */ public double hincr(String key, String item, double by) return redisTemplate.opsForHash().increment(key, item, by); /** * hash递减 * * @param key 键 * @param item 项 * @param by 要减少记(小于0) */ public double hdecr(String key, String item, double by) return redisTemplate.opsForHash().increment(key, item, -by); // ============================set============================= /** * 根据key获取Set中的所有值 * * @param key 键 */ public SetObject sGet(String key) try return redisTemplate.opsForSet().members(key); catch (Exception e) e.printStackTrace(); return null; /** * 根据value从一个set中查询,是否存在 * * @param key 键 * @param value 值 * @return true 存在 false不存在 */ public boolean sHasKey(String key, Object value) try return redisTemplate.opsForSet().isMember(key, value); catch (Exception e) e.printStackTrace(); return false; /** * 将数据放入set缓存 * * @param key 键 * @param values 值 可以是多个 * @return 成功个数 */ public long sSet(String key, Object... values) try return redisTemplate.opsForSet().add(key, values); catch (Exception e) e.printStackTrace(); return 0; /** * 将set数据放入缓存 * * @param key 键 * @param time 时间(秒) * @param values 值 可以是多个 * @return 成功个数 */ public long sSetAndTime(String key, long time, Object... values) try Long count = redisTemplate.opsForSet().add(key, values); if (time 0) expire(key, time); return count; catch (Exception e) e.printStackTrace(); return 0; /** * 获取set缓存的长度 * * @param key 键 */ public long getSetSize(String key) try return redisTemplate.opsForSet().size(key); catch (Exception e) e.printStackTrace(); return 0; /** * 移除值为value的 * * @param key 键 * @param values 值 可以是多个 * @return 移除的个数 */ public long setRemove(String key, Object... values) try Long count = redisTemplate.opsForSet().remove(key, values); return count; catch (Exception e) e.printStackTrace(); return 0; // ===============================list================================= /** * 获取list缓存的内容 * * @param key 键 * @param start 开始 * @param end 结束 0 到 -1代表所有值 */ public ListObject lGet(String key, long start, long end) try return redisTemplate.opsForList().range(key, start, end); catch (Exception e) e.printStackTrace(); return null; /** * 获取list缓存的长度 * * @param key 键 */ public long getListSize(String key) try return redisTemplate.opsForList().size(key); catch (Exception e) e.printStackTrace(); return 0; /** * 通过索引 获取list中的值 * * @param key 键 * @param index 索引 index=0时， 0 表头，1 第二个元素，依次类推；index0时，-1，表尾，-2倒数第二个元素，依次类推 */ public Object lGetIndex(String key, long index) try return redisTemplate.opsForList().index(key, index); catch (Exception e) e.printStackTrace(); return null; /** * 将list放入缓存 * * @param key 键 * @param value 值 */ public boolean lSet(String key, Object value) try redisTemplate.opsForList().rightPush(key, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) */ public boolean lSet(String key, Object value, long time) try redisTemplate.opsForList().rightPush(key, value); if (time 0) expire(key, time); return true; catch (Exception e) e.printStackTrace(); return false; /** * 将list放入缓存 * * @param key 键 * @param value 值 * @return */ public boolean lSet(String key, ListObject value) try redisTemplate.opsForList().rightPushAll(key, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) * @return */ public boolean lSet(String key, ListObject value, long time) try redisTemplate.opsForList().rightPushAll(key, value); if (time 0) expire(key, time); return true; catch (Exception e) e.printStackTrace(); return false; /** * 根据索引修改list中的某条数据 * * @param key 键 * @param index 索引 * @param value 值 * @return */ public boolean lUpdateIndex(String key, long index, Object value) try redisTemplate.opsForList().set(key, index, value); return true; catch (Exception e) e.printStackTrace(); return false; /** * 移除N个值为value * * @param key 键 * @param count 移除多少个 * @param value 值 * @return 移除的个数 */ public long lRemove(String key, long count, Object value) try Long remove = redisTemplate.opsForList().remove(key, count, value); return remove; catch (Exception e) e.printStackTrace(); return 0; 16、创建JWT工具类@Component@Getterpublic class JwtUtil private String secretKey; private int expirationTime; // 3 days @Value($jwt.secret) private void setSecretKey(String secretKey) this.secretKey = secretKey; @Value($jwt.expiration) private void setExpirationTime(int expirationTime) this.expirationTime = expirationTime; public SecretKey key() return Keys.hmacShaKeyFor(secretKey.getBytes()); public String generateToken(User user) System.out.println(secretKey); return Jwts.builder() .id(String.valueOf(user.getId())) .subject(user.getUsername()) // 主题 .issuedAt(new Date()) // 签发时间 .issuer(Natuie) .claim(account, user.getAccount()) // 账号 .claim(email, user.getEmail()) // 邮箱 .expiration(new Date(System.currentTimeMillis() + expirationTime)) // 过期时间 .signWith(key()) // 签名 .compact(); // 压缩 public JwsClaims parseJWT(String token) return Jwts.parser() .verifyWith(key()).build() .parseSignedClaims(token); // 验证并解析 public boolean validateToken(String token) try parseJWT(token); return true; catch (ExpiredJwtException e) // Token过期 return false; 6、运行发送POST请求到/auth/register然后请求到/auth/login，可以发现返回JWT数据，那就成功了。","categories":["SpringBoot"]},{"title":"SpringBoot 中整合 Thymeleaf 无法直接访问templates下的html文件的解决方法","path":"/posts/2024/08/10/223719/","content":"问题自述看着教程一步一步学，发现我写的控制器，访问打开返回一个字符串而不是html文件内容，我就纳闷了，明明没问题，可是一直没用。 Controller和RestController的主要区别Controller和RestController的主要区别在于它们处理返回值的方式： @Controller：用于返回视图名称，适合传统的MVC模式，返回的是HTML页面。 @RestController：用于构建RESTful服务，直接返回数据（如JSON或XML），不返回视图名称。 解决问题看到这，因为我写控制器是无脑写RestController，所以导致这样。改掉就好了。 @Controller // 重点！！！public class ThymeleafController @GetMapping(/login) public String login() return login; 如果还是没用，你注意检查一下，你的html文件是不是在**.\\resources\\templates**这里面。 也可以尝试修改静态资源的位置，通常不需要修改。 spring: mvc: static-path-pattern: /static/** web: resources: static-locations: classpath:/static/","tags":["问题"],"categories":["SpringBoot"]},{"title":"SpringBoot3 整合 Security6.3 出现403问题","path":"/posts/2024/08/10/193606/","content":"问题自述在整合Security6.3的时候，我阅读别人写的博客，发现不管怎么样我访问我的接口总是403，登陆接口都进不去，我用的自定义登陆接口。 HTTP 403 是什么？HTTP 403（Forbidden）错误通常表示请求已被服务器理解，但服务器拒绝授权。 需要注意的是，该错误不同于 401 错误，后者表示服务器需要对客户端进行身份认证，但尚未收到有效凭证。 “401” 表示需要认证，“403” 表示认证过了（或者不需要认证），但是没有权限。 导致403原因 权限配置问题： 确保你的安全配置正确地定义了哪些用户或角色可以访问哪些资源。例如，使用http.authorizeRequests()方法来配置访问规则。 CSRF保护： 如果你的应用是前后端分离的，可能需要关闭CSRF保护。可以通过配置http.csrf(AbstractHttpConfigurer::disable)来实现。 自定义拦截器或者过滤器： 可能由于配置不当，可以尝试检查一遍 Spring Security 默认启用跨站请求伪造（CSRF）保护。CSRF 是一种通过欺骗受害者提交恶意请求并利用受害者的凭证代表其执行非预期功能的攻击。如果用于防范此类攻击的 CSRF token 丢失或不正确，服务器也可能会响应 403 错误。 解决 POST 请求中的 403 错误默认情况下，Spring Security 会启用 CSRF 保护。如果请求头中缺少 CRSF token，服务器就会响应 403 错误。此行为不针对任何服务器环境，包括 localhost、暂存或生产环境。 通常我们都会做前后端分离，所以需要禁用CSRF保护，如果你的后端出现这个问题可以看看你是不是这样写的http.csrf(Customizer.withDefaults())，这个其实是启用，默认开启的。 我们可以通过禁用 CSRF 保护来解决这个问题： @Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception http .authorizeHttpRequests((authorize) - authorize // 放行登录,注册页面 .requestMatchers(/auth/login, /auth/register).permitAll() // 拦截其他所有请求 .anyRequest().authenticated() ) .csrf(AbstractHttpConfigurer::disable); // 禁用CSRF return http.build(); 在上面的代码中，我们通过调用 disable() 方法禁用了 CSRF 保护。这里注意，这里的配置不携带凭证（不登陆）是无法访问其他页面的，只能请求注册，登陆。如果想放行所有请求，可以把requestMatchers(/auth/login, /auth/register)替换为anyRequest()，意为任何请求。 再次访问可能会出现预期的结果，如果没有，请再次检查你的配置文件。 不过，需要注意的是，一般不建议在生产环境中禁用 CRSF 保护。CRSF 保护是防止跨站伪造攻击的重要安全措施。因此，建议在状态更改操作的请求头中包含 CRSF token。 认证凭证请求需要认证的端点，但是未提供认证凭证，或者是错误的凭证，都可能会导致 Spring Boot 应用程序出现 403 错误。 让我们修改 SecurityFilterChain，以对服务器的所有请求进行认证： @Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception http .authorizeHttpRequests((authorize) - authorize // 放行登录,注册页面 .requestMatchers(/auth/login, /auth/register).permitAll() // 拦截其他所有请求 .anyRequest().authenticated() ) .httpBasic(Customizer.withDefaults()) .formLogin(Customizer.withDefaults()) .cors(AbstractHttpConfigurer::disable) .csrf(AbstractHttpConfigurer::disable); return http.build(); 在上面的代码中，我们将应用程序配置为在允许访问前对每个请求进行身份认证。如果我们在未提供正确凭证的情况下向端点发出 POST 请求，服务器将响应 403 错误。 参考：https://springdoc.cn/java-spring-fix-403-error/","tags":["问题"],"categories":["SpringBoot"]},{"title":"华为天翼网关电信光猫HS8145C获取超级密码以及一些无法上网解决方案","path":"/posts/2024/07/26/124238/","content":"前提下载ONT组播配置工具218版 拔掉光猫的电源和光纤，切记一定要拔掉！！！ 还有这里的光猫不是那个可以活蹦乱跳的猫，他是一个设备！这里的光纤不是与电脑连接的那根线，与电脑连接的线是网线，这两区别是光纤不能导电。光纤是光猫底部那条线，不是侧面的那一排端口。 ONT使能开启Telnet获取超级密码 解压然后打开ONT组播配置工具218版.exe这个文件，打开后，在右上角点击设备支持状态。切记一定要拔掉电源和光纤，不然法用！！！ 找到网卡选项，选择你的有线网卡，一般名字都是Realtek PCIe FE Family Controller，如果不是，那你找和他长的差不多的，实在不行一个个试，总能找到。其他的不需要改。 一切准备就绪后点击下面的启动即可。等设备状态（Status）显示Success即可点击停止。然后迅速重启光猫。 等你的光猫启动好后，快速打开网页，电信就：192.168.1.1，其他192.168.1.0，如果能正常访问就打开超密密文批处理工具.bat这个文件，如果里面的命令没有正常输入到窗口中，可以自行重来，然后快速点击窗口。一直卡在open 192.168.1.1哪里，重启光猫，重新来一遍。 如图中的telecomadmin为超管账号，JFKA!YaK为超级密码，复制保存密码。切记：重启光猫！！！ 等启动好后，打开192.168.1.1，我的是电信，联通的是192.168.1.0。然后在密码框写入刚刚复制的密码，账号可以直接默认，如果不能登陆就改telecomadmin。最后就成功啦！ 无法上网 问题如果出现不能上网问题，多半是DNS让污染了。 解决DNS问题可以自行在你的手机或者电脑设置成静态，配置DNS。 可以使用这个IPV4的南京信风DNS 114.114.114.114 114.114.115.115（备用） IPV6的Aliyun DNS 2400:3200::1 2400:3200:baba::1（备用） 也可以使用其他的，我只举出这一个。 光猫网络配置改错导致这边给出我这里能正常上网的配置，我这边建议非专业人士最好不要乱改，这东西很容易上不了网，我就是其中一个例子！！！如果还是要改记得备份你需要修改的配置参数，可以截图，有U盘可以U盘备份。 切记：改配置一定要备份，小心上不了网找运营商那就麻烦了！！！","tags":["光猫","Telent","华为"],"categories":["网络"]},{"title":"Java中的List对象复制引用问题","path":"/posts/2024/06/06/141925/","content":"Java中的List对象复制：深入解析与实例演示在Java编程中，对List进行复制是一个常见的需求。然而，复制List并不是一个简单的任务，因为它涉及到浅拷贝和深拷贝的概念。本文将深入探讨Java中复制List的不同方法，并提供详细的实例演示。 List的复制问题在Java中，当你执行list1 = list2时，你实际上是将list1这个引用变量指向了list2所指向的同一个列表对象。这意味着，list1和list2现在是同一个列表对象的两个不同引用。因此，任何对list2的修改都会反映在list1上，因为它们都指向同一个对象。 ListString list1 = new ArrayList();list1.add(Apple);list1.add(Banana);ListString list2 = list1; // list1 和 list2 现在指向同一个对象// 修改 list2list2.add(Cherry);// 打印 list1，可以看到 list1 也发生了变化System.out.println(list1: + list1); // 输出 list1: [Apple, Banana, Cherry] 复制List的方法为了避免上述问题，我们需要创建一个list2的副本，使得对list2的修改不会影响list1。下面是几种复制List的方法，包括实例代码和简要说明： 1. 使用循环遍历ListString list1 = new ArrayList(Arrays.asList(Apple, Banana));ListString list2 = new ArrayList();for (String item : list1) list2.add(item); 这种方法通过遍历原始列表，并手动将每个元素添加到新列表中。新列表是一个独立的副本。 2. 使用List构造方法ListString list1 = new ArrayList(Arrays.asList(Apple, Banana));ListString list2 = new ArrayList(list1); 这种方法通过ArrayList的构造函数创建一个新的列表，并将原始列表的所有元素添加到新列表中。新列表是一个独立的副本。 3. 使用addAll()方法ListString list1 = new ArrayList(Arrays.asList(Apple, Banana));ListString list2 = new ArrayList();list2.addAll(list1); 这种方法使用addAll()方法将原始列表的所有元素添加到新列表中。新列表是一个独立的副本。 4. 使用Collections.copy()方法ListString list1 = new ArrayList(Arrays.asList(Apple, Banana));ListString list2 = new ArrayList(list1.size());Collections.copy(list2, list1); 这种方法使用Collections.copy()方法将原始列表的所有元素复制到新列表中。新列表是一个独立的副本。 5. 使用Java 8 Stream APIListString list1 = new ArrayList(Arrays.asList(Apple, Banana));ListString list2 = list1.stream().collect(Collectors.toList()); 这种方法使用Stream API来创建一个包含原始列表所有元素的新列表。新列表是一个独立的副本。 6. 使用JDK 10的copyOf()方法ListString list1 = List.of(Apple, Banana);ListString list2 = List.copyOf(list1); 这种方法利用JDK 10引入的copyOf()方法来创建一个不可变的列表副本。 浅拷贝 vs 深拷贝在复制包含对象引用的列表时，重要的是要理解浅拷贝和深拷贝的区别： 浅拷贝：复制的是对象引用本身，而不是对象本身。这意味着，如果原始列表中的对象被修改，这些修改将反映在副本列表中，因为它们引用的是同一个对象。 深拷贝：复制的是对象本身，创建一个完全独立的副本。对原始对象或副本对象的修改不会影响另一个对象。在实际应用中，选择浅拷贝还是深拷贝取决于具体的需求。如果需要完全独立的副本，那么应该选择深拷贝。如果只是需要一个相同元素的列表，而不关心原始对象的修改，那么浅拷贝就足够了。希望这些方法和实例能够帮助你更好地理解在Java中复制List的不同方式。","tags":["问题"],"categories":["Java"]},{"title":"Spring整合Redis出现乱码问题","path":"/posts/2024/06/06/124825/","content":"问题我们从服务器上看到对应的keys，是这样的 127.0.0.1:6379 keys *1) \\xac\\xed\\x00\\x05t\\x00\\x04name 解决乱码问题在Spring Boot中集成Redis的乱码问题，通常来说应该是编码问题。 配置RedisTemplateSpring Boot会自动配置RedisTemplate，但默认情况下，它使用的是JDK的序列化机制，这可能会导致乱码问题。为了防止乱码，你可以自定义RedisTemplate的配置，使用StringRedisTemplate，它默认使用StringRedisSerializer，可以避免乱码问题。 @Configurationpublic class RedisConfig @Bean(redisTemplate) public RedisTemplateString, Object redisTemplate(RedisConnectionFactory factory) RedisTemplateString, Object template = new RedisTemplate(); template.setConnectionFactory(factory); //Json序列化配置 Jackson2JsonRedisSerializerObject Jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper mp = new ObjectMapper(); mp.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); mp.activateDefaultTyping(mp.getPolymorphicTypeValidator()); Jackson2JsonRedisSerializer.serialize(mp); //Spring的序列化 StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); //key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); //hash的key也采用string的序列化方式 template.setHashKeySerializer(stringRedisSerializer); //valye的序列化方式采用的是jackson template.setValueSerializer(Jackson2JsonRedisSerializer); //hash的value序列化方式采用jackson template.setHashValueSerializer(Jackson2JsonRedisSerializer); // 设置其他的k-v的默认的序列化 template.setDefaultSerializer(Jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; 使用RedisTemplate在你的服务中注入RedisTemplate并使用它： @Servicepublic class RedisService @Resource private RedisTemplate redisTemplate; public void set(String key, String value) redisTemplate.opsForValue().set(key, value); public String get(String key) return (String) redisTemplate.opsForValue().get(key); 仍然遇到乱码问题如果你在使用RedisTemplate时仍然遇到乱码问题，可能是因为Redis服务器的默认编码不是UTF-8。你可以通过修改Redis配置文件（通常是redis.conf）来设置默认编码为UTF-8： # redis.confappendonly yesappendfsync everysec# 设置Redis的默认编码为UTF-8client-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60 redis-cli 中文出现乱码问题解决 redis会将存储的中文数据转成16进制，所以我们在连接控制台的时候将redis-cli改为redis-cli –raw输入进去即可 重启Redis服务后，乱码问题应该会得到解决。 以上步骤应该能帮助你在Spring Boot中集成Redis并解决乱码问题。如果问题依旧存在，可能需要检查Redis服务器的配置或网络传输过程中的编码问题。","tags":["问题"],"categories":["Redis"]},{"title":"Android的DSU Loader动态系统更新不显示问题","path":"/posts/2024/06/06/120912/","content":"我使用的系统HyperOS 1.0.8.0.UMNCNXM 使用 DSU 尝鲜新系统DSU 是动态系统更新（Dynamic System Updates）的缩写，是一项在 Android 10 及以上版本中引入的功能，可以让用户在不重启设备的情况下更新系统镜像。 必备条件一台 Android 10+ 的安卓设备支持动态分区 支持 GSI对于设备有一定的了解如果你不确定自己的设备是否支持动态分区特性，建议先下载安装 Treble Check 这个应用打开看看。 问题描述在Android 10+设备上，开发者选项里面没有找到DSU Loader这个选项，也没有找到DSU这个选项，也有可能由于HyperOS的缘故，由于没有解锁bl获取最高权限，通常来说是不需要的。 解决方法对于这个问题，我手机是解了bl锁的嘛，刷了ksu或者magisk，刷了一些模块，刚开始啥也没干是可以找到这个选项的，也可以正常使用。 多种尝试，终于解决了这个问题。 多种尝试后，原来是刷了一些隐藏模块导致的问题，具体受影响的模块为： 禁用这2个模块重启手机即可，如果还是没用可以尝试禁用关于隐藏的agisk模块XP模块，还是不行，全部禁用一个一个找原因。 如果你的手机没刷机，也没显示，可能是厂商阉割掉了。注意该特性只对于Android10+以上才有的，低于不显示很正常，不支持嘛。","tags":["问题"],"categories":["Android"]},{"title":"RealSR-NCNN-Android：图片放大工具","path":"/posts/2024/02/07/153642/","content":"RealSR-NCNN-AndroidRealSR-NCNN-Android 是一个简单的 Android 应用程序，它基于 Waifu2x-NCNN、SRMD-NCNN、RealCUGAN-NCNN、RealSR-NCNN 和 Real-ESRGAN、Anime4KCPP。 超分辨率是指将低质量压缩图片恢复成高分辨率图片的过程，用更常见的讲法就是放大图片并降噪。随着移动互联网的快速发展，智能设备逐渐普及到生活的每个角落。随之而来的是大量的图像数据。有的图片本身分辨率就比较低，难以看清楚细节；有的在存储和传输的过程中被反复压缩和劣化，最终不再清晰。为了获得更加高质量的视觉体验，或者出于更为基本的目的看清楚图片，图像恢复超分辨率算法应运而生。而手机作为目前我们生活中最常使用的智能设备，显然有使用这一技术的迫切需求。 这个项目正是为安卓设备构建的一个图像超分辨率的应用。具有如下特点： 内置超分算法和模型多。最初使用了RealSR-NCNN和Real-ESRGAN的成果，后来又添加了SRMD-NCNN和RealCUGAN-NCNN, Anime4KCPP。同时也内置了waifu2x-ncnn（但是没有内置模型和预设命令，如有需求自行下载并添加） 兼顾传统插值算法。包括常见的nearest、bilinear、bicubic算法，以及imagemagick的二十多种filter。 内置缩小算法。除使用用户指定倍率和算法的缩小方式外，resize-ncnn设计了一种自动缩小的算法de-nearest。参见笔记 支持图形界面和命令行两种操作方式使用。 转换结果先预览，满意再导出，不浪费存储空间。 导出文件自动按照模型和时间命名，方便管理。 自定义优先选用的超分算法和模型。 自定义预设命令。 图片处理过程完全在本地运行，无需担心隐私泄漏、服务器排队、服务收费；处理耗时取于决选择的模型、图片大小以及设备的性能。 项目地址https://github.com/tumuyan/RealSR-NCNN-Android该项目由tumuyan提供，并非我! 如何使用RealSR-NCNN-Android-GUI选择文件的两种方法： 将其他应用（例如图库）中的一张或多张图片共享到此应用 在本应用中，点击选图选择图片 支持两种操作方式: 点击放大（视图片大小和设备性能需要等待不同时间——毕竟原项目是使用电脑显卡运行的）- 查看放大效果是否满意，如果满意点击导出保存到相册。也可以在运行前切换使用的模型。切换模型后无需重新选择图片。运行过程中点击右上角进度可以终止运行；运行过程中切换模型并点击运行，或者直接输入命令并回车，可以终止上次任务并开始执行新的任务。 直接在输入框内输入命令完成调用(可以输入help查看更多信息) 应用依赖于vulkan API，所以对设备有如下要求：使用了比较新的SOC。经过实际测试，骁龙853（GPU Adreno510）可以处理较小的图片系统支持vulkan。（Google在Android7.0中增加了vulkan的集成，但是您的设备厂商不一定提供了这项支持） 图片放大算法说明https://note.youdao.com/s/6XlIFbWt 向 RealSR-NCNN-Android-GUI 添加更多模型RealSR-NCNN-Android-GUI 在 ver 1.7.6 以上的版本可以自动加载自定义模型。 你可以从 https://github.com/tumuyan/realsr-models 下载更多模型： 在文件管理器里新建一个目录 在App的设置中，自定义模型路径的选项里填入刚才新建目录的路径，点击保存 下载模型并复制到刚才新建的目录里 返回App，可以看到下拉菜单增加了新的模型 你自己也可以把pth格式的模型转换为本应用可用的ncnn模型。 从 https://upscale.wiki/wiki/Model_Database 下载模型并解压，下载 cupscale 并解压，打开 CupscaleData\\bin\\pth2ncnn, 用 pth2ncnn.exe 转换 pth 文件为 ncnn 模型文件重命名文件，举例： models-Real-ESRGAN-AnimeSharp // 目录需要用 models-Real- 或 models-ESRGAN- 开头├─x4.bin // 模型名称为 x[n], n 是放大倍率├─x4.param 如何使用 RealSR-NCNN-Android-CLI下载模型你可以从 github release 页面下载 assets.zip, 或者从 https://github.com/tumuyan/realsr-models 下载所需模型，需要注意不同程序需要用对应的模型 示例命令确保 elf 文件具有执行权限。然后输入命令 ./realsr-ncnn -i input.jpg -o output.jpg 完整用法其他程序的用法与realsr-ncnn相同。 用法: realsr-ncnn -i 输入的图片路径 -o 输出的图片路径 [其他可选参数]... -h 显示帮助 -v 显示更多输出内容 -i input-path 输入的图片路径（jpg/png/webp路径或者目录路径） -o output-path 输出的图片路径（jpg/png/webp路径或者目录路径） -s scale 缩放系数(默认4，即放大4倍) -t tile-size tile size (=32/0=auto, default=0) can be 0,0,0 for multi-gpu -m model-path 模型路径 (默认模型 models-Real-ESRGAN-anime) -g gpu-id gpu，-1使用CPU，默认0 多GPU可选 0,1,2 -j load:proc:save 解码/处理/保存的线程数 (默认1:2:2) 多GPU可以设 1:2,2,2:2 -x 开启tta模式 -f format 输出格式(jpg/png/webp, 默认ext/png) 使用报错vkQueueSubmit failed -4 使用real-esrgan-x4模型通常会报错，这是参数没有设置的原因。打开软件设置，设置Tile Size参数，最小值为32。 使用实践这是一张很小较模糊的图片，现在我们让它变大变清晰。使用软件，我们可以得到这张图。第一张图与这张图形成了明显的对比，图片变大的同时也清晰了不少，这是这个软件的强大之处。 如何获取？这里提供网盘，但是不保证一直是最新版本，可前往上面的开源地址。","tags":["RealSR","图片处理","Android"],"categories":["工具"]},{"title":"Nginx安装与配置","path":"/posts/2024/02/04/211231/","content":"NginxNginx 是一款轻量级、高性能的 HTTP 和反向代理服务器，同时也提供了 IMAPPOP3SMTP 服务。它是由俄罗斯的程序员 Igor Sysoev 为了满足俄罗斯访问量极大的 Rambler.ru 站点的高负载需求而开发的。 安装 Nginx在 Linux 系统中，您可以使用包管理器来安装 Nginx。以下是在基于 Debian 的系统（如 Ubuntu）上安装 Nginx 的命令： sudo apt-get updatesudo apt-get install nginx 在基于 Red Hat 的系统（如 CentOS）上安装 Nginx 的命令： sudo yum install nginx 安装完成后，您可以通过运行以下命令来启动 Nginx 服务： sudo systemctl start nginx 要使 Nginx 服务在系统启动时自动运行，您可以使用以下命令： sudo systemctl enable nginx 了解您的需求，让我们深入探讨 Nginx 的使用和配置。以下是一个更详细的指南： 配置 NginxNginx 的主配置文件通常位于 /etc/nginx/nginx.conf，而站点特定的配置文件通常位于 /etc/nginx/sites-available/ 目录下。 配置文件结构Nginx 配置文件由多个部分组成，包括全局设置、事件模块、HTTP 设置、server 块等。 # 全局设置events worker_connections 1024;http # 文件扩展名与文件类型映射表 include mime.types; default_type application/octet-stream; # 开启目录列表访问，适合开发环境 autoindex on; # 设置日志 log_format main $remote_addr - $remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for; access_log /var/log/nginx/access.log main; error_log /var/log/nginx/error.log notice; # 配置服务器 server listen 80; server_name example.com; # 位置（path）设置 location / root /usr/share/nginx/html; index index.html index.htm; # 错误页面 error_page 404 /404.html; 配置一个简单的网站要配置一个简单的网站，您需要创建一个 server 块，并指定 listen 指令来监听端口，server_name 指令来指定域名，以及 location 指令来配置网站的路径和文件。 server listen 80; server_name example.com; location / root /var/www/example.com; index index.html index.htm; 配置虚拟主机要为多个域名配置同一个服务器，您可以使用多个 server 块，并为每个域名指定不同的 server_name。 server listen 80; server_name example.com; # ...server listen 80; server_name www.example.com; # ... 配置静态文件服务如果您想要配置 Nginx 来服务静态文件，您可以使用 root 指令来指定文件路径。 server listen 80; server_name example.com; location / root /var/www/example.com; index index.html index.htm; 配置反向代理Nginx 也可以用作反向代理服务器。以下是一个配置反向代理的例子： server listen 80; server_name example.com; location / proxy_pass http://backend; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; 在这个配置中，proxy_pass 指令指定了后端服务器的地址。proxy_set_header 指令用于设置发送到后端服务器的 HTTP 头信息，包括原始请求的 Host、X-Real-IP（客户端的真实 IP）、X-Forwarded-For（客户端的原始 IP）和 X-Forwarded-Proto（原始请求的协议）。 配置 SSLTLS为了安全地传输数据，您应该为您的网站配置 SSLTLS。您可以使用 Let’s Encrypt 提供的免费证书。以下是如何为 Nginx 配置 SSL 的基本步骤： 申请证书，可使用acme.sh工具来申请证书，也可以通过网站来申请证书。 创建一个 SSL 配置文件： server listen 443 ssl; server_name example.com www.example.com; ssl_certificate /etc/ssl/certs/example.com.crt; ssl_certificate_key /etc/ssl/private/example.com.key; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_prefer_server_ciphers on; location / root /var/www/example.com; index index.html index.htm; 配置 HTTP2HTTP2 是 HTTP 的一个新版本，它提供了更高的性能和更好的错误检测。要为 Nginx 配置 HTTP2，您需要确保您的服务器支持 HTTP2，并且客户端也支持 HTTP2。以下是如何为 Nginx 配置 HTTP2 的基本步骤： 确保您的操作系统支持 HTTP2。 确保您的 Nginx 版本支持 HTTP2。 打开 nginx.conf 文件，并添加以下内容：http # ... server listen 443 ssl http2; server_name example.com; ssl_certificate /etc/ssl/certs/example.com.crt; ssl_certificate_key /etc/ssl/private/example.com.key; # ... (其他 SSL 配置) location / # ... 配置 HTTPS 重定向为了确保所有流量都通过 HTTPS 传输，您应该将所有 HTTP 请求重定向到 HTTPS。您可以在 server 块中使用 return 指令来实现。 server listen 80; server_name example.com; return 301 https://$host$request_uri; 配置高可用性和负载均衡为了提高网站的可靠性，您可以配置 Nginx 作为高可用性和负载均衡服务器。这通常涉及到设置多个 Nginx 实例和一个或多个后端服务器。以下是一个简单的负载均衡配置示例： http upstream backend server backend1.example.com; server backend2.example.com; server backend3.example.com; server listen 80; server_name example.com; location / proxy_pass http://backend; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; 在这个配置中，upstream 指令定义了一个后端服务器的集合，proxy_pass 指令将请求转发到这个集合中的任意一个服务器。 配置缓存Nginx 支持在服务器端缓存静态文件，这可以提高网站的性能。以下是一个简单的缓存配置示例： server listen 80; server_name example.com; location ~ ^/(images|css|js)/ root /var/www/example.com; expires 30d; access_log off; add_header Cache-Control public; 在这个配置中，location 指令用于匹配特定的 URL 模式，root 指令指定了文件路径，expires 指令设置了缓存期限，access_log 指令禁用了访问日志，add_header 指令添加了一个 Cache-Control 头，指示浏览器缓存该内容。 重启 Nginx在修改完配置文件后，您需要重启 Nginx 服务以使更改生效。您可以使用以下命令来重启 Nginx： sudo systemctl restart nginx 故障排除如果 Nginx 服务无法启动，您可以检查日志文件 /var/log/nginx/error.log 以获取错误信息。","tags":["Web","配置","Nginx"],"categories":["软件"]},{"title":"Spring Boot集成JPA","path":"/posts/2024/02/04/191926/","content":"什么是 Spring Data JPA？Spring Data JPA 是 Spring Data 项目的一部分，它提供了一种简化的数据访问方式，用于与关系型数据库进行交互。它基于 Java Persistence API（JPA） 标准，并提供了一套简洁的 API 和注解，使开发人员能够通过简单的 Java 对象来表示数据库表，并通过自动生成的 SQL 语句执行常见的 CRUD 操作。Spring Data JPA 通过封装 JPA 的复杂性，简化了数据访问层的开发工作，使开发人员能够更专注于业务逻辑的实现。它还提供了丰富的查询方法的定义、分页和排序支持、事务管理等功能，使开发人员能够更方便地进行数据访问和操作。 Spring Data JPA 的优势 简化数据库操作：通过提供丰富的接口和抽象，Spring Data JPA 减少了样板代码的编写。 强大的查询功能：支持基于方法名的查询、JPQL、SQL 以及 Specifications。 集成 Spring 生态系统：与 Spring Boot 无缝集成，提供了事务管理、集成测试等特性。 灵活性和可扩展性：允许自定义 Repository 方法，以实现复杂的数据库操作。 Spring Boot 中集成 Spring Data JPA在 Spring Boot 应用程序中集成 Spring Data JPA 非常简单。以下是一些基本步骤： 步骤 1：添加依赖在 pom.xml 文件中添加 Spring Data JPA 和数据库驱动的依赖。 dependencies !-- Spring Data JPA -- dependency groupIdorg.springframework.boot/groupId artifactIdspring-boot-starter-data-jpa/artifactId /dependency !-- 数据库驱动（以 PostgreSQL 数据库为例） --\tdependency groupIdorg.postgresql/groupId artifactIdpostgresql/artifactId scoperuntime/scope\t/dependency/dependencies 步骤 2：配置数据源在 application.yml 文件中配置数据库连接信息。 spring: datasource: url: jdbc:postgresql://localhost:5432/test # test为数据库，可自行替换 driverClassName: org.postgresql.Driver # PostgreSQL数据库驱动，如果用其他数据库可自行更改 username: natuie # 数据库用户名 password: *** # 数据库密码 jpa: show-sql: true # 在控制台打印执行的SQL语句 hibernate: ddl-auto: update # 指定为update，每次启动项目因表结构变化就会更新/新增字段，表不存在时会新建，如果指定create，则每次启动项目都会清空数据并删除表，再新建 步骤 3：创建实体类定义一个实体类，使用 JPA 注解映射到数据库表。 @Data@NoArgsConstructor@Table(name = book) // 表名@Entitypublic class Book @Id // 主键 @GeneratedValue(strategy = GenerationType.IDENTITY) // 自增 private Integer id; @Column(name = name, nullable = false) // 字段名以及不能为空 private String name; @Column(name = author, nullable = false) private String author; public Book(String name, String author) this.name = name; this.author = author; 步骤 4：创建 Repository 接口创建一个继承 JpaRepository 的接口，用于定义数据访问操作。 public interface BookRepository extends JpaRepositoryBook, Integer ListBook findByName(String name); 步骤 5：使用 Repository在控制层中注入 BookRepository 并使用它来执行数据库操作。 @RestControllerpublic class Demo private final BookRepository bookRepository; @Autowired public Demo(BookRepository bookRepository) this.bookRepository = bookRepository; @GetMapping(/demo) public Book demo(String name) return bookRepository.findByName(name); 运行项目，请求/demo这个api，可以看到返回了这本书的信息。 JPA基本注解 注解 解释 @Entity 声明类为实体。 @Table 声明实体类对应的表名。如果省略，默认表名将与实体类名相同。 @Column 指定实体类属性映射到数据库表的列名。如果省略，默认列名将与属性名相同。 @Id 指定实体类的唯一标识符，通常为主键。 @GeneratedValue 指定主键的生成策略，如自动增长、序列、UUID等。 @Transient 表示该属性并非一个数据库表的字段的映射，ORM框架将忽略该属性。 @ColumnResult 用于指定查询结果中的列名。 @Embedded 用于注释属性，表示该属性的类是嵌入类。 @Embeddable 用于注释Java类，表示该类是嵌入类。 @Basic 指定实体属性的加载方式，如是否懒加载。 @SequenceGenerator 指定序列生成器的策略，用于生成主键。 @TableGenerator 在数据库中生成一张表来管理主键生成策略。 @AccessType 设置访问类型，决定是否通过字段或通过gettersetter方法访问实体属性。 @UniqueConstraint 指定实体类属性组合的唯一约束。 @NamedQueries 指定命名查询的列表，用于在JPQL中定义命名查询。 @NamedQuery 指定使用静态名称的查询，通常在接口中使用。 基本用法插入要插入一个新的书籍，您可以使用 save 方法。 bookRepository.save(new Book(学习Spring Boot, 学习者)); 查询在 Spring Data JPA 中，查询关键字映射是通过方法名到查询逻辑的映射。这些映射是基于约定的，也就是说，Spring Data JPA 会根据接口方法的名字来推断要执行的查询。以下是一些常见的查询关键字映射： 基本查询 findByFieldName: 查找具有指定字段值的实体。 readByFieldName: 类似于 findBy，但通常用于只读操作。 getByFieldName: 类似于 findBy，但通常用于获取单个实体。 queryByFieldName: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldName: 流式地查找具有指定字段值的实体。 多个字段 findByFieldName1AndFieldName2: 查找具有指定字段组合值的实体。 readByFieldName1AndFieldName2: 类似于 findBy，但通常用于只读操作。 getByFieldName1AndFieldName2: 类似于 findBy，但通常用于获取单个实体。 queryByFieldName1AndFieldName2: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldName1AndFieldName2: 流式地查找具有指定字段组合值的实体。 字段比较 findByFieldNameEqValue: 查找字段等于指定值的实体。 readByFieldNameEqValue: 类似于 findBy，但通常用于只读操作。 getByFieldNameEqValue: 类似于 findBy，但通常用于获取单个实体。 queryByFieldNameEqValue: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldNameEqValue: 流式地查找字段等于指定值的实体。 字段不等 findByFieldNameNotEqValue: 查找字段不等于指定值的实体。 readByFieldNameNotEqValue: 类似于 findBy，但通常用于只读操作。 getByFieldNameNotEqValue: 类似于 findBy，但通常用于获取单个实体。 queryByFieldNameNotEqValue: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldNameNotEqValue: 流式地查找字段不等于指定值的实体。 字段包含 findByFieldNameContainingValue: 查找字段包含指定值的实体。 readByFieldNameContainingValue: 类似于 findBy，但通常用于只读操作。 getByFieldNameContainingValue: 类似于 findBy，但通常用于获取单个实体。 queryByFieldNameContainingValue: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldNameContainingValue: 流式地查找字段包含指定值的实体。 字段不包含 findByFieldNameNotContainingValue: 查找字段不包含指定值的实体。 readByFieldNameNotContainingValue: 类似于 findBy，但通常用于只读操作。 getByFieldNameNotContainingValue: 类似于 findBy，但通常用于获取单个实体。 queryByFieldNameNotContainingValue: 类似于 findBy，但提供更灵活的查询构造。 streamByFieldNameNotContainingValue: 流式地查找字段不包含指定值的实体。 字段开始于 findByFieldNameStartingWithValue: 查找字段以指定值开始的实体。 readByFieldNameStartingWithValue: 类似于 findBy，但通常用于只读。 下面给出示例： public interface BookRepository extends JpaRepositoryBook,Integer Book findByName(String name); Book findByNameAndAuthor(String name, String author); 这个示例中，我们看到，我们只是通过方法名来定义要做什么，并无需手写具体实现方法，这极大的有利于我们快速开发。findByName方法通过name来获取书籍，如果存在同名，需要返回List，不然会报错。 下面根据书名来查找书籍，通过调用上面写的findByName 方法来实现。 bookRepository.findByName(name); 查找所有书籍。 bookRepository.findAll(); 更新要更新一个书籍，也使用 save 方法，首先查找书籍再更新。 Book book = bookRepository.findByName(name);book.setName(newName) // 这样就可以更新掉原来的名字，不存在会自动插入bookRepository.save(book); 删除要删除所有指定名称的书籍，您可以调用 deleteAllByName 方法。删除和查找的方法名命名是一样的，它也具有这样的功能，区别在于它前缀是delete。 bookRepository.deleteAllByName(name); 分页如果您想要获取分页的书籍列表，您可以使用 Pageable 参数。这里的PageRequest.of有2个参数，pageNumber：页数，pageSize：每页多少页。 bookRepository.findAll(PageRequest.of(1, 2)).getContent(); 排序方法1： 基于特殊参数的排序建立分页对象: Pageable pageable = new PageRequest(pageNum, pageSize); 在Repository中定义相应的方法： PageBook findByOrderByNameAsc(Pageable pageable); // 按照名字来升序，Desc：降序,Asc：升序 这里使用默认的字段拼接形成的方法名，从而自动解析形成对应的方法，具体见前面。 方法2： 基于自定义的@Query进行排序建立分页对象： Pageable pageable = new PageRequest(pageNum, pageSize); 在Repository中定义相应的语句： @Query(select b from Book b ORDER BY b.name ASC)PageBook findInOrders(Pageable pageable); 方法3： 基于Pageable中的Sort字段Pageable对象的声明： Sort sort = new Sort(Direction.ASC, name);Pageable pageable = new PageRequest(pageNum, pageSize, sort); 这里将Sort字段作为参数创建了Pageable对象。在Repository无需声明任何新的方法，直接使用JpaRepository中继承而来的findAll(Pageable pageable）方法即可。调用具体Repository中的方法如下： PageBook book = bookRepository.findAll(pageable); 以上只提供的一些简单的用法，更多文档可参考Spring Data JPA 中文文档 (springdoc.cn)","tags":["JPA","PostgreSQL"],"categories":["Spring Boot"]},{"title":"Git提交规范","path":"/posts/2024/02/03/233356/","content":"1.提交消息规范 使用提交消息模板： 创建一个提交消息模板，包括三个部分：header、body和footer。 示例模板：# 提交消息模板## 头部（必填）类型(范围): 标题## 主体（选填）空一行详细描述更改、解决的问题、相关issues等## 底部（选填）空一行关闭相关issues的标记 提交类型： 类型用于说明 commit 的目的，常见的 commit 类型包括：feat（新特性）、fix（修复问题）、docs（文档更新）、style（样式更新）、refactor（代码重构）、test（测试更新）等。 范围： 范围用于说明 commit 影响的范围，如 frontend、backend、database、security 等。 标题： 标题应简洁明了，准确反映 commit 的主要目的。 主体： 主体部分应详细描述 commit 的更改内容、解决的问题和相关的 issues。 可以使用 markdown 格式来增强提交消息的可读性。 底部： 底部可以标记关闭相关的 issues。例如：”Closes #123”，”Fixes #456”。 遵循一致的命名约定： 尽量使用小写字母和破折号，如：”feat-add-comment-function”。 避免使用大写字母和下划线。 不要在提交消息中包含特殊字符： 避免在提交消息中使用特殊字符，如中文、特殊符号等，以免引起解析错误。 保持简洁： 尽量保持提交消息的简洁，避免过长的描述。 使用英文： 虽然可以使用其他语言，但英文是 Git 社区中最常用的语言，使用英文可以确保更广泛的参与和理解。 2. 实际提交步骤2.1 初始化仓库git init 2.2 添加文件到仓库git add . 2.3 提交更改git commit 这将启动一个文本编辑器，您可以在这个编辑器中输入提交消息。如果您在命令行中直接输入提交消息，也可以直接按 Enter 键。 2.4 查看提交历史git log 2.5 创建分支git branch feature-user-registration 2.6 切换到新分支git checkout feature-user-registration 2.7 继续开发在分支上继续工作，进行多次提交。 2.8 合并分支git merge feature-user-registration 2.9 推送更改到远程仓库git push origin main 2.10 推送到特定分支如果需要将更改推送到特定的远程分支，可以指定分支名称： git push origin feature-user-registration 2.11 删除本地分支在合并分支后，可以删除本地分支： git branch -d feature-user-registration 2.12 删除远程分支如果不再需要远程分支，可以删除它： git push origin --delete feature-user-registration 提交消息实例feat(auth): Implement user registration formAdded a new form for user registration that collects name, email, and password. Added basic validation to ensure data integrity.Closes #247 在这个实例中： feat(auth) 表示这是一个新特性（feature）提交，它影响了认证（auth）模块。 Implement user registration form 是标题，简洁地描述了提交的目的。 主体部分详细描述了新用户注册表单的实现，包括收集的信息类型和添加的验证。 底部标记了一个相关的 issue（#247），表示这个问题已经通过这个提交解决了。","tags":["Git","规范"],"categories":["Git"]},{"title":"Git基本的使用指南","path":"/posts/2024/02/03/233341/","content":"本文章只提供常用的一些用法，更多的可参考下方的官方文档！ 一、基础知识 安装Git：首先，您需要在您的计算机上安装Git。您可以从Git官网 下载 并安装适合您操作系统的Git版本。 配置Git：在开始使用Git之前，您需要配置您的用户信息。运行以下命令来设置您的用户名和电子邮件：git config --global user.name Your Namegit config --global user.email your_email@example.com 创建新仓库：要创建一个新的Git仓库，您可以初始化一个现有的目录或创建一个新目录并初始化：git init 添加文件：将文件添加到Git仓库的暂存区，准备提交：git add file 提交更改：将暂存区的文件提交到仓库，并附加一条提交消息：git commit -m 提交的信息 查看状态：查看当前仓库的状态，包括未提交的更改和分支信息：git status 查看日志：查看提交历史记录（包括提交的哈希值、作者、日期、提交信息）：git log 查看特定提交的内容（提交的详细信息，包括提交的哈希值、作者、日期、提交信息、文件内容以及更改的文件列表）：git show commit-hash 查看特定文件在特定提交中的内容（上同）：git show commit-hash:path/to/file 这里 path/to/file 是你想要查看的文件的路径。 在Git版本控制系统中， commit-hash是一个提交（commit）的唯一标识符。每个提交都有一个与之关联的哈希值，这个哈希值是通过SHA-1哈希算法生成的，它保证了每个提交的唯一性。 当你需要引用一个特定的提交时，可以使用其哈希值。可以使用git log来获取提交的哈希值。 二、分支管理 创建分支：创建一个新的分支：git branch branch_name 切换分支：切换到已存在的分支：git checkout branch_name 创建并切换分支：创建一个新分支并立即切换到该分支：git checkout -b branch_name 合并分支：将一个分支的更改合并到当前分支：git merge branch_name 删除分支：删除一个已合并的分支：git branch -d branch_name 三、远程操作 添加远程仓库：将一个远程仓库添加到本地仓库：git remote add remote_name remote_url 克隆远程仓库：从远程仓库克隆到本地：git clone remote_url 拉取远程分支：从远程仓库拉取最新的更改：git pull remote_name branch_name 推送本地分支：将本地分支的更改推送到远程仓库：git push remote_name branch_name 四、高级功能 标签管理：为特定的提交创建标签： git tag tag_name 撤销更改：撤销已提交的更改： git revert commit_hash 变基操作：将一个分支的更改应用到另一个分支上： git rebase branch_name 解决冲突：当合并分支时出现冲突，解决冲突并手动合并更改。 后面会较详细介绍 五、工作流程Git 的工作流程通常包括以下几个步骤： 修改文件：在本地工作目录中修改文件。 暂存更改：使用 git add 命令将更改添加到暂存区。 提交更改：使用 git commit 命令将暂存区的更改提交到仓库。 推送更改：如果有远程仓库，使用 git push 命令将本地提交推送到远程仓库。了解这些基本步骤有助于更好地理解 Git 的工作原理。 六、文件状态转换文件在 Git 中的状态转换通常如下： 未跟踪（Untracked）：文件尚未被 Git 追踪。 已暂存（Staged）：文件已被添加到暂存区，等待被提交。 已提交（Committed）：文件已被提交到仓库。了解这些状态转换有助于更好地管理文件的更改。 七、分支的详细解释分支是 Git 中一个非常重要的概念。它允许您在不影响主代码库的情况下进行实验和开发。以下是对分支的一些详细解释： 主分支（MasterMain）：通常是项目的默认分支，用于稳定和可发布的代码。 特性分支（Feature）：用于开发新功能或实验性更改。 修复分支（Hotfix）：用于快速修复生产环境中的问题。了解不同类型的分支以及如何使用它们有助于更好地组织代码库。 八、远程操作的图解以下是本地仓库与远程仓库之间的基本交互图解： 本地仓库 | | (git push) V远程仓库 了解本地仓库与远程仓库之间的交互有助于更好地进行团队协作和版本控制。 九、解决合并冲突的步骤当合并分支时出现冲突时，通常需要手动解决。以下是一些解决合并冲突的步骤： 1. 查看冲突文件当发生冲突时，Git 会停止合并过程，并提示您查看冲突文件。这些文件通常以 .orig 或 .rej 结尾，表示原始文件和被拒绝的更改。您可以使用 git status 命令来查看哪些文件存在冲突： git status 2. 解决冲突解决冲突通常需要手动编辑冲突文件。Git 会在冲突文件中添加特殊的标记，如 , =======, 和 。这些标记分隔了不同分支的更改。 ：表示来自第一个分支的更改。 =======：表示分隔线。 ：表示来自第二个分支的更改。您需要手动选择保留哪些更改，并删除其他更改。解决冲突后，您可以使用 git add 命令将文件添加到暂存区，并继续合并或变基操作。 3. 继续合并或变基解决所有冲突后，您可以继续合并或变基操作。使用以下命令继续合并： git merge --continue 或者，如果您在变基操作中遇到冲突，可以使用以下命令继续变基： git rebase --continue 4. 跳过冲突如果您不想解决某些冲突，可以跳过它们。使用以下命令跳过所有冲突并继续合并或变基操作： git merge --abort 或者，如果您在变基操作中遇到冲突，可以使用以下命令跳过所有冲突并继续变基： git rebase --abort 5. 解决冲突的其他方法除了手动解决冲突，您还可以使用 git mergetool 命令来解决冲突。git mergetool 命令会启动一个图形化工具，可帮助您解决合并冲突。 十、高级功能的深入介绍标签（Tag）在 Git 中，标签（tag）是一种轻量级的提交引用，它指向提交对象（commit）。标签通常用于标记特定的提交，比如软件版本发布或者里程碑。标签是不可变的历史记录，一旦创建就不能被修改。 创建标签创建标签有几种方法： 使用 git tag 命令：git tag tag_name 这会在当前分支的最近提交上创建一个标签。 给旧提交创建标签：git tag tag_name commit_hash 这允许您给之前的提交创建一个标签。 使用 -a 选项创建带有信息的标签：git tag -a tag_name -m Release v1.0.0 commit_hash 这会在指定提交的哈希值上创建一个标签，并附带一个信息（message）。 使用 -m 选项创建带有信息的标签：git tag -m Release v1.0.0 tag_name 这会在当前分支的最近提交上创建一个标签，并附带一个信息。 查看标签要查看所有标签，可以使用 git tag 命令： git tag 这会列出所有已创建的标签。 删除标签要删除一个标签，可以使用 git tag -d tag_name 命令： git tag -d v1.0.0 这将删除名为 v1.0.0 的标签。 推送标签到远程仓库如果您的标签仅在本地创建，它们不会自动推送到远程仓库。要推送标签到远程仓库，可以使用以下命令： git push origin tag_name 或者，如果您想要推送所有本地标签到远程仓库，可以使用： git push origin --tags 拉取远程仓库的标签如果您想要拉取远程仓库的标签到本地，可以使用以下命令： git fetch origin --tags 这将拉取远程仓库的所有标签到本地，但不会自动添加到本地标签列表中。 打标签的注意事项 不可变性：一旦创建，标签是不可变的，这意味着您不能修改或删除它们。 历史记录：标签作为提交历史的引用，不会随着时间推移而改变。 安全：标签可以被加密，以保护敏感信息。 远程标签：标签可以存储在远程仓库中，也可以只存储在本地。 变基（Rebase）在Git中，变基（rebase）是一种将一系列提交移动到新基础的操作。它通常用于将一个分支的更改合并到另一个分支上，或者在进行交互式变基时重新排列、编辑或压缩提交。变基可以改变历史记录，因此在公共分支上使用时需要格外小心。 基本变基操作假设你有两个分支：master 和 feature。你想要将 feature 分支上的更改合并到 master 分支上，但不想创建合并提交。你可以使用变基来实现这一点： 首先，切换到 feature 分支： git checkout feature 然后，将 feature 分支变基到 master 分支： git rebase master 这会将 feature 分支上的所有提交移动到 master 分支的最新提交之后。 交互式变基交互式变基允许你在变基过程中修改提交。这可以用来合并多个提交、修改提交信息、删除提交或重新排序提交。 要进行交互式变基，使用 -i 或 --interactive 选项： git rebase -i master 这将打开一个文本编辑器，列出 feature 分支上所有从 master 分支分叉之后的提交。你可以在这里选择要进行的操作，比如 pick（保留提交）、reword（修改提交信息）、edit（修改提交内容）、squash（合并提交）等。 注意事项 不要在公共分支上变基：如果你已经将变基后的分支推送到远程仓库，那么在公共分支上使用变基可能会导致其他协作者的仓库出现冲突。在进行变基之前，最好先与团队成员沟通。 使用变基前备份：在执行变基操作之前，最好备份你的工作，以防万一。 解决冲突：在变基过程中，你可能会遇到冲突。你需要手动解决这些冲突，然后使用 git add 标记冲突已解决，最后使用 git rebase --continue 继续变基过程。 diff 命令diff 命令用于显示工作目录、暂存区和上一个提交之间的差异。它可以帮助您了解哪些文件被添加、修改或删除，以及这些更改的具体内容。 1. 查看工作目录与暂存区之间的差异要查看工作目录与暂存区之间的差异，可以使用以下命令： git diff 这会显示所有已跟踪文件的工作目录与暂存区之间的差异。 2. 查看工作目录与上次提交之间的差异要查看工作目录与上次提交之间的差异，可以使用以下命令： git diff HEAD 这会显示工作目录与上次提交之间的差异。 3. 查看暂存区与上次提交之间的差异要查看暂存区与上次提交之间的差异，可以使用以下命令： git diff --cached 这会显示暂存区与上次提交之间的差异。 4. 查看两个提交之间的差异要查看两个提交之间的差异，可以使用以下命令： git diff commit_hash_1 commit_hash_2 这会显示两个提交之间的差异。 5. 查看多个提交之间的差异要查看多个提交之间的差异，可以使用以下命令： git diff commit_hash_1..commit_hash_2 这会显示两个提交之间的差异。 log 命令log 命令用于显示提交历史记录。它可以帮助您查看提交的时间、作者、提交信息等信息。 1. 查看提交历史要查看提交历史，可以使用以下命令： git log 这会显示提交历史记录，包括提交的时间、作者、提交信息等信息。 2. 查看特定提交的历史要查看特定提交的历史，可以使用以下命令： git log commit_hash 这会显示指定提交的历史记录。 3. 查看提交日志的格式化输出要查看提交日志的格式化输出，可以使用以下命令： git log --oneline 这会显示提交日志的简洁格式化输出。 4. 查看提交日志的详细信息要查看提交日志的详细信息，可以使用以下命令： git log --graph --oneline 这会显示提交日志的图形化格式化输出。 5. 查看特定文件的历史更改要查看特定文件的历史更改，可以使用以下命令： git log -- file_path 这会显示指定文件的历史更改。 撤销更改在 Git 中，撤销更改通常指的是回退到之前的某个提交状态。撤销更改可以通过几种不同的方式实现，具体取决于您想要撤销的是已提交的更改还是未提交的更改。以下是一些常见的撤销更改的方法： 使用 git reset 撤销更改git reset 命令用于将当前分支的HEAD指针移动到指定的提交，同时可以选择性地重置暂存区和工作目录。它有三种主要模式：--soft, --mixed（默认），和 --hard。 撤销提交但保留更改 (--soft): git reset --soft commit-hash 这将撤销提交，但保留更改在暂存区。 撤销提交并重置暂存区 (--mixed): git reset commit-hash 这将撤销提交并重置暂存区，但保留更改在工作目录。 撤销提交并丢弃更改 (--hard): git reset --hard commit-hash 这将撤销提交并丢弃所有更改，包括工作目录中的更改。 假设你有以下提交历史： A -- B -- C -- D (HEAD) 如果你想要撤销提交 C，你可以使用： git reset --hard B 这将把HEAD指针移动到提交 B，丢弃 C 和 D 的更改。 使用 git revert 撤销更改git revert 命令用于创建一个新的提交，该提交撤销了指定提交所做的更改。它不会改变历史记录，而是通过添加一个新的提交来记录撤销操作。 撤销更改git revert commit-hash 假设你有以下提交历史： A -- B -- C -- D (HEAD) 如果你想要撤销提交 C，你可以使用： git revert C 这将创建一个新的提交 E，它撤销了提交 C 的更改。提交 E 将成为新的HEAD。 撤销最近提交git revert HEAD~number_of_commits Git会创建一个新的提交，该提交将撤销最近一次提交（即HEAD指向的提交）所做的更改。 这里，HEAD 是一个特殊的指针，它指向当前检出的分支的最新提交。因此，git revert HEAD 实际上是撤销了当前分支上最新的提交所做的更改。这将创建一个新的提交，撤销指定数量的上一个提交，用于撤销一个或多个提交所做的更改。 假设你想要撤销最近的两个提交，你可以使用以下命令： git revert HEAD~2 注意事项 使用 git reset 时要小心，因为它会丢弃更改。 使用 git revert 时，确保你理解了将要撤销的更改，因为这将创建一个新的提交。这可能会影响提交历史和分支结构。 使用 git revert 而不是 git reset 的好处是，它不会改变历史记录，而是通过创建一个新的提交来记录撤销操作，这样可以保持历史的完整性，并且不会影响其他协作者的工作。 通过理解这两个命令的不同，你可以根据需要选择最合适的命令来撤销更改。 十一、安全性考虑使用 Git 时，安全性是一个重要的考虑因素。以下是一些安全性建议： 保护密钥：使用 SSH 密钥或 HTTPS 令牌进行身份验证，并确保它们得到妥善保护。 访问控制：设置适当的权限和访问控制，以限制对代码库的访问。 定期更新：定期更新 Git 和相关工具，以确保安全性漏洞得到修复。了解如何保护代码库和密钥有助于确保代码的安全性。 十二、技巧以下是一些使用 Git 的技巧： 定期推送到远程仓库：定期将更改推送到远程仓库，以保持备份和同步。 保持分支的清洁：定期清理分支，删除不再需要的分支。 使用描述性的提交消息：编写清晰、描述性的提交消息，以便于理解代码的更改。了解这些最佳实践和技巧有助于更好地使用 Git。 十三、资源和进一步学习以下是一些学习 Git 的资源和进一步学习的建议： 官方文档：Git 的官方文档是学习 Git 的最佳起点。您可以在 git-scm.com 上找到官方文档。 在线教程：许多在线平台提供了 Git 的教程和课程，例如 GitHub、GitLab 等。 书籍：有许多关于 Git 的优秀书籍，例如《Pro Git》和《Git Pocket Guide》。了解这些资源和进一步学习的建议有助于深入理解 Git。通过添加这些内容，您的博客文章将更加全面和有用，能够帮助读者更好地理解和使用 Git。","tags":["Git","指南"],"categories":["Git"]},{"title":"深入理解RESTful风格接口的设计与应用","path":"/posts/2024/02/03/232901/","content":"RESTful风格接口的基本概念 资源（Resource）：RESTful架构中的核心概念是资源，它可以是任何可以命名的事物，如用户、商品、订单等。每个资源都应该有一个唯一的URI作为其标识。 统一接口（Uniform Interface）：RESTful架构要求通过统一的接口对资源进行操作，包括GET、POST、PUT、DELETE等HTTP方法。统一接口的原则有助于提高接口的可读性和可维护性。 URI（Uniform Resource Identifier）：每个资源都应该有一个唯一的URI作为其标识。URI应该能够直观地表示资源的层次结构和类型。 无状态（Stateless）：RESTful架构要求每个请求都是独立的，服务器不会保存任何关于客户端状态的信息。这有助于提高系统的可扩展性和可靠性。 RESTful风格接口的设计原则 使用HTTP方法表示操作：GET用于获取资源，POST用于创建资源，PUT用于更新资源，DELETE用于删除资源。通过使用不同的HTTP方法，可以清晰地表示对资源的不同操作。 使用URI表示资源：URI应该能够直观地表示资源的层次结构和类型。例如，可以使用”users”表示用户资源，使用”users{user_id}articles”表示特定用户的文章资源。 使用JSON或XML作为数据格式：RESTful接口通常使用JSON或XML格式来传输数据。JSON格式轻量级且易于阅读，因此在现代Web开发中得到了广泛应用。 提供适当的错误处理：接口应该能够返回清晰的错误信息，包括错误码和错误描述。这有助于快速定位和解决问题。 RESTful风格接口的应用实例接下来，我们将通过一个简单的实例来展示如何设计一个RESTful风格的接口。假设我们要实现一个简单的博客系统，包括用户和文章两个资源。 设计URI 用户资源：/users 文章资源：/users/user_id/articles 设计HTTP方法 获取用户列表：GET /users 创建新用户：POST /users 获取指定用户：GET /users/user_id 更新指定用户：PUT /users/user_id 删除指定用户：DELETE /users/user_id 获取指定用户的文章列表：GET /users/user_id/articles 创建新文章：POST /users/user_id/articles 获取指定文章：GET /users/user_id/articles/article_id 更新指定文章：PUT /users/user_id/articles/article_id 删除指定文章：DELETE /users/user_id/articles/article_id 设计响应数据格式 code: 200, message: Success, data: user_id: 1, username: John, email: john@example.com 实现接口根据设计的URI和HTTP方法，我们可以使用各种编程语言和框架来实现这些接口。在实际项目中，我们通常会使用如Node.js的Express框架、Python的Flask或Django框架等来快速搭建RESTful风格的接口。","tags":["规范","RESTful"],"categories":["风格"]},{"title":"R-Studio：一款强大的数据恢复工具","path":"/posts/2024/02/03/103844/","content":"R-Studio简介R-Studio是一款功能强大的数据恢复软件，它支持多种文件系统和存储设备。能恢复大多数的存储设备，R-Studio能帮助用户恢复丢失、删除或格式化的数据。它采用了先进的算法和技术，能够扫描和恢复各种类型的文件，包括文档、图片、音频和视频等。 R-Studio的特点和功能R-Studio具有许多独特的特点和功能，使其成为数据恢复领域的佼佼者。首先，它支持多种文件系统，包括NTFS、FAT、exFAT、HFS+等，这意味着无论是Windows、Mac还是Linux系统，R-Studio都能提供数据恢复解决方案。其次，R-Studio提供了强大的扫描和恢复选项，包括快速扫描、深度扫描和文件结构分析等，以最大程度地恢复丢失的数据。此外，R-Studio还支持RAID恢复、分区恢复和加密文件恢复等功能，使其成为一个全面的数据恢复工具。R-Studio还提供了预览功能，让用户在恢复之前可以查看文件内容，以确保恢复正确的数据。 使用R-Studio进行数据恢复使用R-Studio进行数据恢复相对简单。首先，需要 下载 并安装R-Studio软件。 然后，连接需要恢复数据的存储设备到计算机（也可以选择本机存储设备，而不是其他外置设备）。接下来，打开R-Studio软件并选择相应的存储设备，双击即可进行扫描文件。 在左侧找到“Root”点击它，然后在右侧可以看到一些文件，图标带“X”的就是被误删的文件。 找到你要恢复的文件，右键点击左上角的恢复即可恢复你要的文件。最后将文件恢复到安全位置即可。 注意事项虽然R-Studio是一款强大的数据恢复工具，但在使用时仍需注意一些事项。首先，应避免在需要恢复数据的存储设备上进行任何写操作，以防止数据被覆盖。其次，恢复数据时应选择一个安全的位置保存恢复的文件，以避免数据覆盖或丢失。此外，数据恢复是一个复杂的过程，可能需要一些时间和耐心。如果不确定如何操作，建议寻求专业的数据恢复服务。","tags":["数据恢复"],"categories":["工具"]},{"title":"Rust使用蒙特卡洛方法估算圆周率","path":"/posts/2024/02/03/094855/","content":"使用Rust和蒙特卡洛方法估算圆周率蒙特卡洛方法简介蒙特卡洛方法是一种基于概率和随机抽样的算法，用于解决各种数学和物理问题。在估算圆周率的情况下，蒙特卡洛方法通过随机生成点并计算它们落在单位圆内的比例来工作。 Rust编程语言Rust是一种系统编程语言，它提供了对性能和安全的保证。Rust的内存安全特性使其成为编写高性能并发程序的理想选择。 实现蒙特卡洛方法rayon是一个用于并行迭代和处理数据的Rust库，它可以帮助你轻松地将迭代任务分配到多个CPU核心上，从而加速计算。首先，你需要在Cargo.toml中添加依赖：rayon [dependencies]rayon = 1.5.1 然后，你可以使用的并行迭代功能来并行化圆周率的计算。以下是一个示例代码： use rayon::prelude::*;use std::time::Instant;fn main() let now = Instant::now(); let total_iterations: usize = 1_000_000_000; let inside_circle: usize = (0..total_iterations) .into_par_iter() .filter(|_| let x: f64 = rand::random(); let y: f64 = rand::random(); x * x + y * y = 1.0 ) .count(); let pi_estimate = (inside_circle as f64 / total_iterations as f64) * 4.0; println!(Estimated value of Pi: , pi_estimate); println!(Time taken: :.2?, now.elapsed()); 代码解释 导入必要的库：rayon用于并行计算。 使用Instant::now()获取当前时间，用于计算程序运行时间。 设置总迭代次数为1亿次。 使用rayon的并行迭代功能来加速计算。 在每个迭代中，生成一对随机数（x和y），并检查它们是否落在单位圆内。 计算落在圆内的点的数量。 根据落在圆内的点的比例估算圆周率。 输出估算的圆周率值和程序运行时间。","tags":["算法"],"categories":["Rust"]},{"title":"Node.js 用Socket从零开始编写一个Chat-Cli","path":"/posts/2024/01/31/232442/","content":"Socket一种独立于协议的网络编程接口，所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。 Socket主要类型流套接字(SOCK_STREAM)流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了传输控制协议，即TCP(The Transmission Control Protocol)协议。数据报套接字(SOCK_DGRAM)数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性,数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用UDP( User DatagramProtocol)协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理 。原始套接字(SOCK_RAW)原始套接字与标准套接字(标准套接字指的是前面介绍的流套接字和数据报套接字)的区别在于：原始套接字可以读写内核没有处理的IP数据包，而流套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接。 Socket主要流程要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket。 根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤：(1)服务器监听。(2)客户端请求。(3)连接确认 。 1.服务器监听所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。 2.客户端请求所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求。 3.连接确认所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求。 Socket主要特点根据套接字的不同类型，可以将套接字调用分为面向连接服务和无连接服务。 面向连接服务的主要特点如下：(1)数据传输过程必须经过建立连接、维护连接和释放连接3个阶段 ；(2)在传输过程中，各分组不需要携带目的主机的地址；(3)可靠性好，但由于协议复杂，通信效率不高 。 面向无连接服务的主要特点如下：(1)不需要连接的各个阶段 ；(2)每个分组都携带完整的目的主机地址，在系统中独立传送 ；(3)由于没有顺序控制，所以接收方的分组可能出现乱序、重复和丢失现象 ；(4)通信效率高，但可靠性不能确保。 Socket的引入为了更方便地开发网络应用程序，美国伯克利大学在UNIX上推出了一种应用程序访问通信协议的操作系统调用接字(Socket)。 Socket的出现，使得程序员可以很方便地访问 TCPIP，从而开发各种网络应用程序。后来套接字被引进到 Windows等操作系统，成为开发网络应用程序的有效工具。套接字存在于通信区域，通信区域也被称为地址族，主要用于将通过套接字通信的进程的公有特性综合在一起。套接字通常只与同一区域的套接字交换数据。Windows Socket只支持一个通信区域——AF_INET国际网区域，使用网际协议族通信的进程使用该域。 Http与Socket的区别在以前我们实现数据交换已经有了HTTP协议,为什么还要学习Socket？回顾当输出 www.baidu.com 的时候浏览器执行了那些操作？ http通信的特点：连接属于非持久性连接:TCP的三次握手客户端只能访问服务端，服务端无法访问客户端，属于单项通信TCP三次握手：TCP三次握手过程中不传递数据,只为同步连接双方的序列号和确认号传递数据，在握手后服务端和客户端才开始传输数据，在理想状态下，TCP连接一旦建立，在通信的双方中任何一方主动断开连接之前TCP连接会一直保持下去。 Socket通信特点:1、持久性连接2、双向通信，客户端能访问服务端，服务端也能访问客户端 Socket是对TCPIP协议的封装，Socket只是一个接口而不是一个协议，通过Socket我们才能使用TCPIPUDP协议。 Socket原理 开始写一个简单的Socket //server.js//服务器端// 加载net模块var net = require(net)// 创建net实例对象var server = net.createServer();server.on(connection,function(client) client.on(data,function(data) console.log(客户端发来：+data) // 向客户端发送信息 client.write(测试); ) // Socket客户端关闭 client.on(close, function (err) console.log(client.remotePort + 退出了聊天室); )// 建立监听server.listen(3000, function () console.log(Starting Socket server...); console.log(http://127.0.0.1:3000); console.log();)// 服务器异常server.on(error, function () console.log(Server error););client.js//客户端var net= require(net)// 创建连接var socket = net.createConnection( host: 127.0.0.1, port: 3000)socket.on(connect, function () // 一直读取输入 process.stdin.on(data, function (msg) socket.write(msg.toString(); );// 接收服务器端发来的数据socket.on(data,function(data) console.log(服务器发来：+data)) 这是一个简单实例，也很好理解。 编写Chat-CliChat-cli就是在命令行上聊天都一种方式，为什么要在命令行上聊天呢？因为这样的程序占用较小，可以边敲命令边聊天，这看起来是不是很不错？接下来我们将深入的编写Chat-cli，我将我编写的命名为NChat-Cli。实现原理归根结底就是将所有加入的用户存在一个数组里面。那放数组里面怎么知道那个是谁呢？我们可以用内置的一个函数Socket.remotePort获取对应的id，可以将名字加id结合起来找到对应用户，一个用户实质就是一个Socket，如果要实现私聊，可以将这些信息存储至数组里面，比如{username: username, id: id, socket: socket}，通过id查找用户(Socket)如何实现多房间聊天呢？这个实现也很简单，还是吧用户存储在数组里面，可以创建一个二维数组Array[HomeID][UserSocket],也可以存储用户信息，可以这样Array[HomeID]{username: username, id: id, socket: socket}，当用户向房间发送信息时，遍历这个房间所有用户，向遍历出来的用户逐一发送，除自己外。上面提到的一些变量意思为： username：用户名，id：用户id，Socket和UserSocket：就是一个用户，HomeID：房间号。 npm init # 初始化一个项目npm install moment --save # 安装时间工具 //server.js// 加载net模块const net = require(net);// 加载时间模块var moment = require(moment);// 创建net实例对象var server = net.createServer();// 保存所有客户的socket对象var users = [];// 保存所有房间IDvar homeIDs = Array();// 计算数组总数,不计空数组function count_array_num(array) var num = 0; for (let i = 0; i array.length; i++) if(array[i] != undefined || array[i] != null) num++; return num;// 建立监听server.listen(3000, function () console.log(Starting NChat server...); console.log(http://127.0.0.1:3000); console.log();)server.on(connection, function (socket) // 客户端发送的数据 var client_data; // 将加入聊天室的用户加入至数组 users.push(socket); socket.on(data, function (data) console.log(data.toString()); client_data = JSON.parse(data); // 房间用户初始化 if(homeIDs[client_data.homeID] == undefined) homeIDs[client_data.homeID] = Array(); // 昵称为空判断 if(client_data.username == null) //为空则初始化昵称 client_data.username = User + socket.remotePort; // 加入房间 var isExist = 0; // o: false , 1: true for(var i = 0; i homeIDs[client_data.homeID].length; i++) // 用户加入判断 if(homeIDs[client_data.homeID][i] != undefined homeIDs[client_data.homeID][i].remotePort == socket.remotePort) isExist = 1; break; // 如果用户没有加入房间则加入 if (isExist == 0) homeIDs[client_data.homeID].push(socket); var time = moment(Date.now()).format(YYYY-MM-DD HH:mm:ss); console.log(time + + client_data.username + ( + socket.remotePort + ) + Join + client_data.homeID + home(Online num: + count_array_num(homeIDs[client_data.homeID]) + )); for(var j = 0; j homeIDs[client_data.homeID].length; j++) if(homeIDs[client_data.homeID][j] != undefined homeIDs[client_data.homeID][j] != socket) homeIDs[client_data.homeID][j].write(time + + client_data.username + ( + socket.remotePort + ) + 加入了 + client_data.homeID + 房间(在线人数: + count_array_num(homeIDs[client_data.homeID]) + )); else if(homeIDs[client_data.homeID][j] != undefined) socket.write(加入 + client_data.homeID + 房间成功! 在线人数: + count_array_num(homeIDs[client_data.homeID]) + ) ); ; // 发送信息 for(var k = 0; k homeIDs[client_data.homeID].length; k++) if(homeIDs[client_data.homeID][k] != undefined client_data.message != undefined homeIDs[client_data.homeID][k] != socket) var time = moment(Date.now()).format(YYYY-MM-DD HH:mm:ss); homeIDs[client_data.homeID][k].write(time + + client_data.username + : + client_data.message); ) // 用户退出调用 socket.on(close, function (err) var time = moment(Date.now()).format(YYYY-MM-DD HH:mm:ss); console.log(time + + client_data.username + ( + socket.remotePort + ) + Exit + client_data.homeID + home(Online num: + count_array_num(homeIDs[client_data.homeID]) + )); // 删除房间里面的退出去的用户 for(var j = 0; j homeIDs[client_data.homeID].length; j++) if(homeIDs[client_data.homeID][j] == socket) delete homeIDs[client_data.homeID][j]; else if(homeIDs[client_data.homeID][j] != undefined) // 输出退出信息,不输出给退出的用户 homeIDs[client_data.homeID][j].write(time + + client_data.username + ( + socket.remotePort + ) + 退出了 + client_data.homeID + 房间(在线人数: + count_array_num(homeIDs[client_data.homeID]) + ) ); users.forEach(function (uesr) // 删除退出去的总用户 for(var k = 0; k users.length; k++) if( users[k] == socket) delete users[k]; ); ))// 服务器异常server.on(error, function () console.log(Server error);); // client.js//导入netvar net = require(net);//发送数据的实体var data = username: null, homeID: null, message: undefined//处理参数const argv = process.argv.slice(2);for (let i = 0; i argv.length; i++) switch(argv[i]) case -n: data.username = argv[i +1]; i++; break; case -id: data.homeID = argv[i +1]; i++; break; case -c: content = argv[i +1]; i++; break; case -v: console.log(NChat Version: 1.0 bate); process.exit(0); case --help: console.log(Usage: nchat [options]); console.log(); console.log(Options:); console.log( -n add username); console.log( -id add homeid); console.log( -c send content); console.log( -v get version); console.log( --help help); process.exit(0); default: console.log(Unknown parameter); // 创建连接var socket = net.createConnection( host: 127.0.0.1, port: 3000)// 输入消息socket.on(connect, function () // 待发送内容 var content; //提前告诉服务端个人信息 socket.write(JSON.stringify(data)); if(content != null) data.message = content; socket.write(JSON.stringify(data)); process.exit(0); //读取要发送给用户的内容 process.stdin.on(data, function (msg) process.stdout.write( ); data.message = msg.toString().slice(0, -1); socket.write(JSON.stringify(data)); ););//接收消息socket.on(data, function (data) console.log(data.toString() + ););//服务器异常socket.on(error, function (err) console.log(Server error);) 编译运行npm run startnode client.js -n 昵称 -n 房间号 然后就可以在命令行上面聊天啦！开源地址 Github","tags":["及时通讯","Socket"],"categories":["Node.js"]},{"title":"Hello World","path":"/posts/2024/01/30/000000/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"},{"title":"Hello World","path":"/README.html","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"},{"title":"关于我","path":"/about/index.html","content":"我的座右铭追求简洁，顺其自然！ 📫 联系我联系我最方便的方法就是邮箱啦 Google 邮箱： pdchro@gmail.comQQ 邮箱： natuie@qq.com （稳定）Outlook 邮箱： natuieo@outlook.com 🔗 其他平台 酷安 Github Gitee 🔑 GPG 指纹3C37E9E61A32554986CFC27B4EF355C838B915D3 🎁 打赏如果觉得我的文章对您有帮助，欢迎打赏！"},{"title":"探索","path":"/explore/index.html","content":"网站推荐（不全）资源共享站清华大学镜像站华为云镜像站Github镜像站文叔叔打字练习图片背景删除工具文件格式转换器编程工具51PPT第一PPT 学习资源C学习C++学习Python学习Java学习算法学习计算机基础Spring Boot手册 有推荐的话，欢迎留言！"},{"title":"友情链接","path":"/friends/index.html","content":"友情链接晴雨笔记轻笑Chuckle小小空间木瓜一块八栀锿Aouth 申请友链评论区留下友链吧!使用如下格式： title: 站名url: 链接cover: 封面图icon: 图标description: 介绍 我的友链title: 知行小屋url: https://blog.natuie.net/cover: https://blog.natuie.net/img/cover.pngicon: https://blog.natuie.net/favicon.icodescription: 追求简洁，顺其自然！"},{"title":"笔记","path":"/notes/index.html","content":"来听歌吧~今日是否感受到了那份难以名状的忧郁，它如同现代都市中的霓虹灯，虽五彩斑斓，却掩不住背后的孤寂与落寞，照亮了夜空，却照不进心房？来一起听歌吧 计算机学习笔记自己去学就行了😊 教程Github Actions详细教程 镜像索引"},{"path":"/notes/mirror.html","content":"镜像索引站 一、操作系统镜像 Ubuntu 镜像地址： 镜像源 地址 阿里云 http://mirrors.aliyun.com/ubuntu/ 清华大学 http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ 中国科学技术大学 http://mirrors.ustc.edu.cn/ubuntu/ 华为云 http://repo.huaweicloud.com/ubuntu/ 一键更换命令行： 阿里云： sudo sed -i s/archive.ubuntu.com/mirrors.aliyun.com/g /etc/apt/sources.listsudo apt update 清华大学： sudo sed -i s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g /etc/apt/sources.listsudo apt update 中国科学技术大学： sudo sed -i s/archive.ubuntu.com/mirrors.ustc.edu.cn/g /etc/apt/sources.listsudo apt update 华为云： sudo sed -i s/archive.ubuntu.com/repo.huaweicloud.com/g /etc/apt/sources.listsudo apt update Fedora 镜像地址： 镜像源 地址 阿里云 https://mirrors.aliyun.com/fedora/ 清华大学 https://mirrors.tuna.tsinghua.edu.cn/fedora/ 中国科学技术大学 http://mirrors.ustc.edu.cn/ubuntu/ 腾讯 https://mirrors.cloud.tencent.com/fedora/ 一键更换命令行： 清华大学： sed -e s|^metalink=|#metalink=|g \\-e s|^#baseurl=http://download.example/pub/fedora/linux|baseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora|g \\-i.bak \\/etc/yum.repos.d/fedora.repo \\/etc/yum.repos.d/fedora-updates.repo 二、软件镜像 pip 镜像地址： 镜像源 地址 阿里云 https://mirrors.aliyun.com/pypi/simple 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple 豆瓣 https://pypi.douban.com/simple 腾讯 https://pypi.tuna.tsinghua.edu.cn/simple 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple 一键更换命令行： 豆瓣： pip config set global.index-url https://pypi.douban.com/simple npm，yarn，pnpm 镜像地址： 镜像源 地址 阿里云 https://npm.aliyun.com/ 淘宝 https://registry.npmmirror.com/ 腾讯 https://mirrors.cloud.tencent.com/npm/ 一键更换命令行： 淘宝： npm config set registry https://registry.npmmirror.comyarn config set registry https://registry.npmmirror.com/pnpm config set registry https://registry.npmmirror.com/"},{"title":"wiki","path":"/wiki/index.html","content":"没有欸还在想捏。。。不知道写啥，留个位置。"}]